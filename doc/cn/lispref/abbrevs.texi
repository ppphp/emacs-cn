@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1994, 1999, 2001--2020 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node 缩写
@chapter Abbrevs and Abbrev Expansion
@cindex abbrev
@c  @cindex abbrev table  Redundant with "abbrev".

  缩写或@dfn{abbrev}是可以扩充为一个较长的字符串的一串字符。用户可以插入缩写
字符串后会发现它被自动替换为缩写的扩展。它省去了打字的时间。

  当前有效的缩写语集记录在@dfn{缩写表}。每个缓冲区都有一个本地的缩写表，但通常
所有的缓冲区在同一主要模式下，共享一个缩写表。还有一个全局的缩写表。通常两者都被
使用。

  缩写表用一个obarray表示。@xref{创建符号}，了解有关obarrays的信息。每个缩写
在obarray中用一个符号表示。符号的名称是缩写；其值为展开；其函数定义是用于执行展
开的钩子函数（@pxref{定义缩写}）；其属性列表单元中包含了各种附加的属性，包括使
用次数和缩写展开次数。（@pxref{缩写属性}）。

@cindex 系统缩写
  某些缩写，称为@dfn{系统缩写}，是由一个主要的模式，而不是用户。 一个系统的缩写
是由它的非@code{nil} @code{:system} 属性 (@pxref{缩写属性})。当缩写被保存
到缩写文件中时，系统缩写将被省略。@xref{缩写文件}.

  因为用于缩写的符号并不在通常的obarray中保留，它们永远不会出现在读取Lisp表达式
的结果中；事实上，除了处理缩写的代码，他们永远不会被使用。因此，它们以非标准方式可
以安全地使用。

  如果启用了次要模式Abbrev模式，缓冲区本地变量@code{abbrev-mode}是非@code{nil}
，缩写会自动地在缓冲区中展开。 关于缩写的用户级命令，请参见
@ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.

@menu
* 表格: 缩写表.        创建并使用缩写表.
* 定义缩写::            定义缩写和展开.
* 文件: 缩写文件.          文件中保存缩写.
* 展开: 缩写展开.  控制展开; 展开子路线.
* 标准缩写表::      在多种主要模式中使用的缩写表.
* 缩写属性::           如何阅读和设置缩写属性.
                                什么属性有什么效果.
* 缩写表格属性::     如何阅读和设置缩写表格属性.
                                什么属性有什么效果.
@end menu

@node 缩写表
@section Abbrev Tables
@cindex abbrev tables

  本节介绍如何创建和操作缩写表。

@defun make-abbrev-table &optional props
这个函数创建并返回一个新的、空的缩写表-------一个不包含任何符号的obarray。
它是一个充满零的向量。@var{props}是应用于新表的属性列表。
(@pxref{缩写表属性}).
@end defun

@defun abbrev-table-p object
如果@var{object}是一个缩写表，则该函数返回一个非@code{nil}的值。
@end defun

@defun clear-abbrev-table abbrev-table
此函数取消定义@var{abbrev-table}中的所有缩写词，让它变成空的。
@c 不明白为什么要这么说。
@c 它总是返回@code{nil}。
@c Don't see why this needs saying.
@c It always returns @code{nil}.
@end defun

@defun copy-abbrev-table abbrev-table
这个函数返回@var{abbrev-table}的副本--一个新的缩写表，其中包含相同的缩写定义。它
@emph{不}复制任何属性列表；只有名称、值和函数。
@end defun

@defun define-abbrev-table tabname definitions &optional docstring &rest props
这个函数将@var{tabname}(一个符号)定义为一个缩写表名，比如作为一个变量，其值是一个缩
写表。它根据@var{definitions}定义了表格中的缩写，是一个形式
@code{(@var{abbrevname} @var{expansion}[@var{hook}] [@var{props}...])}的
元素的列表。这些元素作为参数传递到@code{define-abbrev}。 @c 返回值总是 @code{nil}。

可选的字符串@var{docstring}是变量@var{tabname}的文档字符串。属性列表@var{props}
应用于这个缩写表（@pxref{缩写表属性}）。

如果这个函数对同一个@var{tabname}被调用超过一次，后续调用将@var{definitions}中的定
义添加到@var{tabname}，而不是覆盖整个原始内容。(后续的调用只覆盖了明确重新定义的缩写或
是在@var{definitions}中未定义的）。)
@end defun

@defvar abbrev-table-name-list
这是一个值为缩写表的符号列表。@code{define-abbrev-table}将新的缩写表名称添加到这个列
表中。
@end defvar

@defun insert-abbrev-table-description name &optional human
该函数在点前插入名为@var{name}缩写表的描述。参数@var{name}是一个符号，它的值是个缩写表
。 @c 返回值总是@code{nil}。

如果@var{human}是非@code{nil}，则说明是面向人类的。系统缩略语会被列出来，并被识别为系统
缩略语。否则描述是一个Lisp表达式---对@code{define-abbrev-table}的调用会按照当前的定义
来定义@var{name}，但不包括的系统缩写。(使用 @var{name}的模式或软件包应该将这些内容分别
添加到@var{name}中）。)
@end defun

@node Defining Abbrevs
@section Defining Abbrevs
@cindex defining abbrevs

  @code{define-abbrev} is the low-level basic function for defining an
abbrev in an abbrev table.

  When a major mode defines a system abbrev, it should call
@code{define-abbrev} and specify @code{t} for the @code{:system}
property.  Be aware that any saved non-system abbrevs are restored
at startup, i.e., before some major modes are loaded.  Therefore, major
modes should not assume that their abbrev tables are empty when they
are first loaded.

@defun define-abbrev abbrev-table name expansion &optional hook &rest props
This function defines an abbrev named @var{name}, in
@var{abbrev-table}, to expand to @var{expansion} and call @var{hook},
with properties @var{props} (@pxref{Abbrev Properties}).  The return
value is @var{name}.  The @code{:system} property in @var{props} is
treated specially here: if it has the value @code{force}, then it will
overwrite an existing definition even for a non-system abbrev of
the same name.

@var{name} should be a string.  The argument @var{expansion} is
normally the desired expansion (a string), or @code{nil} to undefine
the abbrev.  If it is anything but a string or @code{nil}, then the
abbreviation expands solely by running @var{hook}.

The argument @var{hook} is a function or @code{nil}.  If @var{hook} is
non-@code{nil}, then it is called with no arguments after the abbrev is
replaced with @var{expansion}; point is located at the end of
@var{expansion} when @var{hook} is called.

@cindex @code{no-self-insert} property
If @var{hook} is a non-@code{nil} symbol whose @code{no-self-insert}
property is non-@code{nil}, @var{hook} can explicitly control whether
to insert the self-inserting input character that triggered the
expansion.  If @var{hook} returns non-@code{nil} in this case, that
inhibits insertion of the character.  By contrast, if @var{hook}
returns @code{nil}, @code{expand-abbrev} (or @code{abbrev-insert})
also returns @code{nil}, as if expansion had not really occurred.

Normally, @code{define-abbrev} sets the variable
@code{abbrevs-changed} to @code{t}, if it actually changes the abbrev.
This is so that some commands will offer to save the abbrevs.  It
does not do this for a system abbrev, since those aren't saved anyway.
@end defun

@defopt only-global-abbrevs
If this variable is non-@code{nil}, it means that the user plans to use
global abbrevs only.  This tells the commands that define mode-specific
abbrevs to define global ones instead.  This variable does not alter the
behavior of the functions in this section; it is examined by their
callers.
@end defopt

@node Abbrev Files
@section Saving Abbrevs in Files
@cindex save abbrevs in files

  A file of saved abbrev definitions is actually a file of Lisp code.
The abbrevs are saved in the form of a Lisp program to define the same
abbrev tables with the same contents.  Therefore, you can load the file
with @code{load} (@pxref{How Programs Do Loading}).  However, the
function @code{quietly-read-abbrev-file} is provided as a more
convenient interface.  Emacs automatically calls this function at
startup.

  User-level facilities such as @code{save-some-buffers} can save
abbrevs in a file automatically, under the control of variables
described here.

@defopt abbrev-file-name
This is the default file name for reading and saving abbrevs.  By
default, Emacs will look for @file{~/.emacs.d/abbrev_defs}, and, if
not found, for @file{~/.abbrev_defs}; if neither file exists, Emacs
will create @file{~/.emacs.d/abbrev_defs}.
@end defopt

@defun quietly-read-abbrev-file &optional filename
This function reads abbrev definitions from a file named @var{filename},
previously written with @code{write-abbrev-file}.  If @var{filename} is
omitted or @code{nil}, the file specified in @code{abbrev-file-name} is
used.

As the name implies, this function does not display any messages.
@c It returns @code{nil}.
@end defun

@defopt save-abbrevs
A non-@code{nil} value for @code{save-abbrevs} means that Emacs should
offer to save abbrevs (if any have changed) when files are saved.  If
the value is @code{silently}, Emacs saves the abbrevs without asking
the user.  @code{abbrev-file-name} specifies the file to save the
abbrevs in.  The default value is @code{t}.
@end defopt

@defvar abbrevs-changed
This variable is set non-@code{nil} by defining or altering any
abbrevs (except system abbrevs).  This serves as a flag for various
Emacs commands to offer to save your abbrevs.
@end defvar

@deffn Command write-abbrev-file &optional filename
Save all abbrev definitions (except system abbrevs), for all abbrev
tables listed in @code{abbrev-table-name-list}, in the file
@var{filename}, in the form of a Lisp program that when loaded will
define the same abbrevs.  Tables that do not have any abbrevs to save
are omitted.  If @var{filename} is @code{nil} or omitted,
@code{abbrev-file-name} is used.  This function returns @code{nil}.
@end deffn

@node Abbrev Expansion
@section Looking Up and Expanding Abbreviations
@cindex looking up abbrevs
@cindex expanding abbrevs
@cindex abbrevs, looking up and expanding

  Abbrevs are usually expanded by certain interactive commands,
including @code{self-insert-command}.  This section describes the
subroutines used in writing such commands, as well as the variables they
use for communication.

@defun abbrev-symbol abbrev &optional table
This function returns the symbol representing the abbrev named
@var{abbrev}.  It returns @code{nil} if that abbrev is not
defined.  The optional second argument @var{table} is the abbrev table
in which to look it up.  If @var{table} is @code{nil}, this function
tries first the current buffer's local abbrev table, and second the
global abbrev table.
@end defun

@defun abbrev-expansion abbrev &optional table
This function returns the string that @var{abbrev} would expand into (as
defined by the abbrev tables used for the current buffer).  It returns
@code{nil} if @var{abbrev} is not a valid abbrev.
The optional argument @var{table} specifies the abbrev table to use,
as in @code{abbrev-symbol}.
@end defun

@deffn Command expand-abbrev
This command expands the abbrev before point, if any.  If point does not
follow an abbrev, this command does nothing.  To do the expansion, it
calls the function that is the value of the @code{abbrev-expand-function}
variable, with no arguments, and returns whatever that function does.

The default expansion function returns the abbrev symbol if it did
expansion, and @code{nil} otherwise.  If the abbrev symbol has a hook
function that is a symbol whose @code{no-self-insert} property is
non-@code{nil}, and if the hook function returns @code{nil} as its
value, then the default expansion function returns @code{nil},
even though expansion did occur.
@end deffn

@defun abbrev-insert abbrev &optional name start end
This function inserts the abbrev expansion of @code{abbrev}, replacing
the text between @code{start} and @code{end}.  If @code{start} is
omitted, it defaults to point.  @code{name}, if non-@code{nil}, should
be the name by which this abbrev was found (a string); it is used to
figure out whether to adjust the capitalization of the expansion.  The
function returns @code{abbrev} if the abbrev was successfully
inserted, otherwise it returns @code{nil}.
@end defun

@deffn Command abbrev-prefix-mark &optional arg
This command marks the current location of point as the beginning of
an abbrev.  The next call to @code{expand-abbrev} will use the text
from here to point (where it is then) as the abbrev to expand, rather
than using the previous word as usual.

First, this command expands any abbrev before point, unless @var{arg}
is non-@code{nil}.  (Interactively, @var{arg} is the prefix argument.)
Then it inserts a hyphen before point, to indicate the start of the
next abbrev to be expanded.  The actual expansion removes the hyphen.
@end deffn

@defopt abbrev-all-caps
When this is set non-@code{nil}, an abbrev entered entirely in upper
case is expanded using all upper case.  Otherwise, an abbrev entered
entirely in upper case is expanded by capitalizing each word of the
expansion.
@end defopt

@defvar abbrev-start-location
The value of this variable is a buffer position (an integer or a marker)
for @code{expand-abbrev} to use as the start of the next abbrev to be
expanded.  The value can also be @code{nil}, which means to use the
word before point instead.  @code{abbrev-start-location} is set to
@code{nil} each time @code{expand-abbrev} is called.  This variable is
also set by @code{abbrev-prefix-mark}.
@end defvar

@defvar abbrev-start-location-buffer
The value of this variable is the buffer for which
@code{abbrev-start-location} has been set.  Trying to expand an abbrev
in any other buffer clears @code{abbrev-start-location}.  This variable
is set by @code{abbrev-prefix-mark}.
@end defvar

@defvar last-abbrev
This is the @code{abbrev-symbol} of the most recent abbrev expanded.  This
information is left by @code{expand-abbrev} for the sake of the
@code{unexpand-abbrev} command (@pxref{Expanding Abbrevs,, Expanding
Abbrevs, emacs, The GNU Emacs Manual}).
@end defvar

@defvar last-abbrev-location
This is the location of the most recent abbrev expanded.  This contains
information left by @code{expand-abbrev} for the sake of the
@code{unexpand-abbrev} command.
@end defvar

@defvar last-abbrev-text
This is the exact expansion text of the most recent abbrev expanded,
after case conversion (if any).  Its value is @code{nil} if the abbrev
has already been unexpanded.  This contains information left by
@code{expand-abbrev} for the sake of the @code{unexpand-abbrev} command.
@end defvar

@defvar abbrev-expand-function
The value of this variable is a function that @code{expand-abbrev}
will call with no arguments to do the expansion.  The function can do
anything it wants before and after performing the expansion.
It should return the abbrev symbol if expansion took place.
@end defvar

  The following sample code shows a simple use of
@code{abbrev-expand-function}.  It assumes that @code{foo-mode} is a
mode for editing certain files in which lines that start with @samp{#}
are comments.  You want to use Text mode abbrevs for those lines.  The
regular local abbrev table, @code{foo-mode-abbrev-table} is
appropriate for all other lines.  @xref{Standard Abbrev Tables}, for the
definitions of @code{local-abbrev-table} and @code{text-mode-abbrev-table}.
@xref{Advising Functions}, for details of @code{add-function}.

@smallexample
(defun foo-mode-abbrev-expand-function (expand)
  (if (not (save-excursion (forward-line 0) (eq (char-after) ?#)))
      ;; Performs normal expansion.
      (funcall expand)
    ;; We're inside a comment: use the text-mode abbrevs.
    (let ((local-abbrev-table text-mode-abbrev-table))
      (funcall expand))))

(add-hook 'foo-mode-hook
          (lambda ()
            (add-function :around (local 'abbrev-expand-function)
                          #'foo-mode-abbrev-expand-function)))
@end smallexample

@node Standard Abbrev Tables
@section Standard Abbrev Tables
@cindex standard abbrev tables

  Here we list the variables that hold the abbrev tables for the
preloaded major modes of Emacs.

@defvar global-abbrev-table
This is the abbrev table for mode-independent abbrevs.  The abbrevs
defined in it apply to all buffers.  Each buffer may also have a local
abbrev table, whose abbrev definitions take precedence over those in the
global table.
@end defvar

@defvar local-abbrev-table
The value of this buffer-local variable is the (mode-specific)
abbreviation table of the current buffer.  It can also be a list of
such tables.
@end defvar

@defvar abbrev-minor-mode-table-alist
The value of this variable is a list of elements of the form
@code{(@var{mode} . @var{abbrev-table})} where @var{mode} is the name
of a variable: if the variable is bound to a non-@code{nil} value,
then the @var{abbrev-table} is active, otherwise it is ignored.
@var{abbrev-table} can also be a list of abbrev tables.
@end defvar

@defvar fundamental-mode-abbrev-table
This is the local abbrev table used in Fundamental mode; in other words,
it is the local abbrev table in all buffers in Fundamental mode.
@end defvar

@defvar text-mode-abbrev-table
This is the local abbrev table used in Text mode.
@end defvar

@defvar lisp-mode-abbrev-table
This is the local abbrev table used in Lisp mode.  It is the parent
of the local abbrev table used in Emacs Lisp mode.  @xref{Abbrev Table
Properties}.
@end defvar

@node Abbrev Properties
@section Abbrev Properties
@cindex abbrev properties

Abbrevs have properties, some of which influence the way they work.
You can provide them as arguments to @code{define-abbrev}, and
manipulate them with the following functions:

@defun abbrev-put abbrev prop val
Set the property @var{prop} of @var{abbrev} to value @var{val}.
@end defun

@defun abbrev-get abbrev prop
Return the property @var{prop} of @var{abbrev}, or @code{nil} if the
abbrev has no such property.
@end defun

The following properties have special meanings:

@table @code
@item :count
This property counts the number of times the abbrev has
been expanded.  If not explicitly set, it is initialized to 0 by
@code{define-abbrev}.

@item :system
If non-@code{nil}, this property marks the abbrev as a system abbrev.
Such abbrevs are not saved (@pxref{Abbrev Files}).

@item :enable-function
If non-@code{nil}, this property should be a function of no
arguments which returns @code{nil} if the abbrev should not be used
and @code{t} otherwise.

@item :case-fixed
If non-@code{nil}, this property indicates that the case of the
abbrev's name is significant and should only match a text with the
same pattern of capitalization.  It also disables the code that
modifies the capitalization of the expansion.
@end table

@node Abbrev Table Properties
@section Abbrev Table Properties
@cindex abbrev table properties

Like abbrevs, abbrev tables have properties, some of which influence
the way they work.  You can provide them as arguments to
@code{define-abbrev-table}, and manipulate them with the functions:

@defun abbrev-table-put table prop val
Set the property @var{prop} of abbrev table @var{table} to value @var{val}.
@end defun

@defun abbrev-table-get table prop
Return the property @var{prop} of abbrev table @var{table}, or @code{nil}
if @var{table} has no such property.
@end defun

The following properties have special meaning:

@table @code
@item :enable-function
This is like the @code{:enable-function} abbrev property except that
it applies to all abbrevs in the table.  It is used before even trying
to find the abbrev before point, so it can dynamically modify the
abbrev table.

@item :case-fixed
This is like the @code{:case-fixed} abbrev property except that it
applies to all abbrevs in the table.

@item :regexp
If non-@code{nil}, this property is a regular expression that
indicates how to extract the name of the abbrev before point, before
looking it up in the table.  When the regular expression matches
before point, the abbrev name is expected to be in submatch 1.
If this property is @code{nil}, the default is to use
@code{backward-word} and @code{forward-word} to find the name.  This
property allows the use of abbrevs whose name contains characters of
non-word syntax.

@item :parents
This property holds a list of tables from which to inherit
other abbrevs.

@item :abbrev-table-modiff
This property holds a counter incremented each time a new abbrev is
added to the table.

@end table
