@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1995, 1998--2020 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Display
@chapter Emacs Display

  本章介绍了一些与Emacs呈现给用户的显示相关的功能。

@menu
* 刷新屏幕::     清理屏幕并重新绘制屏幕上的所有内容。
* 强制重显::     强制重显
* 截断::         折叠或包裹长文本行。
* 回音区::       在屏幕底部显示信息。
* 警告::         显示用户的警告信息。
* 隐形文本::     隐藏部分缓冲区文本。
* 选择性显示::   隐藏部分缓冲区文字（老方法）。
* 临时显示::     自动消失的显示。
* 叠加::         使用叠加来突出显示缓冲区的部分内容。
* 显示文字的大小::显示的文字的大小。 显示文字的大小。
* 行高::        控制行的高度。
* 字型::        一个字型定义了文本字符的图形样式，包括字体、颜色等。
* 边缘::        控制窗口边缘。
* 滚动条::      控制滚动条。
* 窗口分割器::  控制窗口的分割。
* 显示属性::    控制图像、边距、文字大小等。
* 图像::        在Emacs缓冲区中显示图像。
* Xwidgets::    在Emacs缓冲区中显示本地部件。
* 按钮::        在Emacs缓冲区中添加可点击的按钮。
* 抽象显示::    Emacs的对象集合小部件。
* 闪烁::        Emacs如何显示匹配的开放括号。
* 字符显示::    Emacs显示单个字符的方式。
* 哔哔声::     给用户的声音信号。
* 窗口系统::   正在使用的窗口系统。
* 工具提示::   Emacs中的工具提示显示。
* 双向显示::   显示双向文本，如阿拉伯语和波斯语。
@end menu

@node 刷新屏幕
@section Refreshing the Screen
@cindex refresh the screen
@cindex screen refresh

  函数@code{redraw-frame}清除并重新显示给定窗帧（@pxref{Frames}）的全部
内容。这在屏幕有错误时非常有用。

@defun redraw-frame &optional frame
此函数清除并重新显示@var{frame}帧。如果@var{frame}被省略或者@code{nil}被
忽略，则重新显示当前所选的帧。
@end defun

  更强大的是@code{redraw-display}。

@deffn Command redraw-display
这个函数清除并重新显示所有可见的帧。
@end deffn

  在Emacs中，处理用户输入比重新显示优先。如果你在有输入时调用这些函数，它
们不会立即重新显示，但要求的重新显示最终会发生--在所有输入被处理后。

  在文本终端上，暂停和恢复Emacs通常也会刷新屏幕。一些终端仿真器为Emacs等
以显示为主的程序和普通的顺序显示的程序分别记录内容。如果你使用的是这样的终
端，你可能会想抑制恢复时的重新显示。

@defopt no-redraw-on-reenter
@cindex suspend (cf. @code{no-redraw-on-reenter})
@cindex resume (cf. @code{no-redraw-on-reenter})
这个变量控制Emacs暂停和恢复后是否重绘整个屏幕。非@code{nil}表示不需要重绘
，@code{nil}表示需要重绘。 默认为@code{nil}。
@end defopt

@node 强制重显
@section Forcing Redisplay
@cindex forcing redisplay

  Emacs正常情况会在等待输入时尝试重新显示屏幕。使用下面的函数，你可以在
Lisp代码中间请求立即尝试重新显示屏幕，而不需要等待输入。

@defun redisplay &optional force
这个函数会立即尝试重新显示。可选参数@var{force}如果是非@code{nil}，则强
制执行重新显示，而不是在输入待定的情况下被抢占。

如果函数确实重新显示，则返回@code{t}，否则返回@code{nil}。@code{t}的值并
不意味着重新显示已经完成；它可能已经被新到达的输入所取代。
@end defun

  虽然@code{redisplay}会立即尝试重新显示，但它并没有改变Emacs决定重新显
示框架中哪些部分的方式。对比之下，下面的函数将某些窗口加入到等待重新显示的
工作中（就像它们的内容已经完全改变了一样），但并没有立即尝试执行重新显示。

@defun force-window-update &optional object
这个函数强制在下次Emacs进行重新显示时更新部分或全部窗口。如果@var{object}
是一个窗口，那么该窗口将被更新。如果@var{object}是一个缓冲区或缓冲区名称
，那么所有显示该缓冲区的窗口都将被更新。如果@var{object}是@code{nil}。(
或省略)，所有的窗口都将被更新。

这个函数不会立即进行重新显示；Emacs会在等待输入时或调用函数
@code{redisplay}时进行重新显示。
@end defun

@defvar pre-redisplay-function
在重新显示之前运行的一个函数。调用该函数时有一个参数，即要重新显示的窗口集
。这个集合可以是@code{nil},表示只显示当前选定的窗口，也可以是@code{t},表
示所有的窗口。
@end defvar

@defvar pre-redisplay-functions
这个钩子是在重新显示之前运行的。它在每个即将被重新显示的窗口中被调用一次，
@code{current-buffer}设置为该窗口中显示的缓冲区。
@end defvar

@node 截断
@section Truncation
@cindex line wrapping
@cindex line truncation
@cindex continuation lines
@cindex @samp{$} in display
@cindex @samp{\} in display

  当一行文本延伸到窗口的右边缘之外时，Emacs可以@dfn{continue}行（使它包到
下一个屏幕行），或者@dfn{truncate}行（将它限制在一个屏幕行）。用于显示长文
本行的额外屏幕行称为@dfn{continuation}行。延续与填充不同。续行只发生在屏幕
上，而不是在缓冲区的内容中，而且它是在右边的空白处断行，而不是在字的边界处
。@xref{Filling}。

  在图形显示器上，窗口边缘的微小箭头图像表示截断和延续的行数(
@pxref{Fringes})。在文本终端上，窗口最右边一列的@samp{$}表示截断；最右边
一列的@samp{\}表示绕行。(显示表可以指定替代字符来使用；
@pxref{Display Tables})。

@defopt truncate-lines
如果这个缓冲区本地变量是非@code{nil}，那么超出窗口右边缘的行将被截断；否则
，它们将被继续。作为一个特殊的例外，@code{truncat-partial-width-windows}
变量优先于@dfn{partial-width}窗口（即不占用整个窗帧宽度的窗口）。
@end defopt

@defopt truncate-partial-width-windows
@cindex partial-width windows
这个变量控制@dfn{partial-width}窗口的截行。局部宽度窗口是指不占用整个窗帧
宽度的窗口(@pxref{Splitting Windows})。如果值是@code{nil}，则截断行数由
@code{truncat-lines}变量决定。(见上文)。如果值是一个整数@var{n}，如果部分
宽度窗口的列数少于@var{n}，则无论@code{truncat-lines}的值如何，都会对行进
行截断；如果部分宽度窗口有@var{n}或更多的列数，则行的截断由
@code{truncat-lines}决定。对于其他任何非@code{nil}的值，无论
@code{truncat-lines}的值是多少，每个局部宽度窗口的行都会被截断。
@end defopt

  当在窗口中使用水平滚动（@pxref{Horizontal Scrolling}）时，会强制截断。

@defvar wrap-prefix
如果这个缓冲区本地变量是非@code{nil}，它就会定义一个@dfn{wrap prefix}，
Emacs会在每一个延续行的开头显示这个变量。(如果行被截断，则不会使用
@code{wrap-prefix}。)它的值可以是一个字符串或图像 (
@pxref{Other Display Specs})，或者是一段空白空间，如@code{:width}或
@code{:align-to}显示属性(@pxref{Specified Space})所指定的。该值的解释方
式与@code{display}文本属性相同。@xref{Display Property}。

也可以使用@code{wrap-prefix}文本或覆盖属性，为文本区域指定一个包覆前缀。
这优先于@code{wrap-prefix}变量。@xref{Special Properties}。
@end defvar

@defvar line-prefix
如果这个缓冲区本地变量是非@code{nil}，它定义了一个
@dfn{line prefix}，Emacs会在每一个非延续行开头显示。它的值可以是字符串
或图像(@pxref{Other Display Specs})，也可以是一段空白，如@code{:width}
或@code{:align-to}显示属性(@pxref{Specified Space})所指定。该值的解释
方式与@code{display}文本属性相同。@xref{Display Property}。
也可以使用@code{line-prefix}文本或覆盖属性为文本区域指定行前缀。这优先于
在@code{line-prefix}变量。@xref{Special Properties}。
@end defvar

@ignore
  如果您的缓冲区只包含很短的行，您可能会发现最好将@code{cache-long-scans}
设置为@code{nil}。

@defvar cache-long-scans
如果该变量是非@code{nil}(默认)，则各种缩进和运动功能，以及Emacs重新显示，
都会缓存扫描缓冲区的结果，并查阅缓存，以避免重新扫描缓冲区的区域，除非它们
被修改。

关闭缓存会在一定程度上加快短行的处理速度。

这个变量在每个缓冲区中都是自动的缓冲区局部。
@end defvar
@end ignore

@node 回音区
@section The Echo Area
@cindex error display
@cindex echo area

@c FIXME: 为什么不直接用@xref{Minibuffers}?  --xfq
  @dfn{echo area}用于显示错误信息(@pxref{Errors})，用于显示用
@code{message}基元编写的信息，以及用于回声击键。它与迷你缓冲区不同，尽管迷
你缓冲区（在激活时）与回声区在屏幕上的位置相同。 @xref{Minibuffer,, The Minibuffer, emacs, The GNU Emacs Manual}.

除了本节中提到的功能外，您还可以通过指定@code{t}作为输出流，将 Lisp
对象打印到回声区。@xref{Output Streams}。

@menu
* 显示信息::    在回音区明确显示文字。
* 进度::        告知用户长时间操作的进度。
* 记录信息::    回音区信息为用户记录。
* 回音区自定义:: 控制回音区。
@end menu

@node 显示信息
@subsection Displaying Messages in the Echo Area
@cindex display message in echo area

  本节介绍在回音区显示信息的标准功能。

@defun message format-string &rest arguments
这个函数在回声区显示一条信息。@var{format-string}是一个格式字符串，
@var{arguments}是参数对象它的格式规范，就像@code{format-message}函数 (
@pxref{Formatting Strings})一样。由此产生的格式化字符串会显示在回声区；如
果它包含@code{face}文本属性，则会以指定的字体显示(@pxref{Faces})。该字符
串也会被添加到@file{*Messages*}缓冲区中，但不包含文本属性（
@pxref{Logging Messages}）。

通常，格式中的重音和撇号会转化为匹配的弯引号，例如，
@t{"Missing `%s'"}可能会导致@t{"Missing ‘foo’"}。
@xref{Text Quoting Style}，了解如何影响或抑制该翻译。

在批处理模式下，消息会被打印到标准的错误流中，后面是一个新行。

当@code{inhibit-message}是非@code{nil}时，回音区不会显示任何消息，只会记
录到@samp{*Messages*}。

如果@var{format-string}为@code{nil}或空字符串，则@code{message}会清除回
音区；如果回音区已自动展开，这将使其恢复到正常大小。如果minibuffer处于活动
状态，则会立即将minibuffer的内容恢复到屏幕上。

@example
@group
(message "Reverting `%s'..." (buffer-name))
 @print{} Reverting ‘subr.el’...
@result{} "Reverting ‘subr.el’..."
@end group

@group
---------- Echo Area ----------
Reverting ‘subr.el’...
---------- Echo Area ----------
@end group
@end example

要在回声区或弹出式缓冲区中按照大小自动显示信息，请使用
@code{display-message-or-buffer}（见下文）。

@strong{Warning:}如果您想使用您自己的字符串作为消息，请使用
@code{display-messag-or-buffer}（见下文）。逐字逐句，不要只写
@code{(message @var{string})}。如果@var{string}包含@samp{%}, @samp{`},
或@samp{'},则可能是重新格式化，结果不理想。相反，使用
@code{(message "%s" @var{string})}。
@end defun

@defvar set-message-function
如果这个变量是非@code{nil}，那么它应该是一个参数的函数，即在回音区显示的信
息文本。这个函数将被@code{message}和相关函数调用。如果函数返回@code{nil}
，则消息会像往常一样显示在回音区。如果该函数返回一个字符串，则该字符串将代
替原来的字符串显示在回音区。如果这个函数返回其他非@code{nil}的值，意味着消
息已经被处理了，所以@code{message}不会在回音区显示任何内容。也请参见
@code{clear-messag-function}，它可以用来清除该函数所显示的消息。

默认值是当minibuffer处于活动状态时，在minibuffer末端显示消息的函数。但是
，如果活动的迷你缓冲区中显示的文本在某个字符上具有
@code{minibuffer-message}文本属性(
@pxref{Special Properties})，则消息将显示在具有该属性的第一个字符之前。
@end defvar

@defvar clear-message-function
如果这个变量是非@code{nil}，那么当@code{message}和相关函数的参数信息为
@code{nil}或空字符串时，就会调用这个没有参数的函数。

通常这个函数在显示回音区消息后的下一个输入事件到来时被调用。该函数将清除由
@code{set-messag-function}指定的对应函数所显示的消息。

默认值是清除活动迷你缓冲区中显示的消息的函数。
@end defvar

@defvar inhibit-message
当这个变量是非@code{nil}时，@code{message}和相关函数将不会使用回音区来显
示消息。
@end defvar

@defmac with-temp-message message &rest body
在执行@var{body}的过程中，这个构造暂时在回声区显示一条消息。它显示
@var{message}，执行@var{body}，然后返回最后一个body表单的值，同时恢复之前
的回音区内容。
@end defmac

@defun message-or-box format-string &rest arguments
这个函数像@code{message}一样显示一条消息，但可能会在对话框中显示，而不是在
回音区显示。如果这个函数在使用鼠标调用的命令中被调用---更准确地说，如果
@code{last-nonmenu-event}(@pxref{Command Loop Info})是@code{nil}或列表
---使用对话框或弹出菜单来显示消息。否则它使用回声区。(这与@code{y-or-n-p}
用于做出类似决定的标准相同；参见@ref{Yes-or-No Queries})。

您可以通过在调用附近将@code{last-nonmenu-event}绑定一个合适的值来强制使用
鼠标或回声区。
@end defun

@defun message-box format-string &rest arguments
@anchor{message-box}
这个函数显示的消息与@code{message}类似，但只要可能，就使用对话框（或弹出式
菜单）。如果因为终端不支持对话框或弹出式菜单而无法使用，那么
@code{message-box}就可以使用回音区，比如@code{message}。
@end defun

@defun display-message-or-buffer message &optional buffer-name action frame
该函数显示消息@var{message}，它可以是一个字符串或缓冲区。如果它比
@code{max-mini-window-height}定义的回声区的最大高度要短，则使用
@code{message}在回声区显示。否则，使用@code{display-buffer}将其显示在弹出
的缓冲区中。

返回在回声区显示的字符串，或者当使用弹出式缓冲区时，返回用于显示该字符串的
窗口。

如果@var{message}是一个字符串，那么可选的参数@var{buffer-name}是用于显示
它的缓冲区的名称，当一个使用弹出式缓冲区，默认为@file{*Message*}。在
@var{message}是字符串并显示在回音区的情况下，都不指定是否将内容插入缓冲区
。

可选参数@var{action}和@var{frame}与@code{display-buffer}一样，仅在显示缓
冲区时使用。
@end defun

@defun current-message
该函数返回当前显示在回音区的信息，如果没有，则返回@code{nil}。
@end defun

@node 进度
@subsection Reporting Operation Progress
@cindex progress reporting

  当一个操作可能需要一段时间才能完成时，你应该告知用户它的进度。这样用户就
可以估计剩余的时间，并清楚地看到Emacs正在忙碌地工作，而不是挂起。一个方便
的方法是使用@dfn{progress reporter}。

  下面是一个没有任何用处的使用例子:

@smallexample
(let ((progress-reporter
       (make-progress-reporter "Collecting mana for Emacs..."
                               0  500)))
  (dotimes (k 500)
    (sit-for 0.01)
    (progress-reporter-update progress-reporter k))
  (progress-reporter-done progress-reporter))
@end smallexample

@defun make-progress-reporter message &optional min-value max-value current-value min-change min-time
这个函数创建并返回一个进度报告对象，你将使用它作为下面列出的其他函数的参数
。想法是尽可能多地预计算数据，使进度报告的速度非常快。

当随后使用这个进度报告器时，它将在回声区显示@var{message}，然后是进度百分
比。@var{message}被视为一个简单的字符串。如果您需要它依赖于一个文件名，例
如，在调用这个函数之前使用@code{format-message}。

参数@var{min-value}和@var{max-value}应该是代表操作的起始和最终状态的数字
。例如，一个扫描缓冲区的操作应该相应地设置为@code{point-min}和
@code{point-max}的结果。@var{max-value}应该大于@var{min-value}。

或者，您可以将@var{min-value}和@var{max-value}设置为@code{nil}。在这种情
况下，进度报告器不会报告进程百分比，而是在每次更新进度报告器时显示一个"旋转
器"，这个旋转器会旋转一个缺口。

如果@var{min-value}和@var{max-value}是数字，可以给参数
@var{current-value}一个数值，指定初始进度；如果省略，默认为
@var{min-value}。

其余参数控制回音区的更新速度。进度报告器将至少等待@var{min-change}更多百分
比的操作完成后才打印下一条信息，默认为1%。@var{min-time}指定了连续打印之间
的最小时间（以秒为单位），默认为0.2秒。在某些操作系统上，进度报告器可能会以
不同的精度来处理秒的分数）。

这个函数调用@code{progress-reporter-update}，所以第一条消息会立即打印出来
。
@end defun

@defun progress-reporter-update reporter &optional value suffix
这个函数主要负责报告操作的进度。它显示@var{reporter}的消息，然后是由
@var{value}确定的进度百分比。如果百分比为零，或者根据@var{min-change}和
@var{min-time}参数足够接近，那么它将从输出中省略。

@var{reporter}必须是调用@code{make-progress-reporter}的结果。@var{value}
指定了您的操作的当前状态，并且必须介于传递给@code{make-progress-reporter}
的@var{min-value}和@var{max-value}之间（含）。例如，如果您扫描了一个缓冲
区，那么@var{value}应该是调用@code{point}的结果。

可选参数@var{suffix}是一个字符串，用于显示在@var{reporter}的主信息和进度
文本之后。如果@var{reporter}是一个非数字报告器，那么@var{value}应该是
@code{nil}，或者是一个字符串来代替@var{suffix}。

这个函数关心会查看传递给@code{make-progress-reporter}的@var{min-change}
和@var{min-time}，因此不会在每次调用时输出新的消息。因此，它的速度非常快，
通常情况下，您不应该试图减少对它的调用次数：由此产生的开销很可能会抵消您的
努力。
@end defun

@defun progress-reporter-force-update reporter &optional value new-message suffix
这个函数类似于@code{progress-reporter-update}，只是它无条件地在echo区域打
印一条消息。

@var{reporter},@var{value},和@var{suffix}与
@code{progress-reporter-update}的含义相同。可选的@var{new-message}允许您
更改@var{reporter}的消息。因为这个函数总是更新回声区，所以这样的改变会立即
呈现给用户。
@end defun

@defun progress-reporter-done reporter
这个函数应该在操作完成后被调用。它在回声区打印@var{reporter}的信息，后面跟
着@samp{done}字样。

您应该始终调用这个函数，而不是希望@code{progress-reporter-update}打印
@samp{100%}。首先，它可能永远也不会打印出来，有很多充分的理由让它不发生。
其次，@samp{done}更明确。
@end defun

@defmac dotimes-with-progress-reporter (var count [result]) reporter-or-message body@dots{}
这是一个方便的宏，它的工作方式与@code{dotimes}的工作方式相同，但也使用上面
描述的函数报告循环进度。它允许您节省一些打字工作。参数
@var{reporter-or-message}可以是一个字符串或一个进度报告对象。

你可以使用这个宏重写本小节开头的例子，如下所示：
@example
@group
(dotimes-with-progress-reporter
    (k 500)
    "Collecting some mana for Emacs..."
  (sit-for 0.01))
@end group
@end example

如果您想在@var{make-progress-reporter}中指定可选的参数，那么使用报告器对
象作为@var{reporter-or-message}参数是很有用的。例如，你可以把前面的例子写
成如下：

@example
@group
(dotimes-with-progress-reporter
    (k 500)
    (make-progress-reporter "Collecting some mana for Emacs..." 0 500 0 1 1.5)
  (sit-for 0.01))
@end group
@end example
@end defmac

@defmac dolist-with-progress-reporter (var count [result]) reporter-or-message body@dots{}
这是另一个方便的宏，它的工作方式与@code{dolist}相同，但也使用上面描述的函
数报告循环进度。和@code{dotimes-with-progress-reporter}一样，
@code{reporter-or-message}可以是一个进度报告，也可以是一个字符串。你可以
用这个宏重写前面的例子，如下:

@example
@group
(dolist-with-progress-reporter
    (k (number-sequence 0 500))
    "Collecting some mana for Emacs..."
  (sit-for 0.01))
@end group
@end example
@end defmac

@node 记录信息
@subsection Logging Messages in @file{*Messages*}
@cindex logging echo-area messages

  几乎所有显示在回音区的消息都被记录在@file{*Messages*}缓冲区中，以便用户
可以回溯这些消息。这包括所有用@code{message}输出的消息。默认情况下，这个缓
冲区是只读的，并使用主要模式@code{messages-buffer-mode}。没有什么可以阻止
用户杀死@file{*Messages*}缓冲区，但下一次显示消息时会重新创建它。任何需要
直接访问@file{*Messages*}缓冲区的Lisp代码，并希望确保它的存在，应该使用函
数@code{messages-buffer}。

@defun messages-buffer
该函数返回@file{*Messages*}缓冲区。如果它不存在，则创建它，并将其切换到
@code{messages-buffer-mode}。
@end defun

@defopt message-log-max
这个变量用于指定在@file{*Messages*}缓冲区中保留多少行。值@code{t}表示对保
留的行数没有限制。值@code{nil}表示完全禁用消息记录。下面是如何显示消息并防
止其被记录的方法：

@example
(let (message-log-max)
  (message @dots{}))
@end example
@end defopt

  为了让用户更方便地使用@file{*Messages*}，日志记录功能将连续的相同消息合
并起来。此外，它还将连续的相关消息结合起来，以便于两种情况：先问后答和一系
列的进度消息。

  一个问题和之后一个答案有两条消息，就像@code{y-or-n-p}产生的消息一样：第
一条是@samp{@var{question}}，第二条是
@samp{@var{question}...@var{answer}}。第一条消息没有传递除第二条消息以外
的额外信息，所以记录第二条消息时，会将第一条消息从日志中删除。

一系列的进度消息有连续的消息，就像@code{make-progress-reporter}产生的消息
一样。它们的形式是@samp{@var{base}...@var{how-far}}，其中@var{base}每一
个时间都是一样的，而@var{how-far}则不同。只要是连续的消息，就会丢弃前一条
消息。

函数@code{make-progress-reporter}和@code{y-or-n-p}不需要做任何特别的事情
就可以激活消息日志组合功能。只要有两个连续的消息被记录下来，并且共享一个以
@samp{...} 结尾的共同前缀，它就会发挥作用。

@node 回音区自定义
@subsection Echo Area Customization
@cindex echo area customization

  这些变量控制了回音区工作的细节。

@defvar cursor-in-echo-area
这个变量控制了在回音区显示消息时光标的位置，如果它是非@code{nil}，那么光标
就会出现在消息的最后。如果它是非@code{nil}，那么光标就会出现在消息的最后。
否则，光标就会出现在点上------根本不在回音区。

该值通常是@code{nil}；Lisp程序在短时间内将其绑定到@code{t}。
@end defvar

@defvar echo-area-clear-hook
每当回声区被清除时，这个正常的钩子就会被运行--无论是通过
@code{(message nil)}还是任何其他原因。
@end defvar

@defopt echo-keystrokes
这个变量决定了命令字符回声前应该经过多少时间。它的值必须是一个数字，并指定
在回声之前要等待的秒数。如果用户输入了一个前缀键（如@kbd{C-x}），然后在继
续之前延迟了这么多秒，那么前缀键就会在回声区域中回声。（一旦在一个键序中开
始回声，同一键序中的所有后续字符都会立即回声）。

如果该值为零，则命令输入不被回声。
@end defopt

@defvar message-truncate-lines
通常情况下，显示一条长消息时，会调整回音区的大小以显示整条消息。但如果变量
@code{message-truncat-lines}是非@code{nil}，则回音区不会调整大小，而是将
消息截断以适应它。
@end defvar

  变量@code{max-mini-window-height}，指定了调整minibuffer窗口大小的最大
高度，也适用于回音区（其实就是minibuffer窗口的一种特殊用途；
@pxref{Minibuffer Windows}）。

@node 警告
@section Reporting Warnings
@cindex warnings

  @dfn{Warnings}是程序通知用户可能出现的问题，但继续运行的设施。

@menu
* 警告基础::     警告的概念和报告它们的功能。
* 警告变量::     程序绑定的变量，用于自定义警告。
* 警告选项::     用户设置变量来控制警告的显示。
* 延迟警告::     将警告延迟到命令结束。
@end menu

@node 警告基础
@subsection Warning Basics
@cindex severity level

  每一个警告都有一个文本信息，为用户解释问题，还有一个
@dfn{severity level}，这是一个符号。下面是可能的严重性级别，按严重性递减的
顺序排列，以及它们的含义：

@table @code
@item :emergency
如果不及时处理，很快就会严重影响Emacs的运行。
@item :error
报告的数据或情况本身就是错误的。
@item :warning
报告的数据或情况本身没有问题，但会引起对可能问题的怀疑。
@item :debug
如果你在调试时，可能有用的信息报告。
@end table

  当你的程序遇到无效的输入数据时，它可以通过调用@code{error}或
@code{signal}来发出Lisp错误信号，或者报告一个严重程度为@code{:error}的警
告。发出Lisp错误信号是最简单的事情，但这意味着程序不能继续处理。如果你想费
尽心思地实现一种在数据不好的情况下仍能继续处理的方法，那么报告一个严重程度
为@code{:error}的警告是告知用户问题的正确方法。例如，Emacs
Lisp字节编译器就可以这样报告错误，并继续编译其他函数。(如果程序发出Lisp错
误信号，然后用@code{condition-case}处理，用户不会看到错误信息，它可以通过
报告为警告的方式向用户显示该信息。)

@c FIXME：为什么用"(bytecomp)"而不是"'bytecomp'"，或者干脆在这里用
@c "bytecomp"？括号是警告型格式的一部分，但是不属于警告类型。--xfq
@cindex warning type
  每个警告都有一个@dfn{warning type}来对其进行分类。这个类型是一个符号列
表。第一个符号应该是你用于程序用户选项的自定义组。例如，字节编译器警告使用
警告类型@code{(bytecomp)}。如果你愿意，你也可以通过在列表中使用更多的符号
对警告进行子分类。

@defun display-warning type message &optional level buffer-name
这个函数报告一个警告，使用@var{message}作为消息，@var{type}作为警告类型。
@var{level}为严重程度，默认为@code{:warning}。

@var{buffer-name}，如果非@code{nil}，则指定用于记录警告的缓冲区的名称。默
认情况下，是@file{*Warnings*}。
@end defun

@defun lwarn type level message &rest args
这个函数使用@code{(format-message @var{message} @var{args}...)}的值作为
@file{*Warnings*}缓冲区中的消息来报告一个警告。在其他方面，它相当于
@code{display-warning}。
@end defun

@defun warn message &rest args
这个函数使用@code{(format-message @var{message} @var{args}...)}的值作为
消息，@code{(emacs)}作为类型，@code{:warning}作为严重程度来报告一个警告。
它的存在只是为了兼容性，我们建议不要使用它，因为你应该指定一个特定的警告类
型。
@end defun

@node 警告变量
@subsection Warning Variables
@cindex warning variables

  程序可以通过绑定本节中描述的变量来自定义警告的显示方式。

@defvar warning-levels
该列表定义了警告严重程度级别的含义和严重程度顺序。每个元素定义一个严重程度
级别，它们按严重程度递减的顺序排列。

每个元素的形式为@code{(@var{level} @var{string} @var{function})}，其中
@var{level}是它所定义的严重程度级别。@var{string}指定了这个级别的文字描述
。@var{string}应该使用@samp{%s}来指定将警告类型的信息放在哪里，也可以省略
@samp{%s}，这样就不会包含这些信息。

可选的@var{function}，如果是非@code{nil}，则是调用一个没有参数的函数，以
引起用户的注意。

通常情况下，你不应该改变这个变量的值。
@end defvar

@defvar warning-prefix-function
如果非@code{nil}，则该值是一个用于生成警告前缀文本的函数。程序可以将该变量
绑定到一个合适的函数上。@code{display-warning}在当前警告缓冲区的情况下调
用这个函数，该函数可以在其中插入文本。该文本成为警告信息的开头。

调用该函数时有两个参数，即严重程度和它在@code{warning-levels}中的条目。它
应该返回一个列表作为条目（这个值不需要是@code{warning-levels}的实际成员）
。通过构造这个值，函数可以改变警告的严重性，或者为给定的严重性级别指定不同
的处理方式。

如果变量的值是@code{nil}，那么就没有函数可以调用。
@end defvar

@defvar warning-series
程序可以将这个变量绑定到@code{t}上，表示下一个警告应该开始一个系列。当几个
警告形成一个系列时，这意味着要把点留在系列的第一个警告上，而不是为每个警告
不断移动它，使它出现在最后一个警告上。当本地绑定被解除时，系列结束，
@code{warning-series}又变成@code{nil}。

这个值也可以是一个带有函数定义的符号。这等同于@code{t}，只是下一个警告也会
调用这个没有参数的函数，并且警告缓冲区是当前的。该函数可以插入文本，作为一
系列警告的标题。

一旦一个系列开始，该值就是一个标记，它指向系列开始的警告缓冲区中的缓冲位置
。

该变量的正常值为@code{nil}，即分别处理每个警告。
@end defvar

@defvar warning-fill-prefix
当这个变量是非@code{nil}时，它指定了一个填充前缀，用于填充每个警告的文本。
@end defvar

@defvar warning-fill-column
填充警告的列。
@end defvar

@defvar warning-type-format
这个变量指定了在警告信息中显示警告类型的格式。在@code{warning-levels}中的
字符串的控制下，这样格式化类型的结果会被包含在消息中。默认值是
@code{" (%s)"}。如果您将其绑定为 @code{""}，那么警告类型将完全不会出现。
@end defvar

@node 警告选项
@subsection Warning Options
@cindex warning options

  这些变量被用户用来控制当一个Lisp程序报告一个警告时发生的事情。

@defopt warning-minimum-level
这个用户选项指定了应该立即显示给用户的最小严重程度。默认值是
@code{:warning}，这意味着除了@code{:debug}警告之外，要立即显示所有警告。
@end defopt

@defopt warning-minimum-log-level
这个用户选项指定了在警告缓冲区中记录的最小严重程度。默认值是
@code{:warning}，这意味着除了@code{:debug}之外的所有警告都会被记录。
@end defopt

@defopt warning-suppress-types
这个列表指定了哪些警告类型不应该立即为用户显示。列表中的每个元素应该是一个
符号列表。如果它的元素与警告类型中的第一个元素相匹配，那么该警告就不会立即
显示。
@end defopt

@defopt warning-suppress-log-types
这个列表指定了哪些警告类型不应该被记录在警告缓冲区中。列表中的每个元素应该
是一个符号列表。如果它与警告类型中的前几个元素相匹配，那么该警告就不会被记
录。
@end defopt

@node 延迟警告
@subsection Delayed Warnings
@cindex delayed warnings

有时，您可能希望避免在命令运行时显示警告，而只在命令结束后才显示。您可以使
用函数@code{delay-warning}来实现这一点。

@defun delay-warning type message &optional level buffer-name
这个函数是@code{display-warning}的延迟对应函数。(
@pxref{Warning Basics})，并以相同的参数调用它。警告信息被排入
@code{delayed-warnings-list}。
@end defun

@defvar delayed-warnings-list
这个变量的值是当前命令结束后要显示的警告列表。每个元素必须是一个列表

@smallexample
(@var{type} @var{message} [@var{level} [@var{buffer-name}]])
@end smallexample

@noindent
与@code{display-warning}的参数列表具有相同的形式和含义。在运行
@code{post-command-hook}(@pxref{Command Overview})后，Emacs命令循环会
立即显示该变量指定的所有警告，然后将其重置为@code{nil}。
@end defvar

  需要进一步定制延迟警告机制的程序可以更改@code{delayed-warnings-hook}变
量：

@defvar delayed-warnings-hook
这是一个普通的钩子，由Emacs命令循环在@code{post-command-hook}之后运行，以
便处理和显示延迟的警告。

其默认值是两个函数的列表：

@smallexample
(collapse-delayed-warnings display-delayed-warnings)
@end smallexample

@findex collapse-delayed-warnings
@findex display-delayed-warnings
@noindent
函数@code{collapse-delayed-warnings}删除@code{delayed-warnings-list}中
的重复条目。函数@code{display-delayed-warnings}依次调用
@code{display-warning}在@code{delayed-warnings-list}中的每个条目，然后将
@code{delayed-warnings-list}设置为@code{nil}。
@end defvar

@node 隐形文本
@section Invisible Text

@cindex invisible text
您可以使用@code{invisible}属性使@dfn{invisible}字符不出现在屏幕上。这可以
是一个文本属性(@pxref{Text Properties})或覆盖属性(@pxref{Overlays})。光
标运动也会部分忽略这些字符，如果命令循环在命令后发现点在不可见文本的范围内
，就会将点重新定位到文本的另一侧。

在最简单的情况下，任何非@code{nil}。@code{invisible}属性使一个字符不可见
。这是默认的情况--如果你不改变@code{buffer-invisibility-spec}的默认值，这
就是@code{invisible}属性的工作方式。如果你不打算自己设置
@code{buffer-invisibility-spec}，通常应该使用@code{t}作为
@code{invisible}属性的值。

更一般地说，您可以使用@code{buffer-invisibility-spec}变量来控制
@code{invisible}属性的哪些值使文本不可见。这允许您预先将文本分为不同的子集
，赋予它们不同的@code{invisible}值，然后通过改变
@code{buffer-invisibility-spec}的值使不同的子集可见或不可见。

用@code{buffer-invisibility-spec}控制可见性在显示数据库中的条目列表的程序
中特别有用。它允许实现方便的过滤命令，只查看数据库中的一部分条目。设置这个
变量的速度非常快，比扫描缓冲区中的所有文本寻找要改变的属性要快得多。

@defvar buffer-invisibility-spec
这个变量指定了哪些@code{invisible}属性会让一个字符不可见。设置这个变量可以
使其成为缓冲区的局部属性。

@table @asis
@item @code{t}
如果一个字符的@code{invisible}属性是非@code{nil}，则该字符是不可见的。这是
默认的。

@item a list
列表中的每个元素都指定了一个隐形功能的标准；如果一个角色的@code{invisible}
属性符合其中任何一个标准，那么这个角色就是隐形的。列表可以有两种元素：

@table @code
@item @var{atom}
如果一个字符的@code{invisible}属性值是@var{atom}，或者它是一个以
@var{atom}为成员的列表，那么这个字符是不可见的；用@code{eq}进行比较。

@item (@var{atom} . t)
如果一个字符的 @code{invisible} 属性值是 @var{atom}，或者它是一个以
@var{atom}为成员的列表，那么这个字符是不可见的；比较是通过@code{eq}来完成
的。此外，这样的字符序列会显示为省略号。
@end table
@end table
@end defvar

  我们特别提供了两个函数，用于向@code{buffer-invisibility-spec}中添加元素
和从其中移除元素。

@defun add-to-invisibility-spec element
这个函数将@var{element}元素添加到@code{buffer-invisibility-spec}中。如果
@code{buffer-invisibility-spec}是@code{t}，那么它就会变成一个列表，
@code{(t)}，这样@code{invisible}属性为@code{t}的文本就会保持不可见。
@end defun

@defun remove-from-invisibility-spec element
从@code{buffer-invisibility-spec}中删除@var{element}元素。如果
@var{element}不在列表中，则不做任何操作。
@end defun

  使用@code{buffer-invisibility-spec}的惯例是，主要模式应该使用模式本身的
名称作为@code{buffer-invisibility-spec}的元素，并作为@code{invisible}属
性的值：

@example
;; @r{If you want to display an ellipsis:}
(add-to-invisibility-spec '(my-symbol . t))
;; @r{If you don't want ellipsis:}
(add-to-invisibility-spec 'my-symbol)

(overlay-put (make-overlay beginning end)
             'invisible 'my-symbol)

;; @r{When done with the invisibility:}
(remove-from-invisibility-spec '(my-symbol . t))
;; @r{Or respectively:}
(remove-from-invisibility-spec 'my-symbol)
@end example

  您可以使用以下功能检查隐身性：

@defun invisible-p pos-or-prop
如果@var{pos-or-prop}是一个标记或数字，如果该位置的文本当前是不可见的，则
该函数返回一个非@code{nil}值。

如果@var{pos-or-prop}是任何其他类型的Lisp对象，则表示@code{invisible}文本
或覆盖属性的可能值。在这种情况下，如果这个值会导致文本不可见，那么这个函数
将根据@code{buffer-invisibility-spec}的当前值返回一个非@code{nil}值。

如果文字在显示时被完全隐藏，则该函数的返回值为@code{t}，如果文字被省略号代
替，则返回非@code{nil}、非@code{t}值。
@end defun

@vindex line-move-ignore-invisible
  通常情况下，对文本或移动点进行操作的函数并不关心文本是否隐形，它们对隐形
字符和可见字符都进行处理。用户级的移行命令，如@code{next-line}、
@code{previous-line}，如果@code{line-move-ignore-invisible}是非
@code{nil}，则会忽略不可见的新行。(默认值)，也就是说，就像这些不可见的新行
在缓冲区中并不存在一样，只是因为它们被明确地编程为这样做。

  如果一个命令的结尾点在不可见文本的内部或边界处，主编辑循环会将点重新定位
到不可见文本的两端之一。Emacs会选择重定位的方向，使其与命令的整体移动方向
相同；如果有疑问，它更倾向于选择插入的字符不会继承@code{invisible}属性的位
置。此外，如果文本没有被省略号代替，而命令只是在不可见的文本中移动，那么点
会被多移动一个字符，以便尝试通过光标的可见移动来反映命令的移动。

  因此，如果命令将点移动到一个不可见的范围（具有通常的粘性），Emacs将点移
动到该范围的开始。如果命令将点向前移动到一个不可见的范围，Emacs将点向前移
动到不可见文本后面的第一个可见字符，然后再向前移动一个字符。

  通过将@code{disable-point-adjustment}设置为非@code{nil}值，可以禁用这
些最终在隐形文本中间的点的@dfn{adjustments}。@xref{Adjusting Point}。

  增量搜索可以使不可见的覆盖层在匹配中包含不可见文本时暂时和/或永久可见。要
启用这个功能，覆盖层应该有一个非@code{nil}的
@code{isearch-open-invisible}属性。属性值应该是一个以覆盖层为参数调用的函
数。这个函数应该使覆盖层永久可见；当匹配在退出搜索时与覆盖层重叠时，就会使
用这个函数。

  在搜索过程中，通过临时修改这些覆盖层的不可见和无形属性，使其暂时可见。如
果你想对某个覆盖层进行不同的操作，可以给它一个
@code{isearch-open-invisible-temporary}属性，它是一个函数。调用该函数时
有两个参数：第一个是覆盖层，第二个是@code{nil}使覆盖层可见，或者@code{t}使
其再次不可见。

@node 选择性显示
@section Selective Display
@c @cindex selective display   Duplicates selective-display

  @dfn{选择性显示}指的是一对相关功能，用于隐藏屏幕上的某些行。

@cindex explicit selective display
  第一个变体，显式选择性显示，是为在Lisp程序中使用而设计的：它通过改变文本
来控制哪些行被隐藏。这种隐藏方式现在已经过时并被废弃了；相反，你应该使用
@code{invisible} 属性 (@pxref{Invisible Text}) 来获得同样的效果。

  在第二个变体中，根据缩进情况自动选择要隐藏的行。这种变体设计为用户级功能
。

  控制显式选择性显示的方法是用回车（control-m）代替换行（control-j）。原本
是一行的文本在换行符之后就被隐藏了。严格地说，它暂时不是一行，因为只有换行
符才能分隔行，它现在是前一行的一部分。

  选择性显示不直接影响编辑命令。例如，@kbd{C-f}。(@code{forward-char})毫
不犹豫地将点移动到隐藏文本中。然而，用回车字符代替换行字符会影响一些编辑命
令。例如，@code{next-line}会跳过隐藏的行，因为它只搜索换行符。使用选择性显
示的模式也可以定义一些考虑到换行符的命令，或者控制文本的哪些部分被隐藏。

  当你把一个有选择地显示的缓冲区写入文件时，所有的control-m都以换行符的形
式输出。这意味着当你下一次读入文件时，它看起来是OK的，没有任何隐藏。选择性
显示效果只有在Emacs中才能看到。

@defvar selective-display
这个缓冲区局部变量可以实现选择性显示。这意味着行或行的一部分可以被隐藏。

@itemize @bullet
@item
如果@code{selective-display}的值是@code{t}，那么字符control-m标志着隐藏
文本的开始；control-m以及它后面的其余行都不显示。这就是显式选择性显示。

@item
如果@code{selective-display}的值是一个正整数，则不显示以多于该列缩进开始
的行。
@end itemize

当缓冲区的某些部分被隐藏时，垂直移动命令的操作就像该部分不存在一样，允许一
个@code{next-line}命令跳过任何数量的隐藏行。然而，字符移动命令（如
@code{forward-char}）并不跳过隐藏部分，而且可以在隐藏部分中插入或删除文本
（尽管很取巧）。

在下面的示例中，我们展示了缓冲区@code{foo}的@emph{显示外观}，它随着
@code{selective-display}的值而改变。缓冲区的@emph{内容}不会改变。

@example
@group
(setq selective-display nil)
     @result{} nil

---------- Buffer: foo ----------
1 on this column
 2on this column
  3n this column
  3n this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group

@group
(setq selective-display 2)
     @result{} 2

---------- Buffer: foo ----------
1 on this column
 2on this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example
@end defvar

@defopt selective-display-ellipses
如果这个缓冲区本地变量是非@code{nil}，那么Emacs会在行末的隐藏文本后面显示
出@samp{@dots{}}。这个例子是上一个例子的延续。

@example
@group
(setq selective-display-ellipses t)
     @result{} t

---------- Buffer: foo ----------
1 on this column
 2on this column ...
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example

您可以使用一个显示表格来代替省略号的其他文本（@samp{@dots{}}）。
@xref{Display Tables}。
@end defopt

@node 临时显示
@section Temporary Displays
@cindex temporary display
@cindex temporary buffer display

  临时显示被Lisp程序用来将输出放入缓冲区，然后呈现给用户浏览而不是编辑。许
多帮助命令都使用了这个功能。

@defmac with-output-to-temp-buffer buffer-name body@dots{}
这个函数执行@var{body}中的窗体，同时安排将它们打印的任何输出插入到名为
@var{buffer-name}的缓冲区中，必要时首先创建该缓冲区，并将其放入Help模式。
(参见下面类似的窗体@code{with-temp-buffer-window})最后，在某个窗口中显示
缓冲区，但该窗口没有被选中。(参见下面类似的窗体
@code{with-temp-buffer-window}。)最后，缓冲区会显示在某个窗口中，但该窗口
不被选中。

如果@var{body}中的表单没有改变输出缓冲区的主要模式，使其在执行结束时仍然是
Help模式，那么@code{with-output-to-temp-buffer}就会使这个缓冲区在最后变成
只读模式，并且还会扫描其中的函数和变量名，使其成为可点击的交叉引用。
@xref{Docstring hyperlinks, , Tips for Documentation Strings}，特别是关
于文档字符串中的超链接这一项，了解更多细节。

字符串@var{buffer-name}指定临时缓冲区，它不需要已经存在。参数必须是一个字
符串，而不是一个缓冲区。缓冲区最初会被擦除（不问任何问题），在
@code{with-output-to-temp-buffer}退出后，它被标记为未修改。

@code{with-output-to-temp-buffer}将@code{standard-output}绑定到临时缓冲
区，然后它运行@var{body}中的表单。使用@var{body}中的Lisp输出函数的输出，
默认会进入该缓冲区(但屏幕显示和回声区中的信息，尽管它们在一般意义上是"输出"
，但不受影响)。@xref{Output Functions}.

有几个钩子可用于自定义该构造的行为；它们被列在下面。

@var{body}中最后一个表单的值会返回。

@example
@group
---------- Buffer: foo ----------
 This is the contents of foo.
---------- Buffer: foo ----------
@end group

@group
(with-output-to-temp-buffer "foo"
    (print 20)
    (print standard-output))
@result{} #<buffer foo>

---------- Buffer: foo ----------

20

#<buffer foo>

---------- Buffer: foo ----------
@end group
@end example
@end defmac

@defopt temp-buffer-show-function
如果这个变量是非@code{nil}，@code{with-output-to-temp-buffer}就会以函数
的形式调用它来完成显示帮助缓冲区的工作。该函数得到一个参数，即它应该显示的
缓冲区。

这个函数最好和@code{with-output-to-temp-buffer}正常情况一样，
@code{save-selected-window}和当前选择的窗口和缓冲区内部运行
@code{temp-buffer-show-hook}。
@end defopt

@defvar temp-buffer-setup-hook
这个正常的钩子是由@code{with-output-to-temp-buffer}在评估@var{body}之前
运行的。当这个钩子运行时，临时缓冲区是当前的。这个钩子通常与一个函数一起设
置，以使缓冲区进入帮助模式。
@end defvar

@defvar temp-buffer-show-hook
这个正常的钩子是由@code{with-output-to-temp-buffer}在显示临时缓冲区后运行
的。当该钩子运行时，临时缓冲区是当前的，并且它所显示的窗口被选中。
@end defvar

@defmac with-temp-buffer-window buffer-or-name action quit-function body@dots{}
这个宏类似于@code{with-output-to-temp-buffer}。和那个构造一样，它在执行
@var{body}的同时，安排将它打印的任何输出插入到名为@var{buffer-or-name}的
缓冲区中，并在某个窗口中显示该缓冲区。但与
@code{with-output-to-temp-buffer}不同的是，它不会自动将该缓冲区切换到Help
模式。

参数@var{buffer-or-name}指定了临时缓冲区。它可以是一个已经存在的缓冲区，也
可以是一个字符串，在这种情况下，如果需要的话，会创建一个同名的缓冲区。当
@code{with-temp-buffer-window}退出时，缓冲区被标记为未修改和只读。

这个宏没有调用@code{temp-buffer-show-function}，而是将@var{action}参数传
递给@code{display-buffer}。而是将@var{action}参数传递给
@code{display-buffer}。(@pxref{Choosing Window})，以便显示缓冲区。

除非指定了参数@var{quit-function}，否则将返回@var{body}中最后一个表单的值
。在这种情况下，调用它时有两个参数：显示缓冲区的窗口和@var{body}的结果。最
后的返回值就是@var{quit-function}所返回的值。

@vindex temp-buffer-window-setup-hook
@vindex temp-buffer-window-show-hook
这个宏使用普通的钩子@code{temp-buffer-window-setup-hook}和
@code{temp-buffer-window-show-hook}来代替
@code{with-output-to-temp-buffer}运行的类似钩子。
@end defmac

接下来描述的两个构造与@code{with-temp-buffer-window}大部分相同，但与它的
不同之处在于以下的规定:

@defmac with-current-buffer-window buffer-or-name action quit-function &rest body
这个宏和@code{with-temp-buffer-window}类似，但不同的是，它使
@var{buffer-or-name}指定的缓冲区成为运行@var{body}的当前缓冲区。
@end defmac

一个显示临时缓冲区的窗口，可以使用以下模式将该缓冲区的大小装入：

@defopt temp-buffer-resize-mode
启用该次要模式后，显示临时缓冲区的窗口会自动调整大小以适应缓冲区的内容。

如果且仅当一个窗口是为缓冲区专门创建的，那么它就会被调整大小。特别是，之前
显示过其他缓冲区的窗口不会被调整大小。默认情况下，该模式使用
@code{fit-window-to-buffer}(@pxref{Resizing Windows})来调整大小。您可以
通过自定义下面的@code{temp-buffer-max-height}和
@code{temp-buffer-max-width}选项来指定不同的函数。
@end defopt

@defopt temp-buffer-max-height
这个选项指定了当@code{temp-buffer-resize-mode}被启用时，窗口显示临时缓冲
区的最大高度（以行为单位）。它也可以作为一个函数被调用来选择这样一个缓冲区
的高度。它得到一个参数，即缓冲区，并且应该返回一个正整数。在调用该函数时，
需要调整大小的窗口被选中。
@end defopt

@defopt temp-buffer-max-width
这个选项指定了当@code{temp-buffer-resize-mode}被启用时，窗口显示临时缓冲
区的最大宽度（以列为单位）。它也可以作为一个函数被调用来选择缓冲区的宽度。
它得到一个参数，即缓冲区，并且应该返回一个正整数。在调用该函数时，需要调整
大小的窗口被选中。
@end defopt

以下功能使用当前缓冲区进行临时显示：

@defun momentary-string-display string position &optional char message
这个函数在当前缓冲区的@var{position}处暂时显示@var{string}。它对撤销列表
或缓冲区的修改状态没有影响。

在下一个输入事件发生之前，瞬时显示一直保持。如果下一个输入事件是@var{char}
，@code{momentary-string-display}会忽略它并返回。否则，该事件仍将被缓冲，
以便后续作为输入使用。因此，键入@var{char}将简单地从显示中移除字符串，而键
入 (比如)@kbd{C-f}将从显示中移除字符串，并在之后(大概)将点向前移动。参数
@var{char}默认是一个空格。

@code{momentary-string-display}的返回值是没有意义的。

如果字符串@var{string}不包含控制字符，您可以通过使用@code{before-string}
属性创建（然后随后删除）一个覆盖层，以更通用的方式完成同样的工作。
@xref{Overlay Properties}。

如果@var{message}是非@code{nil}，则显示在回音区，而@var{string}则显示在缓
冲区。如果是@code{nil}，则默认消息说要输入@var{char}来继续。

在这个例子中，点最初位于第二行的开头:

@example
@group
---------- Buffer: foo ----------
This is the contents of foo.
@point{}Second line.
---------- Buffer: foo ----------
@end group

@group
(momentary-string-display
  "**** Important Message! ****"
  (point) ?\r
  "Type RET when done reading")
@result{} t
@end group

@group
---------- Buffer: foo ----------
This is the contents of foo.
**** Important Message! ****Second line.
---------- Buffer: foo ----------

---------- Echo Area ----------
Type RET when done reading
---------- Echo Area ----------
@end group
@end example
@end defun

@node 叠加
@section Overlays
@cindex overlays
@c FIXME：在本节中提到间隔？

您可以使用@dfn{overlays}来改变一个缓冲区的文字在屏幕上的外观，以达到展示特
性的目的。叠加是一个属于特定缓冲区的对象，它有一个指定的开始和结束。它也有
你可以检查和设置的属性，这些属性会影响覆盖层中文本的显示。

@cindex scalability of overlays
@cindex overlays, scalability
叠加的视觉效果与对应的文本属性(@pxref{Text Properties})是一样的。然而，由
于实现方式不同，覆盖层通常不能很好地扩展（许多操作所需的时间与缓冲区中覆盖
层的数量成正比）。如果您需要影响缓冲区中许多部分的视觉外观，我们建议使用文
本属性。

叠加使用标记来记录它的开头和结尾，因此，编辑缓冲区的文本会调整每个叠加的开头和结尾，使其与文本保持一致。在创建叠加时，您可以指定在开头插入的文本应该在叠加内还是在叠加外，同样也可以指定叠加的结尾。

@menu
* 管理叠加::   创建和移动叠加。
* 叠加属性::   如何读取和设置属性。属性对屏幕显示的作用。
* 寻找叠加::   搜索叠加。
@end menu

@node 管理叠加
@subsection Managing Overlays
@cindex managing overlays
@cindex overlays, managing

  本节介绍了创建、删除、移动叠加以及检查叠加内容的功能。由于叠加不是缓冲区
内容的一部分，因此叠加的更改不会记录在缓冲区的撤销列表中。

@defun overlayp object
如果@var{object}是，则该函数返回@code{t}。
@end defun

@defun make-overlay start end &optional buffer front-advance rear-advance
此函数创建并返回一个属于@var{buffer}的覆盖层，覆盖范围从@var{start}到
@var{end}。@var{start}和@var{end}都必须指定缓冲区的位置，它们可以是整数或
标记。如果省略了@var{buffer}，则会在当前的缓冲区中创建覆盖层。

@cindex empty overlay
@cindex overlay, empty
一个覆盖层的@var{start}和@var{end}指定了相同的缓冲区位置，称为@dfn{empty}
。如果@var{start}和@var{end}之间的文本被删除，一个非空的覆盖层就会变成空的
。当这种情况发生时，默认情况下，覆盖层不会被删除，但您可以通过给它设置
@samp{evaporate}属性(@pxref{Overlay Properties, evaporate property})来
使它被删除。

参数@var{front-advance}和@var{rear-advance}分别指定了叠加开始和叠加结束
的标记插入类型@xref{Marker Insertion Types}。如果它们都是@code{nil}，也
就是默认值，那么覆盖层将扩展到包括任何在开头插入的文本，但不包括在结尾插入
的文本。如果@var{front-advance}是非@code{nil}，那么在叠加开始处插入的文本
将被排除在叠加之外。如果@var{rear-advance}是非@code{nil}，那么在覆载结束
时插入的文本将被包含在覆载中。
@end defun

@defun overlay-start overlay
此函数以整数形式返回@var{overlay}的起始位置。
@end defun

@defun overlay-end overlay
此函数以整数形式返回@var{overlay}结束的位置。
@end defun

@defun overlay-buffer overlay
此函数返回@var{overlay}所属的缓冲区，如果@var{overlay}已被删除，则返回
@code{nil}。
@end defun

@defun delete-overlay overlay
这个函数删除了@var{overlay}。覆盖层作为一个Lisp对象继续存在，它的属性列表
没有变化，但它不再附着在它所属的缓冲区上，也不再对显示有任何影响。

被删除的叠加不会被永久断开。你可以通过调用@code{move-overlay}来重新给它在
缓冲区中的位置。
@end defun

@defun move-overlay overlay start end &optional buffer
这个函数将@var{overlay}移动到@var{buffer}，并将其边界置于@var{start}和
@var{end}。参数@var{start}和@var{end}都必须指定缓冲区的位置，可以是整数，
也可以是标记。

如果省略了@var{buffer}，@var{overlay}会停留在它已经关联的那个缓冲区中；如
果删除了@var{overlay}，它就会进入当前的缓冲区。

返回值是@var{overlay}。

这是更改覆盖图端点的唯一有效方法。不要尝试手动修改叠加中的标记，因为这样做
无法更新其他重要的数据结构，并可能导致一些叠加丢失。
@end defun

@defun remove-overlays &optional start end name value
这个函数可以删除@var{start}和@var{end}之间所有属性@var{name}的值为
@var{value}的覆盖层。它可以移动区域内覆盖层的端点，或者分割它们。

如果省略@var{name}或者@code{nil}，表示删除指定区域的所有覆盖层。如果
@var{start}和/或@var{end}被省略或@code{nil}，表示分别删除缓冲区的开始和结
束。因此，@code{(remove-overlays)}删除了当前缓冲区中的所有覆盖。
@end defun

@defun copy-overlay overlay
此函数返回@var{overlay}的副本。这个副本的端点和属性与@var{overlay}相同。
但是，覆盖层开始和结束的标记插入类型被设置为默认值（
@pxref{Marker Insertion Types}）。
@end defun

  下面是一些例子：

@example
;; @r{Create an overlay.}
(setq foo (make-overlay 1 10))
     @result{} #<overlay from 1 to 10 in display.texi>
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 10
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{Give it a property we can check later.}
(overlay-put foo 'happy t)
     @result{} t
;; @r{Verify the property is present.}
(overlay-get foo 'happy)
     @result{} t
;; @r{Move the overlay.}
(move-overlay foo 5 20)
     @result{} #<overlay from 5 to 20 in display.texi>
(overlay-start foo)
     @result{} 5
(overlay-end foo)
     @result{} 20
;; @r{Delete the overlay.}
(delete-overlay foo)
     @result{} nil
;; @r{Verify it is deleted.}
foo
     @result{} #<overlay in no buffer>
;; @r{A deleted overlay has no position.}
(overlay-start foo)
     @result{} nil
(overlay-end foo)
     @result{} nil
(overlay-buffer foo)
     @result{} nil
;; @r{Undelete the overlay.}
(move-overlay foo 1 20)
     @result{} #<overlay from 1 to 20 in display.texi>
;; @r{Verify the results.}
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 20
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{Moving and deleting the overlay does not change its properties.}
(overlay-get foo 'happy)
     @result{} t
@end example

  Emacs将每个缓冲区的覆盖存储在两个列表中，围绕一个任意的中心位置进行划分
。一个列表从中心位置向后延伸，另一个列表从中心位置向前延伸。中心位置可以是
缓冲区的任何位置。

@defun overlay-recenter pos
这个函数将当前缓冲区中@var{pos}位置周围的覆盖层进行更新。这样一来，对于靠
近@var{pos}的位置，覆盖查找的速度会更快，但对于远离@var{pos}的位置，覆盖查
找的速度会更慢。
@end defun

  循环向前扫描缓冲区，创建叠加，如果先做
@code{(overlay-recenter (point-max))}，可以运行得更快。

@node 叠加属性
@subsection Overlay Properties
@cindex overlay properties

  覆盖属性和文本属性一样，改变字符显示方式的属性可以来自任何一个来源。但在
大多数方面，它们是不同的。@xref{Text Properties}，作为比较。

  文本属性被认为是文本的一部分；覆盖层及其属性被特别认为不是文本的一部分。
因此，在各种缓冲区和字符串之间复制文本会保留文本属性，但不会尝试保留覆盖层
。更改缓冲区的文本属性会标记该缓冲区被修改，而移动覆盖层或更改其属性则不会
。与文本属性的改变不同，覆盖层属性的改变不会记录在缓冲区的撤销列表中。

  由于多个覆盖层可以为同一个字符指定一个属性值，Emacs允许你为每个覆盖层指
定一个优先值。优先权值用来决定哪个重叠的覆盖层会"赢"。

  这些函数读取和设置覆盖层的属性:

@defun overlay-get overlay prop
这个函数返回@var{overlay}中记录的@var{prop}属性的值（如果有）。如果
@var{overlay}没有记录任何属性值，但是它有一个@code{category}属性，而这个
属性是一个符号，那么就使用这个符号的@var{prop}属性。否则，其值就是
@code{nil}。
@end defun

@defun overlay-put overlay prop value
此函数将记录在@var{overlay}中的@var{prop}属性值设置为@var{value}。返回
@var{value}。
@end defun

@defun overlay-properties overlay
返回@var{overlay}的属性列表的副本。
@end defun

  也请参见函数@code{get-char-property}，它可以检查给定字符的覆盖属性和文
本属性。@xref{Examining Properties}。

  许多叠加属性都有特殊的含义，下面是它们的表格：

@table @code
@item priority
@kindex priority @r{(overlay property)}
此属性的值决定了叠加的优先级。如果您想指定一个优先级值，请使用@code{nil}(
或零)，或一个正整数。任何其他的值都是未定义的行为。

当两个或两个以上的覆盖层覆盖同一个字符，并且都指定了相同的属性时，优先级就
很重要；@code{priority}值较大的那个覆盖层会覆盖另一个覆盖层。(对于
@code{face}属性，优先级较高的覆盖层的值并不完全覆盖另一个值；相反，它的字
体属性覆盖优先级较低的@code{face}属性的字体属性。)如果两个覆盖层具有相同的
优先级值，并且一个覆盖层嵌套在另一个覆盖层中，那么内部的覆盖层将优先于外部
的覆盖层。如果两个叠加都没有嵌套在另一个叠加中，那么您就不应该对哪个叠加优
先做出假设。

目前，所有覆盖物都优先于文本属性。

请注意，Emacs有时会对一些内部覆盖使用非数字优先级值，所以不要试图对覆盖的
优先级进行运算（除非是你创建的覆盖）。特别是，用于显示区域的叠加使用了一个
优先级值，其形式为@w{@code{(@var{primary} . @var{secondary})}}，其中
@var{primary}如上介绍，而@var{secondary}则是当@var{primary}和嵌套考虑不
能解决覆盖层之间的优先级时使用的后备值。但是，建议你不要根据这个实现细节来
设计Lisp程序，如果你需要将覆盖物按优先级排序，请使用@code{overlays-at}的
@var{sorted}参数。@xref{Finding Overlays}.

@item window
@kindex window @r{(overlay property)}
如果@code{window}属性是非@code{nil}，那么叠加只适用于该窗口。

@item category
@kindex category @r{(overlay property)}
如果一个覆盖层有一个@code{category}属性，我们把它称为覆盖层的
@dfn{category}。它应该是一个符号。属性的符号作为叠加属性的默认值。

@item face
@kindex face @r{(overlay property)}
此属性控制文本的外观(@pxref{Faces})。该属性的值可以是以下几种:

@itemize @bullet
@item
一个字体名（一个符号或字符串）。

@item
一个匿名的字体：一个@code{(@var{keyword} @var{value} @dots{})}形式的
属性列表，其中每个@var{keyword}是一个字体属性名，@var{value}是该属性
的一个值。

@item
一个字体的列表。每个列表元素应该是一个字体名称或一个匿名字体。这指定
了一个字体，它是每一个被列出的字体的属性的集合。列表中较早出现的字体
有较高的优先级。

@item
一个形式为@code{(foreground-color . @var{color-name})}或
@code{(background-color . @var{color-name})}的cons cell。指定前景或
背景颜色，类似于@code{(:foreground @var{color-name})}或
@code{(:background @var{color-name})}。这种形式只是为了向后兼容而支
持，应该避免使用。
@end itemize

@item mouse-face
@kindex mouse-face @r{(overlay property)}
当鼠标在覆盖范围内时，这个属性会代替@code{face}使用。然而，Emacs会忽
略此属性中所有改变文本大小的字体属性（例如@code{:height}、
@code{:weight}和@code{:slant}）。这些属性总是与未加亮的文本相同。

@item display
@kindex display @r{(overlay property)}
此属性可激活各种改变文本显示方式的功能。例如，它可以使文本显示得更高
或更短、更高或更低、更宽或更窄，或用图像代替。
@xref{Display Property}。

@item help-echo
@kindex help-echo @r{(overlay property)}
如果一个覆盖层有@code{help-echo}属性，那么当您将鼠标移动到覆盖层中的
文本上时，Emacs会在回声区域或工具提示窗口中显示帮助字符串。详情请看
@ref{Text help-echo}。

@item field
@kindex field @r{(overlay property)}
@c 复制自特殊属性。
具有相同@code{field}属性的连续字符构成一个@emph{field}。一些运动函数
，包括@code{forward-word}和@emph{field}。@code{beginning-of-line}在
字段边界处停止移动。@xref{Fields}。

@item modification-hooks
@kindex modification-hooks @r{(overlay property)}

此属性的值是一个函数列表，当覆盖层中的任何字符被更改或严格在覆盖层中
插入文本时，将被调用。

钩子函数在每次修改之前和之后都会被调用。如果函数保存它们收到的信息，
并在调用之间进行比较，它们就可以确定缓冲区文本中到底发生了什么变化。

当在修改前调用时，每个函数都会收到四个参数：覆盖层、@code{nil}和要修
改的文本范围的开始和结束。

修改后调用时，每个函数都会收到五个参数：覆盖层、@code{t}、刚刚修改的
文本范围的开头和结尾、被该范围替换的修改前文本的长度。对于插入，修改
前的长度为零；对于删除，该长度为删除的字符数，修改后的开头和结尾相等
）。

当这些函数被调用时，@code{inhibit-modification-hooks}被绑定到非
@code{nil}。如果这些函数对缓冲区进行了修改，您可能希望将
@code{inhibit-modification-hooks}绑定到@code{nil}上，以便使变更钩子
为这些修改运行。然而，这样做可能会递归地调用你自己的变更钩子，所以一
定要做好准备。@xref{Change Hooks}。

文本属性也支持@code{modification-hooks}属性，但细节有些不同（
@pxref{Special Properties}）。

@item insert-in-front-hooks
@kindex insert-in-front-hooks @r{(overlay property)}
此属性的值是在覆盖的开始处插入文本之前和之后要调用的函数列表。调用惯
例与@code{modification-hooks}函数相同。

@item insert-behind-hooks
@kindex insert-behind-hooks @r{(overlay property)}
此属性的值是在覆盖层的末尾插入文本之前和之后要调用的函数列表。调用惯
例与@code{modification-hooks} 函数相同。

@item invisible
@kindex invisible @r{(overlay property)}
@code{invisible}属性可以使覆盖中的文本不可见，也就是说它不会出现在屏
幕上。详情请参考@xref{Invisible Text}。

@item intangible
@kindex intangible @r{(overlay property)}
覆盖层上的@code{intangible}属性与@code{intangible}文本属性一样。它已
经过时了。详情请参考@xref{Special Properties}。

@item isearch-open-invisible
这个属性告诉增量搜索，如果最终匹配重叠，如何使一个不可见的覆盖层永久
可见。@xref{Invisible Text}.

@item isearch-open-invisible-temporary
此属性告诉增量搜索如何在搜索过程中暂时使不可见的覆盖层可见。
@xref{Invisible Text}.

@item before-string
@kindex before-string @r{(overlay property)}
这个属性的值是一个字符串，要添加到叠加开始的显示中。该字符串不会出现
在任何意义上的缓冲区中，只会出现在屏幕上。

@item after-string
@kindex after-string @r{(overlay property)}
这个属性的值是一个字符串，要添加到叠加结束时的显示中。该字符串不会出
现在缓冲区中，只出现在屏幕上。

@item line-prefix
此属性指定了在显示时要预置到每个非延续行的显示规范。@xref{Truncation}.

@item wrap-prefix
此属性指定了在显示时要预置到每个延续行的显示规范。@xref{Truncation}.

@item evaporate
@kindex evaporate @r{(overlay property)}
如果这个属性是非@code{nil}，那么如果覆盖层变成了空的（也就是说，如果它的长
度变成了零），就会自动删除它。如果您给空叠加
(@pxref{Managing Overlays, empty overlay})一个非@code{nil}的属性。
@code{evaporate}属性，会立即将其删除。请注意，除非覆盖层有这个属性，否则当它的起始位置和结束位置之间的文本从缓冲区中删除时，它不会被删除。

@item keymap
@cindex keymap of character (and overlays)
@kindex keymap @r{(overlay property)}
如果此属性为非@code{nil}，则为文本的一部分指定一个键图。当点后的字符在覆盖
范围内时，这个键位图就会被使用，并且优先于其他大多数键位图。
@xref{Active Keymaps}.

@item local-map
@kindex local-map @r{(overlay property)}
@code{local-map}属性类似于@code{keymap}，但它替换了缓冲区的局部地图，而不
是增加现有的键值。这也意味着它的优先级比次要模式的键图低。
@end table

@code{keymap}和@code{local-map}属性不会影响@code{before-string}、
@code{after-string}或@code{display}属性所显示的字符串。这只与鼠标点击和其
他落在字符串上的鼠标事件有关，因为点从来不在字符串上。要为字符串绑定特殊的鼠标事件，请为它分配一个@code{keymap}或@code{local-map}文本属性。
@xref{Special Properties}。

@node 寻找叠加
@subsection Searching for Overlays
@cindex searching for overlays
@cindex overlays, searching for

@defun overlays-at pos &optional sorted
该函数返回当前缓冲区中所有覆盖在@var{pos}位置上的字符的列表。如果
@var{sorted}是非@code{nil}，则列表按优先级递减，否则没有特定顺序。如果覆
盖的位置始于@var{pos}或在@var{pos}之前，而结束于@var{pos}之后，则覆盖的位
置包含@var{pos}。

为了说明使用方法，下面是一个Lisp函数，它返回了一个为点上字符指定属性
@var{prop}的覆盖列表:

@smallexample
(defun find-overlays-specifying (prop)
  (let ((overlays (overlays-at (point)))
        found)
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay prop)
            (setq found (cons overlay found))))
      (setq overlays (cdr overlays)))
    found))
@end smallexample
@end defun

@defun overlays-in beg end
此函数返回与@var{beg}到@var{end}区域重叠的覆盖层列表。如果一个叠加区域中包
含一个或多个字符，那么它就会与该区域重叠；如果空叠加（
@pxref{Managing Overlays, empty overlay}）位于@var{beg}，严格来说是在
@var{beg}和@var{end}之间，或者当@var{end}表示缓冲区末端的位置时位于
@var{end}，那么它们就会重叠。
@end defun

@defun next-overlay-change pos
此函数在返回@var{pos}之后，叠加的下一个开始或结束的缓冲区位置。如果没有，
则返回@code{(point-max)}。
@end defun

@defun previous-overlay-change pos
这个函数返回在@var{pos}之前，覆盖层的前一个开始或结束的缓冲区位置。如果没
有，则返回@code{(point-min)}。
@end defun

  举个例子，这里有一个简化的（低效的）基元函数
@code{next-single-char-property-change}的版本。(@pxref{Property Search}
)。它从位置@var{pos}开始向前搜索下一个位置，在这个位置上，从覆盖或文本属性
获得的给定属性@code{prop}的值发生了变化。

@smallexample
(defun next-single-char-property-change (position prop)
  (save-excursion
    (goto-char position)
    (let ((propval (get-char-property (point) prop)))
      (while (and (not (eobp))
                  (eq (get-char-property (point) prop) propval))
        (goto-char (min (next-overlay-change (point))
                        (next-single-property-change (point) prop)))))
    (point)))
@end smallexample

@node 显示文字的大小
@section Size of Displayed Text
@cindex size of text on display
@cindex character width on display

由于不是所有的字符都有相同的宽度，这些函数可以让你检查一个字符的宽度。
@xref{Primitive Indent},和@ref{Screen Lines}，了解相关功能。

@defun char-width char
该函数返回以列为单位的@var{char}字符的宽度，如果该字符在当前缓冲区中显示的
话（即，考虑到缓冲区的显示表，如果有的话；@pxref{Display Tables}）。tab
字符的宽度通常是@code{tab-width}。(@pxref{Usual Display})。
@end defun

@defun string-width string
该函数返回字符串@var{string}的列宽，如果它显示在当前的缓冲区和选定的窗口中
。
@end defun

@defun truncate-string-to-width string width &optional start-column padding ellipsis
此函数将@var{string}中塞得下@var{width}列的部分作为一个新的字符串返回。

如果@var{string}宽度没有够到@var{width}，那么结果将在@var{string}结束的地
方结束。如果@var{string}中的一个多列字符跨越了@var{width}列，那么这个字符
就不包含在结果中。因此，结果可以不超过@var{width}，但不能超过@var{width}
。

可选参数@var{start-column}指定了起始列。如果这个参数是非@code{nil}，那么字符串的第一列@var{start-column}将从值中省略。如果@var{string}中的一个多列字符跨越了@var{start-column}列，那么这个字符将不被包含。

可选参数@var{padding}，如果不是@code{nil}，则是在结果字符串的开头和结尾添加一个padding字符，以使其正好扩展到@var{width}列。如果结果少于@var{width}，则在结果的结尾使用padding字符。如果@var{string}中的一个多列字符跨越了@var{start-column}列，也会在结果的开头使用padding字符。

@vindex truncat-string-ellipsis
如果@var{ellipsis}是非@code{nil}，它应该是一个字符串，它将取代
@var{string}的结尾(包括任何padding)，除非@var{string}的显示宽度等于或小于
@var{ellipsis}的显示宽度。如果@var{ellipsis}是非@code{nil}而不是字符串，
那么它就代表变量@code{truncat-string-ellipsis}的值。

@example
(truncate-string-to-width "\tab\t" 12 4)
     @result{} "ab"
(truncate-string-to-width "\tab\t" 12 4 ?\s)
     @result{} "    ab  "
@end example
@end defun

下面的函数以像素为单位，返回文本在给定窗口中显示时的大小。这个函数被
@code{fit-window-to-buffer}和@code{fit-frame-to-buffer}(
@pxref{Resizing Windows})使用，以使窗口的大小与它所包含的文本完全相同。

@defun window-text-pixel-size &optional window from to x-limit y-limit mode-and-header-line
此函数返回@var{window}缓冲区中文本的大小，单位为像素。@var{window}必须是
一个实时窗口，默认为所选窗口。返回值是任意文本行的最大像素宽度和所有文本行
的最大像素高度的cons。

可选参数@var{from}，如果不是@code{nil}，则指定要考虑的第一个文本位置，默认
为缓冲区的最小可访问位置。如果@var{from}是@code{t}，则使用非换行符的最小可
访问位置。可选参数@var{to}，如果不是@code{nil}，则指定要考虑的最后一个文本
位置，默认为缓冲区的最大可访问位置。如果@var{to}是@code{t}，则使用非换行字
符的最大可访问位置。

可选参数@var{x-limit}，如果不是@code{nil}，则指定可以返回的最大像素宽度。
@var{x-limit}@code{nil}或省略代表使用@var{window}的主体的像素宽度 (
@pxref{Window Sizes})；当调用者不打算改变@var{window}的宽度时，这很有用。
否则，调用者应该在这里指定@var{window}的主体可能承担的最大宽度。X坐标超出
@var{x-limit}的文本将被忽略。由于计算长行的宽度需要一定的时间，所以最好将
这个参数设置得越小越好；尤其是当缓冲区中可能包含长行时，无论如何都会被截断
。

可选参数@var{y-limit}，如果不是@code{nil}，则指定可以返回的最大像素高度。
y坐标超过@var{y-limit}的文本行将被忽略。由于计算一个大的缓冲区的像素高度可
能需要一些时间，所以指定这个参数是有意义的；尤其是当调用者不知道缓冲区的大
小时。

可选参数@var{mode-and-header-line}@code{nil}或省略表示在返回值中不包含
@var{window}的模式行或标题行的高度。如果是符号@code{mode-line}或
@code{header-line}，则在返回值中只包含该行的高度（如果存在的话）；如果是
@code{t}，则在返回值中包含两者的高度（如果存在）。
@end defun

@code{window-text-pixel-size}将窗口中显示的文本作为一个整体来处理，而不关
心单个行的大小。下面的函数则是如此。

@defun window-lines-pixel-dimensions &optional window first last body inverse left
这个函数计算指定的@var{window}中显示的每一行的像素尺寸。它的计算方法是遍历
@var{window}的当前字形矩阵--一个存储@var{window}中当前显示的每个缓冲字符
的字形(@pxref{Glyphs})的矩阵。如果成功，它将返回一个cons对的列表，代表每行
最后一个字符的右下角的x和y坐标。坐标是以@var{window}左上角为原点(0,0)，以
像素为单位测量。@var{window}必须是一个实时窗口，默认为选定的窗口。

如果可选的参数@var{first}是一个整数，它表示要返回@var{window}的字形矩阵的第一行的索引（从0开始）。请注意，如果@var{window}有一个头行，那么索引为0的
行就是那个头行。如果@var{first}是@code{nil}，那么要考虑的第一行由可选参数
@var{body}的值决定：如果@var{body}是非@code{nil}，则意味着从@var{window}
主体的第一行开始，跳过任何头行（如果存在）。否则，这个函数将从@var{window}的字形矩阵的第一行开始，可能是头行。

如果可选的参数@var{last}是一个整数，它表示将返回@var{window}的字形矩阵的
最后一行的索引。如果@var{last}是@code{nil}，那么最后一行的索引由
@var{body}的值决定。如果@var{body}是非@code{nil}，这意味着使用
@var{window}的body的最后一行，省略@var{window}的模式行（如果存在的话）。
否则，这意味着使用@var{window}的最后一行，这可能是模式行。

可选参数@var{inverse}，如果是@code{nil}，意味着任何一行返回的y-pixel值指
定了从@var{window}的左边缘（如果@var{body}是非@code{nil}，则为主体边缘）
到该行最后一个字形的右边缘的像素距离。如果@var{inverse}是非@code{nil}意味
着任何一行返回的y-pixel值指定了从该行最后一个字形的右边缘到@var{window}的
右边缘(如果@var{body}是非@code{nil}，则为主体边缘)的距离，单位为像素。这
对于确定每行末尾的空余空间非常有用。

可选参数@var{left}，如果非@code{nil}则表示返回每行最左边字符的左下角的x和
y坐标。对于那些主要从右到左显示文字的窗口，应该使用这个值。

如果@var{left}是非@code{nil}，而@var{inverse}是@code{nil}，这意味着任何
一行返回的y-pixel值都指定了从该行最后（最左边）字形的左边缘到@var{window}
的右边缘（如果@var{body}是非@code{nil}，则为主体边缘）的像素距离。如果
@var{left}和@var{inverse}都是非@code{nil}，则任何一行返回的y-pixel值指定
了从@var{window}的左边缘（如果@var{body}是非@code{nil}，则为主体边缘）到
该行最后一个（最左）字形的左边缘的距离。

如果当前@var{window}的字形矩阵不是最新的，这个函数返回@code{nil}，这通常
发生在Emacs繁忙的时候，例如处理命令时。当这个函数在一个空闲的定时器中运行
时，其值应该是可以被检索到的，延迟时间为0秒。

@end defun

@defun line-pixel-height
此函数返回所选窗口中某点的行高度，单位为像素。此值包括了线条的行距（
@pxref{Line Height}）。
@end defun

当缓冲区显示行号时(@pxref{Display Custom,,,emacs,The GNU Emacs Manual})
，有时需要知道显示行号的宽度。下面的函数适用于需要这些信息进行布局计算的
Lisp程序。

@defun line-number-display-width &optional pixelwise
本函数返回所选窗口中用于显示行号的宽度。如果可选参数@var{pixelwise}是符号
@code{columns}，则返回值是窗帧的规范列数的浮点数；如果@var{pixelwise}是
@code{t}或其他任何非@code{nil}值，则该值是以像素为单位的整数。如果
@var{pixelwise}被省略或@code{nil}，则该值是为@code{line-number}面定义的
字体的整数列，不包括用来衬托显示数字的2列。如果行号没有在选定的窗口中显示，
那么无论@var{pixelwise}的值是多少，该值都是零。使用
@code{with-selected-window}。(@pxref{Selecting Windows})，如果您需要另一
个窗口的信息。
@end defun


@node 行高
@section Line Height
@cindex line height
@cindex height of a line

  每个显示行的总高度由行内内容的高度，加上显示行上方或下方可选的额外垂直行
距组成。

  行内容的高度是该显示行中任何字符或图像的最大高度，包括最后的换行（如果有
的话）。(一个被延续的显示行不包括最后的换行。)如果你没有指定更大的高度，这
是默认的行高。(在最常见的情况下，这等于相应框架的默认字体的高度，参见
@ref{Frame Font}。)

  有几种方法可以明确指定更大的行高，可以指定显示行的绝对高度，也可以指定垂
直空间。但是，无论您如何指定，实际的行高都不能小于默认值。

@kindex line-height @r{(text property)}
  一个新行可以有一个@code{line-height}文本或覆盖属性，控制以该新行结束的显
示行的总高度。

  如果属性值为@code{t}，换行符对行的显示高度没有任何影响--只有可见的内容才
能决定高度。下面描述的@code{line-spacing}属性在这种情况下也会被忽略。这对
于平铺小图像（或图像切片）而不在图像之间添加空白区域非常有用。

  如果属性值是一个@code{(@var{height} @var{total})}形式的列表，那就会给显
示行@emph{下}增加额外的空间。首先Emacs使用@var{height}作为高度规范来控制
行@emph{上}额外的空间；然后它增加足够的空间到行@emph{下}，来使总行高达到
@var{total}。在这种情况下，新行的@code{line-spacing}属性的任何值都会被忽
略。

@cindex height spec
  任何其他类型的属性值都是高度规格，它可以转化为一个数字---指定的行高。有
几种写入高度规格的方法，下面是每种方法如何转化为一个数字：

@table @code
@item @var{integer}
如果高度规格是一个正整数，高度值就是这个整数。
@item @var{float}
如果高度规格是浮点数，@var{float}，数字高度值是@var{float}乘以窗帧的默认
行高。
@item (@var{face} . @var{ratio})
如果高度规格是所示格式的cons，那么数字高度是@var{ratio}乘以字体@var{face}
的高度。@var{ratio}可以是任何类型的数字，也可以是@code{nil}，表示比值为1
，如果@var{face}是@code{t}，则是指当前的字体。
@item (nil . @var{ratio})
如果高度规格是所示格式的cons，则数字高度为@var{ratio}乘以行内容的高度。
@end table

  因此，任何有效的高度规格都会以像素为单位，以某种方式确定高度。如果行内容
的高度小于这个高度，Emacs会在行上面增加额外的垂直空间，以达到指定的总高度
。

  如果您没有指定@code{line-height}属性，行高由内容的高度加上行距组成。有几
种方法可以为Emacs文本的不同部分指定行距。

  在图形终端上，您可以使用@code{line-spacing}窗帧参数(
@pxref{Layout Parameters})来指定一个框架中所有行的行距，但是如果
@code{line-spacing}的默认值是非@code{nil}，则会覆盖窗帧的
@code{line-spacing}参数。一个整数，指定行下的像素数。浮点数指定相对于窗帧
默认行高的间距。

@vindex line-spacing
  你可以通过缓冲区本地@code{line-spacing}变量来指定缓冲区中所有行的行距。
一个整数指定了行下的像素数，一个浮点数指定了相对于默认帧行高的间距。浮点数
指定相对于默认帧行高的间距。这将覆盖为窗帧指定的行距。

@kindex line-spacing @r{(text property)}
  最后，一个新行可以有一个@code{line-spacing}文本或覆盖属性，它可以放大默
认的帧行距和缓冲区本地@code{line-spacing}变量：如果它的值大于缓冲区或帧的默认值，那么对于以该新行结束的显示行，将使用该较大的值。

  这些机制以一种或另一种方式为每行的间距指定一个Lisp值。该值是一个高度规格
，它转化为一个Lisp值，如上所述。然而，在这种情况下，数字高度值指定的是行间
距，而不是行高。

  在文本终端上，行距不能改变。

@node 字形
@section Faces
@cindex faces

  一个@dfn{face}是用于显示文本的图形属性的集合：字体、前景色、背景色、可选
的下划线等。字形控制Emacs如何在缓冲区中显示文本，以及窗帧的其他部分，如模式行。

@cindex anonymous face
  表示一个字形的一种方式是属性列表，比如
@code{(:foreground "red" :weight bold)}。这样的列表称为
@dfn{anonymous face}。例如，您可以指定一个匿名的字形作为@code{face}文本属
性的值，Emacs将显示具有指定属性的底层文本。@xref{Special Properties}。

@cindex face name
  更常见的是，一个面孔是通过@dfn{face name}来引用的：一个与一组字形属性相
关联的Lisp符号@footnote{为了向后兼容，你也可以使用一个字符串来指定一个字形
名；这相当于一个具有相同名称的Lisp符号}。命名的字形是使用@code{defface}宏
（@pxref{Defining Faces}）来定义的。Emacs自带了几个标准的命名面(
@pxref{Basic Faces})。

  Emacs的某些部分需要命名的字形（例如，在@ref{Attribute Functions}中记载
的函数）。除非另有说明，否则我们将使用@dfn{face}来表示命名的字形。

@defun facep object
如果@var{object}是一个命名的字形：一个作为字形名的Lisp符号或字符串，那么这
个函数返回一个非@code{nil}值。否则，它将返回@code{nil}值。
@end defun

@menu
* 字形属性::     什么是字形？
* 定义字形::     如何定义一个字形。
* 属性函数::     检查和设置字形属性的函数。
* 显示字形::     Emacs如何组合字符指定的字形。
* 字形重映射::   将字形重映射到其他定义。
* 字形函数::     如何定义和检查字形。
* 自动字形::     自动字形分配的钩子。
* 基本字形::     默认定义的字形。
* 字体选择::     为字形寻找最佳可用字体。
* 字体查询::     查询可用字体的名称和相关信息。
* 字体集::       字体集是指处理一系列字符集的字体的集合。
* 低级字体::     字符显示字体的Lisp表示。
@end menu

@node 字形属性
@subsection Face Attributes
@cindex face attributes
  @dfn{Face attributes}决定了字形的视觉外观。下表列出了所有的字形属性、它
们可能的值和它们的效果。

  除了下面给出的值之外，每个字形属性可以有@code{unspecified}这个值。这个特
殊的值意味着该字形没有直接指定该属性。一个@code{unspecified}属性会告诉
Emacs引用一个父字形(见下面@code{:inherit}属性的描述)；或者，如果不能引用
，则引用一个底层字形(@pxref{Displaying Faces})。@code{default}字形必须指
定所有属性。

  其中有些属性只对某些类型的显示器有意义。如果您的显示器不能处理某个属性，
则该属性将被忽略。

@table @code
@item :family
字体族名称（字符串）。@xref{Fonts,,,emacs,The GNU Emacs Manual},可以获得
更多关于字体家族的信息。函数@code{font-family-list}。(见下文)返回一个可用
的姓氏清单。

@item :foundry
由@code{:family}属性（字符串）指定的字体系列的
@dfn{font foundry}名称。@xref{Fonts,,,emacs, The GNU Emacs Manual}。

@item :width
相对字符宽度。应该是@code{ultra-condensed}、@code{extra-condensed}、
@code{condensed}、@code{semi-condensed}、@code{normal}、
@code{semi-expanded}、@code{expanded}、@code{extra-expanded}或
@code{ultra-expanded}中的一个符号。

@item :height
字体的高度。在最简单的情况下，这是一个以1/10点为单位的整数。

该值也可以是浮点或函数，它指定了相对于@dfn{underlying face}的高度。(
@pxref{Displaying Faces})。浮点值指定了缩放底层字形的高度的数量。调用函数
值时，只需要一个参数，即底层字形的高度，并返回新字形的高度。如果函数的参数
是整数，则必须返回一个整数。

默认字形的高度必须使用整数来指定，不允许使用浮点和函数值。

@item :weight
字体权重------@code{ultra-bold}、@code{extra-bold}、@code{bold}、
@code{semi-bold}、@code{normal}、@code{semi-light}、@code{light}、
@code{extra-light}、@code{ultra-light}中的一个符号（从最浓到最淡）。在支
持可变亮度文字的文本终端上，大于正常值的文字显示为特亮，小于正常值的文字显
示为半亮。

@cindex italic text
@item :slant
字体倾斜---@code{italic}、@code{oblique}、@code{normal}、
@code{reverse-italic}或@code{reverse-oblique}等符号之一。在支持可变亮度
文本的文本终端上，倾斜的文本显示为半亮。

@item :foreground
前景色，一个字符串。该值可以是系统定义的颜色名称，也可以是十六进制的颜色规
格。@xref{Color Names}。在黑白显示器上，某些灰度是通过点阵图案来实现的。

@item :distant-foreground
替代前景色，一个字符串。这和@code{:foreground}类似，但只有当背景色接近于本
应使用的前景色时，才会使用该颜色作为前景色。例如，在标记文本（即区域面）时
，这很有用。如果文本的前景与区域面可见，则使用该前景。如果前景在区域面背景
附近，则使用@code{:distant-foreground}来代替，这样文本就可读了。

@item :background
背景色，一个字符串。该值可以是一个系统定义的颜色名称，也可以是一个十六进制
的颜色规格。@xref{Color Names}。

@cindex underlined text
@item :underline
是否应该对字符进行下划线，以及以何种方式进行。@code{:underline}属性的可能
值是：

@table @asis
@item @code{nil}
不要下划线。

@item @code{t}
用字形的前景色下划线。

@item @var{color}
颜色下划线@var{color}，一个指定颜色的字符串。

@item @code{(:color @var{color} :style @var{style})}
@var{color}是一个字符串，或者符号@code{foreground-color}，意思是字形的前
景色。省略@code{:color}属性，表示使用字形的前景色。@var{style}应该是符号
@code{line}或@code{wave}，意思是使用直线或波浪线。省略@code{:style}属性，
表示使用直线。
@end table

@cindex overlined text
@item :overline
是否要对字符上划线，以及用什么颜色划线。如果值是@code{t}，则使用字面的前景
色。如果值是字符串，则使用该颜色进行叠加。值为@code{nil}表示不上划线。

@cindex strike-through text
@item :strike-through
字符是否应该被删除，以及用什么颜色。这个值的用法和@code{:overline}的用法一
样。

@cindex 2D box
@cindex 3D box
@item :box
是否应该在字符周围画一个方框，它的颜色，方框线的宽度，以及3D外观。以下是
@code{:box}属性的可能值，以及它们的含义:

@table @asis
@item @code{nil}
不要画一个盒子。

@item @code{t}
用前景色画一个宽度为1的线条的方框。

@item @var{color}
绘制一个宽度为1的方框，颜色为@var{color}。

@item @code{(:line-width (@var{vwidth} . @var{hwidth}) :color @var{color} :style @var{style})}
这样你就可以明确地指定盒子的所有方面。值@var{vwidth}和@var{hwidth}分别指
定要绘制的垂直线和水平线的宽度，它们默认为(1 . 1)。负的水平或垂直宽度
@minus{}@var{n}意味着要画一条宽度为@var{n}的线，占用底层文本的空间，从而
避免字符高度或宽度的增加。为了简化，宽度可以只用一个数字@var{n}来代替列表
，这种情况相当于@code{((abs @var{n}) . @var{n})}。

值@var{color}指定了要绘制的颜色。默认情况下，对于简单的方框，是字形的前景
色，对于3D方框，是字形的背景色。

值@var{style}指定是否要绘制一个3D框。如果是@code{released-button}，则该框
看起来像一个没有被按下的3D按钮。如果是@code{pressed-button}，则该框看起来
像一个正在被按下的3D按钮。如果是@code{nil}或省略，则使用普通的2D框。
@end table

@item :inverse-video
是否应该在反转视频中显示字符。该值应该是@code{t}(是)或@code{nil}(否)。

@item :stipple
背景点图，是一个位图。

值可以是一个字符串，应该是包含外部格式X位图数据的文件名。该文件在
@code{x-bitmap-file-path}变量中列出的目录中找到。

另外，也可以直接指定位图的值，其列表形式为
@code{(@var{width} @var{height} @var{data})}。这里，@var{width}和
@var{height}以像素为单位指定大小，@var{data}是一个字符串，包含位图的原始
位，一行一行的。每一行都占据了字符串中@math{(@var{width} + 7) / 8}连续的
字节（为了达到最佳效果，应该是一个单字节的字符串）。这意味着每一行至少要占
用一个完整的字节。

如果值是@code{nil}，表示不使用点图图案。

通常情况下，你不需要设置点图属性，因为它会自动用于处理某些灰度。

@item :font
用于显示字形的字体。它的值应该是一个字体对象或字体集。
@xref{Low-Level Font}，用于了解字体对象、字体规格和字体实体的信息。
@xref{Fontsets}，用于获取字体集的信息。

@anchor{face-font-attribute}
当使用@code{set-face-attribute}或@code{set-face-font}来指定这个属性时。(
@pxref{Attribute Functions})，您也可以提供一个字体规格、一个字体实体或一
个字符串。Emacs会将这些值转换为适当的字体对象，并将该字体对象存储为实际的
属性值。如果你指定的是一个字符串，字符串的内容应该是一个字体名称（
@pxref{Fonts,,,emacs,The GNU Emacs Manual}）；如果字体名称是一个包含通配
符的XLFD，Emacs会选择第一个与这些通配符匹配的字体。指定这个属性也会改变
@code{:family}、@code{:foundry}、@code{:width}、@code{:height}、
@code{:weight}和@code{:slant}属性的值。

@cindex inheritance, for faces
@item :inherit
继承属性的字形的名称，或字形名称的列表。来自继承的字形的属性会像底层字形一
样被合并到字形中，其优先级高于底层字形(@pxref{Displaying Faces})。如果要
继承的面孔是@code{unspecified}，则与@code{nil}处理相同，因为Emacs从不合并
@code{:inherit}属性。如果使用了一个字形列表，那么列表中前面的字形的属性会
覆盖后面的字形的属性。

@item :extend
这个字形是否会被扩展到行尾之外，并影响行尾和窗口边缘之间空隙的显示。这个值
应该是@code{t}使用这个面来显示行尾和窗口边缘之间的空位，或者@code{nil}不使
用这个字形来显示行尾和窗口边缘之间的空位。当Emacs合并几个字形来显示行尾以
外的空格时，只有那些带有@code{:extension}非@code{nil}的字形会被合并。默认
情况下，只有少数字形，特别是@code{region}，有这个属性。这个属性与其他属性
不同的是，当一个主题没有为某个字形指定一个显式的值时，会继承@code{defface}
从原始字形定义中得到的值（@pxref{Defining Faces}）。

@end table

@defun font-family-list &optional frame
这个函数返回一个可用的字体家族名称列表。可选参数@var{frame}指定显示文字的
窗帧；如果是@code{nil}，则使用选定的窗帧。
@end defun

@defopt underline-minimum-offset
该变量指定了显示下划线文本时，基线和下划线之间的最小距离，单位为像素。
@end defopt

@defopt x-bitmap-file-path
这个变量为@code{:stippple}属性指定了一个用于搜索位图文件的目录列表。
@end defopt

@defun bitmap-spec-p object
如果@var{object}是有效的位图规格，则返回@code{t}，适合与@code{:stipple}一
起使用(见上文)。否则返回@code{nil}。
@end defun

@node 定义字形
@subsection Defining Faces
@cindex defining faces

@cindex face spec
  通常定义一个字形的方法是通过@code{defface}宏。这个宏将一个字形的名称（一
个符号）与一个默认的@dfn{face spec}关联起来。字形规格是一个结构，它指定了
一个字形在任何给定的终端上应该具有的属性；例如，一个字形规格可以指定在高色
终端上使用一种前景色，而在低色终端上使用不同的前景色。

  人们有时会想创建一个变量，其值是一个字形名。在绝大多数情况下，没有必要这
样做，通常的程序是用@code{defface}定义一个字形，然后直接使用它的名字。

@cindex face (non-removability of)
请注意，一旦你定义了一个字形（通常使用@code{defface}），你以后就不能安全地
取消定义这个字形，除非重新启动 Emacs。

@defmac defface face spec doc [keyword value]@dots{}
这个宏声明@var{face}为一个命名的字形，其默认字形的规格由@var{spec}提供。
您不应该引用符号@var{face}，也不应该以@samp{-face}结尾。(那就太多余了)。
参数@var{doc}是字形的文档字符串。附加的@var{keyword}参数的含义与
@code{defgroup}和@code{defcustom}相同。(@pxref{Common Keywords})。

如果@var{face}已经有一个默认的字形规格，那么这个宏就不会有任何作用。

当没有定制生效时，默认的字形规格决定了@var{face}的外观(
@pxref{Customization})。如果@var{face}已经被自定义（通过自定义主题或从
init文件中读取的自定义），它的外观由自定义的字形规格决定，它覆盖了默认的字
形规格@var{spec}。然而，如果随后删除了自定义，@var{face}的外观将再次由其默
认的字形规格决定。

@cindex @code{eval-defun}, and @code{defface} forms
作为一个例外，如果您在Emacs Lisp模式下使用@kbd{C-M-x}(@code{eval-defun})
运行@code{defface}表单，@code{eval-defun}的一个特殊的功能覆盖任何自定义的
字形规格，使字形完全反映@code{defface}的内容。

参数@var{spec}是一个@dfn{face spec}，它说明了不同类型的终端上的字形应该如
何显示。它应该是一个alist，每个元素的形式是

@example
(@var{display} . @var{plist})
@end example

@noindent
@var{display}指定了一个终端的类别（见下文）。@var{plist}是一个字形属性及
其值的属性列表，指定了字形在这些终端上的显示方式。为了向后兼容，您也可以将
一个元素写成 @code{(@var{display} @var{plist})}。

@var{spec}元素的@var{display}部分决定了该元素匹配的终端。如果@var{spec}中
有多个元素与给定的终端匹配，那么第一个匹配的元素就是用于该终端的元素。
@var{display}有三种可能:

@table @asis
@item @code{default}
@var{spec}的这个元素并不匹配任何终端，而是指定了适用于所有终端的默认值。如
果使用这个元素，它必须是@var{spec}的第一个元素。下面的每个元素都可以覆盖这
些默认值中的任何一个或全部。

@item @code{t}
@var{spec}的这个元素匹配所有的终端。因此，@var{spec}的任何后续元素都不会被
使用。通常@code{t}会被用于@var{spec}的最后一个（或唯一）元素。

@item a list
如果@var{display}是一个列表，那么每个元素的形式应该是
@code{(@var{characteristic} @var{value}@dots{})}。这里，
@var{characteristic}指定了对终端进行分类的方式，@var{value}s是
@var{display}应该适用的可能分类。以下是@var{characteristic}的可能值:

@table @code
@item type
窗口系统终端的种类使用@code{graphic}(任何可显示图形的显示器),@code{x},
@code{pc}(MS-DOS控制台)，@code{w32}(适用于MS Windows 9X/NT/2K/XP)，或
@code{tty}(非图形功能的显示器).@xref{Window Systems, window-system}.

@item class
终端支持的颜色种类---@code{color},@code{grayscale},或@code{mono}.

@item background
背景的种类---@code{light}或@code{dark}.

@item min-colors
一个整数，表示终端应该支持的最小颜色数量。如果终端的
@code{display-color-cells}值至少是指定的整数，则与之匹配。

@item supports
终端是否可以显示@var{value}@dots{}中给出的字形属性。(
@pxref{Face Attributes})。@xref{Display Face Attribute Testing}，了解
更多关于这个测试具体如何进行的信息。
@end table

如果@var{display}的一个元素为给定的@var{characteristic}指定了一个以上的
@var{value}，那么这些值中的任何一个都是可以接受的。如果@var{display}有一
个以上的元素，则每个元素都应该指定一个不同的@var{characteristic}；那么终端
的@emph{each}特性必须与@var{display}中为其指定的@var{value}之一相匹配。
@end table
@end defmac

  例如，这里是标准字形的定义@code{highlight}：

@example
(defface highlight
  '((((class color) (min-colors 88) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 88) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 16) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 16) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "black")
    (t :inverse-video t))
  "Basic face for highlighting."
  :group 'basic-faces)
@end example

  在内部，Emacs在其@code{face-defface-spec}符号属性(
@pxref{Symbol Properties})中存储了每个字形的默认规格。@code{saved-face}
属性存储了用户使用自定义缓冲区保存的任何字形规格；@code{customized-face}
属性存储了为当前会话定制的字形规格，但没有保存；@code{theme-face}属性存储
了一个将活动的自定义设置和自定义主题与该字形规格关联起来的列表。字形的文档
字符串存储在@code{face-documentation}属性中。

  通常情况下，一个字形只声明一次，使用@code{defface}，对其外观的任何进一步
更改都是使用自定义框架（例如，通过自定义用户界面或通过
@code{custom-set-faces}函数；@pxref{Applying Customizations}），或通过字
形重映射（@pxref{Face Remapping}）。在极少数情况下，您需要直接从Lisp中
更改字形规格，您可以使用@code{face-spec-set}函数。

@defun face-spec-set face spec &optional spec-type
本函数将@var{spec}应用为@code{face}的字形规格。@var{spec}应该是一个字形的
规格，如上面文档中对@code{defface}的描述。

这个函数还定义了@var{face}作为有效的字形名称（如果还没有的话），并（重新）
计算现有窗帧的属性。

@cindex override spec @r{(for a face)}
可选参数@var{spec-type}决定了要设置哪个规格。如果省略了@code{nil}或
@code{face-override-spec}，这个函数将设置@dfn{override spec}，它将覆盖下
面提到的所有其他类型的@var{face}的字形规格。当在自定义代码之外调用这个函数
时，这个功能非常有用。如果@var{spec-type}是@code{customized-face}或
@code{saved-face}，这个函数将分别设置自定义的规格或保存的自定义规格。如果
是@code{face-defface-spec}，这个函数将设置默认的字形规格（与
@code{defface}设置的规格相同）。如果是@code{reset}，这个函数将清空所有自
定义的规格，并覆盖@var{face}中的规格。(在这种情况下，@var{spec}的值会被忽
略)。其他任何@var{spec-type}的值对字形的影响都是保留给内部使用的，但函数仍
然会定义@var{face}本身，并重新计算其属性，如上所述。
@end defun

@node 属性函数
@subsection Face Attribute Functions
@cindex face attributes, access and modification

  本节介绍了直接访问和修改命名面的属性的函数。

@defun face-attribute face attribute &optional frame inherit
此函数返回@var{frame}上 @var{face}的@var{attribute}属性值。

如果@var{frame}被省略或@code{nil}，则表示选定的窗帧（
@pxref{Input Focus}）。如果@var{frame}是@code{t}，这个函数将返回新创建的
窗帧的指定属性值（通常是@code{unspecified}，除非您使用
@code{set-face-attribute}指定了一些值；见下文）。

如果@var{inherit}是非@code{nil}，则只考虑@var{face}直接定义的属性，所以返
回值可能是@code{unspecified}，或者一个相对值。如果@var{inherit}是非
@code{nil}，则@var{face}对@var{attribute}的定义会与@code{:herit}属性所指
定的字形合并，但返回值可能仍然是@code{unspecified}或相对值。如果
@var{inherit}是一个字形或一个字形的列表，那么结果将进一步与该字形（或多个
字形）合并，直到它成为指定的和绝对的。

为了确保返回值始终是指定的和绝对的，对@var{inherit}使用@code{default}的值
；这将通过与@code{default}面（始终是完全指定的）合并来解决任何未指定或相对
值。

例如,

@example
(face-attribute 'bold :weight)
     @result{} bold
@end example
@end defun

@c FIXME:增加一个"相对面属性"的索引，也许在这里？--xfq
@defun face-attribute-relative-p attribute value
如果@var{value}作为字形属性@var{attribute}的值是相对的，那么这个函数返回
非@code{nil}。这意味着它将修改而不是完全覆盖任何来自于字形列表中后续字形的
值，或者是继承自其他字形的值。

对于所有属性来说，@code{:unspecified}是一个相对值。对于@code{:height}，浮
点和函数值也是相对的。

例如：

@example
(face-attribute-relative-p :height 2.0)
     @result{} t
@end example
@end defun

@defun face-all-attributes face &optional frame
这个函数返回一个@var{face}的属性列表。结果中的元素是名称-值对，其形式为
@w{@code{(@var{attr-name} . @var{attr-value})}}。可选参数@var{frame}指
定要返回@var{face}定义的框架；如果省略或@code{nil}，则返回的值描述了
@var{face}对新创建窗帧的默认属性。
@end defun

@defun merge-face-attribute attribute value1 value2
如果@var{value1}是字形属性@var{attribute}的相对值，则返回它与底层值
@var{value2}合并；否则，如果@var{value1}是字形属性@var{attribute}的绝对
值，则返回@var{value1}不变。
@end defun

  通常情况下，Emacs会使用每个面的规格来自动计算每个窗帧的属性（
@pxref{Defining Faces}）。函数@code{set-face-attribute}可以覆盖这种计算
方式，直接将属性分配给一个字形，无论是在特定的窗帧上还是在所有窗帧上。这个
函数主要用于内部使用。

@defun set-face-attribute face frame &rest arguments
此函数为@var{frame}设置@var{face}的一个或多个属性。这些属性覆盖了
@var{face}的字形规格。

额外的参数@var{arguments}指定了要设置的属性，以及它们的值，它们应该由要替
代的属性名（如@code{:family}或@code{:underline}）和值组成。因此，

@example
(set-face-attribute 'foo nil :weight 'bold :slant 'italic)
@end example

@noindent
将属性@code{:weight}设置为@code{bold}，将属性@code{:slant}设置为
@code{italic}。

如果@var{frame}是@code{t}，这个函数为新创建的窗帧设置默认属性，如果
@var{frame}是@code{nil}，这个函数为所有现有的窗帧以及新创建的窗帧设置属性
。如果@var{frame}为@code{nil}，则此函数为所有现有的窗帧以及新创建的窗帧设
置默认属性。
@end defun

  下面的命令和函数主要提供了与旧版本Emacs的兼容性。它们通过调用
@code{set-face-attribute}工作。@var{frame}参数的@code{t}和@code{nil}(或
省略)的值的处理方式与@code{set-face-attribute}和@code{face-attribute}一
样。如果是交互式调用的话，这些命令会使用minibuffer读取参数。

@deffn Command set-face-foreground face color &optional frame
@deffnx Command set-face-background face color &optional frame
这些设置将@var{face}的@code{:foreground}属性（或@code{:background}属性，
相对地）设置为@var{color}。
@end deffn

@deffn Command set-face-stipple face pattern &optional frame
这将@var{face}的@code{:stippple}属性设置为@var{pattern}。
@end deffn

@deffn Command set-face-font face font &optional frame
将@var{face}的字体相关属性改为@var{font}（一个字符串或字体对象）的相关属性
。@xref{face-font-attribute}，用于@var{font}参数的支持格式。这个函数设置
字体的属性@code{:font}，并间接设置字体定义的@code{:family}、
@code{:foundry}、@code{:width}、@code{:height}、@code{:weight}和
@code{:slant}属性。如果@var{frame}是非@code{nil}，则只改变指定窗帧的属性
。
@end deffn

@defun set-face-bold face bold-p &optional frame
如果@var{bold-p}是@code{nil}，则将@var{face}的@code{:weight}属性设置为
@var{normal}，否则设置为@var{bold}。
@end defun

@defun set-face-italic face italic-p &optional frame
如果@var{italic-p}是@code{nil}，则设置@var{face}的@code{:slant}属性为
@var{normal}，否则为@var{italic}。
@end defun

@deffn Command set-face-underline face underline &optional frame
这将@var{face}的@code{:underline}属性设置为@var{underline}。
@end deffn

@deffn Command set-face-inverse-video face inverse-video-p &optional frame
这将@var{face}的@code{:inverse-video}属性设置为@var{inverse-video-p}。
@end deffn

@deffn Command invert-face face &optional frame
这将交换字形@var{face}的前景色和背景色。
@end deffn

@deffn Command set-face-extend face extend &optional frame
这将@var{face}的@code{:extend}属性设置为@var{extend}。
@end deffn

  下面的函数检查一个字形的属性，它们主要提供了与旧版本Emacs的兼容性。它们
主要提供了与旧版本Emacs的兼容性。如果你没有指定@var{frame}，它们会指向所选
的窗帧；@code{t}指向新窗帧的默认数据。如果面没有为该属性定义任何值，它们会
返回@code{unspecified}。如果@var{inherit}是@code{nil}，则只返回一个由字
形直接定义的属性。如果@var{inherit}是非@code{nil}，那么由@code{:inherit}
属性指定的任何字形也会被考虑，如果@var{inherit}是一个字形或一个字形列表，
那么它们也会被考虑，直到找到一个指定的属性。为了确保返回值始终是指定的，请
为@var{inherit}使用@code{default}的值。

@defun face-font face &optional frame character
此函数返回字形@var{face}的字体名称。

如果指定了可选的参数@var{frame}，则返回该帧的@var{face}的字体名称。如果省
略了@var{frame}或@code{nil}，则使用选定的窗帧。在后一种情况下，如果提供了
可选的第三个参数@var{character}，则返回用于@var{character}的字体名称。
@end defun

@defun face-foreground face &optional frame inherit
@defunx face-background face &optional frame inherit
这些函数以字符串的形式返回字形@var{face}的前景色（或背景色）。如果没有指定
颜色，则返回@code{nil}。
@end defun

@defun face-stipple face &optional frame inherit
此函数返回面孔的背景图案名称@var{face}，如果没有，则返回@code{nil}。
@end defun

@defun face-bold-p face &optional frame inherit
如果@var{face}的@code{:weight}属性比正常情况下更粗（即@code{semi-bold}、
@code{bold}、@code{extra-bold}或@code{ultra-bold}中的一个），则该函数返
回一个非@code{nil}值。否则，它将返回@code{nil}。
@end defun

@defun face-italic-p face &optional frame inherit
如果@var{face}的@code{:slant}属性为@code{italic}或@code{oblique}，则该函
数返回一个非@code{nil}值，否则返回@code{nil}。
@end defun

@defun face-underline-p face &optional frame inherit
如果字形@var{face}指定了一个非@code{nil}的@code{:underline}属性，则该函数
返回非@code{nil}。
@end defun

@defun face-inverse-video-p face &optional frame inherit
如果字形@var{face}指定了一个非@code{nil}的@code{:inverse-video}属性，则
该函数返回非@code{nil}。
@end defun

@defun face-extend-p face &optional frame
如果字形@var{face}指定了一个非@code{nil}的@code{:extension}属性，则该函数
返回非@code{nil}。
@end defun


@node 显示字形
@subsection Displaying Faces
@cindex displaying faces
@cindex face merging

  当Emacs显示一段给定的文本时，文本的视觉外观可能由来自不同来源的字形决定
。如果这些不同的来源为一个特定的字符指定了多个字形，Emacs会合并不同字形的属性。以下是Emacs合并字形的顺序，从最高优先级到最低优先级:

@itemize @bullet
@item
如果文本由一个特殊的字形组成，则该字形可以指定一个特定的面。@xref{Glyphs}.

@item
如果文本位于活动区域内，Emacs会使用@code{region}面来高亮它。
@xref{Standard Faces,,,emacs, The GNU Emacs Manual}.

@item
如果文本位于一个非@code{nil}的@code{face}属性的覆盖范围内，Emacs就会应用
该属性所指定的字形。如果覆盖有@code{mouse-face}属性，并且鼠标离覆盖足够近
，Emacs会应用@code{mouse-face}属性指定的面孔或面孔属性。
@xref{Overlay Properties}。

当多个叠加覆盖一个字符时，优先级较高的叠加会覆盖优先级较低的叠加。
@xref{Overlays}.

@item
如果文本包含@code{face}或@code{mouse-face}属性，Emacs会应用指定的字形和字
形属性。@xref{Special Properties}。(字体锁定模式的面孔就是这样应用的。
@xref{Font Lock Mode}.)

@item
如果文字位于所选窗口的模式线内，Emacs应用@code{mode-line}字形。对于非选择
窗口的模式行，Emacs应用@code{mode-line-inactive}字形。对于页眉行，Emacs应
用@code{header-line}字形。对于标签行，Emacs应用@code{tab-line}字形。

@item
如果文本通过@code{before-string}或@code{after-string}属性(
@pxref{Overlay Properties})来自覆盖字符串，或来自显示字符串(
@pxref{Other Display Specs})，而该字符串并不包含@code{face}或
@code{mouse-face}属性，或者这些属性没有定义一些字形的属性，但受覆盖/显示属
性影响的缓冲区文本确实定义了一个字形或这些属性，Emacs就会应用“下层”缓冲区
文本的字形属性。请注意，即使覆盖或显示字符串显示在显示边距中，也是如此(
@pxref{Display Margins})。

@item
如果在前面的步骤中没有指定任何给定的属性，Emacs会应用@code{default}字形的
属性。
@end itemize

  在每个阶段，如果一个字形有一个有效的@code{:inherit}属性，Emacs会将任何
具有@code{unspecified}值的属性视为具有来自父字形的相应值。
@pxref{Face Attributes}。请注意，父字形也可以不指定该属性，在这种情况下，
该属性在下一层次的面合并中仍未指定。

@node 字形重映射
@subsection Face Remapping
@cindex face remapping

  变量@code{face-remapping-alist}用于在缓冲区局部或全局改变一个字形的外观
。例如，它被用来实现@code{text-scale-adjust}命令(
@pxref{Text Scale,,,emacs, The GNU Emacs Manual})。

@defvar face-remapping-alist
这个变量的值是一个alist，其元素的形式是
@code{(@var{face} . @var{remapping})}。这将导致Emacs用@var{face}来显示
任何带有@var{face}字形的文本，而不是普通的@var{face}的定义。

@var{remapping}可以是任何适合@code{face}文本属性的字形规格：可以是一个字
形（即一个字形名或属性/值对的属性列表），也可以是一个字形列表。详情请参见
@ref{Special Properties}中对@code{face}文本属性的描述。@var{remapping}
是重映射面的完整规范----它取代了@var{face}的正常定义，而不是修改它。

如果@code{face-remapping-alist}是缓冲区本地的，那么它的局部值只在该缓冲区
内生效。如果@code{face-remapping-alist}包含了只适用于特定窗口的字形，那么
通过使用
@w{@code{(:filtered (:window @var{param} @var{val}) @var{spec})}}，字形
只在符合过滤条件的窗口中生效 (@pxref{Special Properties})。要暂时关闭字形
过滤，请将@code{face-filters-always-match}绑定到一个非@code{nil}的值，然
后所有的字形过滤器将匹配任何窗口。

注意：字形重映射是非递归的。如果@var{remapping}直接或通过@var{remapping}
中其它字形的@code{:inherit}属性引用了相同的字形名@var{face}，那么这个引用
将使用@var{face}的正常定义。例如，如果@code{modine-line}字形是使用
@code{face-remapping-alist}中的这个条目进行重映射的:

@example
(mode-line italic mode-line)
@end example

@noindent
那么新定义的@code{modine-line}字形就继承了@code{italic}字形，而
@emph{normal}字形则继承了@code{style}字形(非重映射的)@code{modine-line}
字形的定义。
@end defvar

@cindex relative remapping, faces
@cindex base remapping, faces
  下面的函数实现了@code{face-remapping-alist}的一个更高级别的接口，大多
数Lisp代码应该使用这些函数，而不是直接设置@code{face-remapping-alist}，以
避免践踏应用在其他地方的重映射。这些函数是用于缓冲区局部重映射的，所以它们
都会让@code{face-remapping-alist}成为缓冲区局部的副作用。它们管理
@code{face-remapping-alist}的形式

@example
  (@var{face} @var{relative-spec-1} @var{relative-spec-2} @var{...} @var{base-spec})
@end example

@noindent
其中，如上所述，@var{relative-spec-N}和@var{base-spec}中的每一个都是一个
字形名，或者是一个属性/值对的属性列表。@dfn{relative remapping}中的每一个
条目，@var{relative-spec-N}都由@code{face-remap-add-relative}和
@code{face-remap-remove-relative}函数管理；这些函数用于简单的修改，比如改
变文本大小。@dfn{base remapping}条目，@var{base-spec}，优先级最低，由
@code{face-remap-set-base}和@code{face-remap-reset-base}函数管理；它是
为了主要模式在其控制的缓冲区中重映射字形。

@defun face-remap-add-relative face &rest specs
这个函数将@var{specs}中的字形参数添加到当前缓冲区中的@var{face}中，作为字
形的相对重映射。其余的参数@var{specs}应该是一个字形名称列表，或者是一个属
性/值对的属性列表。

返回值是一个作为cookie的Lisp对象，如果以后需要删除重映射，可以将这个对象作
为参数传递给@code{face-remap-remove-relative}。

@example
;; Remap the 'escape-glyph' face into a combination
;; of the 'highlight' and 'italic' faces:
(face-remap-add-relative 'escape-glyph 'highlight 'italic)

;; Increase the size of the 'default' face by 50%:
(face-remap-add-relative 'default :height 1.5)
@end example
@end defun

@defun face-remap-remove-relative cookie
这个函数删除了之前由@code{face-remap-add-relative}添加的相对重映射。
@var{cookie}应该是@code{face-remap-add-relative}在添加相对重映射时返回的
Lisp对象。
@end defun

@defun face-remap-set-base face &rest specs
这个函数将当前缓冲区中@var{face}的基本重映射设置为@var{specs}。如果
@var{specs}为空，则恢复默认的基础重映射，类似于调用
@code{face-remap-reset-base}。(见下文)；请注意，这与@var{specs}包含一个
单一的值@code{nil}不同，后者的结果正好相反（@var{face}的全局定义被忽略）。

这将覆盖默认的@var{base-spec}，后者继承了全局的字形定义，所以如果需要的话
，由调用者来添加这种继承。
@end defun

@defun face-remap-reset-base face
此函数将@var{face}的基本重映射设置为默认值，默认值继承自@var{face}的全局定
义。
@end defun

@node 字形函数
@subsection Functions for Working with Faces

  以下是用于创建和处理字形的附加功能。

@defun face-list
该函数返回所有已定义的字形名列表。
@end defun

@cindex face number
@cindex face property of face symbols
@defun face-id face
这个函数返回@var{face}的@dfn{face number}。这是在Emacs中唯一标识一个字形
的数字。很少有必要用它的字形数来表示一个字形。然而，操作字形的函数，如
@code{make-glyph-code}和@code{glyph-face}。(@pxref{Glyphs})内部访问字形
号。请注意，字形数是作为字形符号的@code{face}属性的值来存储的，所以我们建
议不要将面的该属性设置为自己的任何值。
@end defun

@defun face-documentation face
此函数返回字形的文档字符串@var{face}，如果没有指定，则返回@code{nil}。
@end defun

@defun face-equal face1 face2 &optional frame
如果@var{face1}和@var{face2}的显示属性相同，则返回@code{t}。
@end defun

@defun face-differs-from-default-p face &optional frame
如果字形@var{face}的显示方式与默认字形不同，则返回非@code{nil}。
@end defun

@cindex face alias
@cindex alias, for faces
一个@dfn{face alias}提供了一个等价的字形名称，您可以通过给
@code{face-alias}属性定义一个字形的别名，并赋予目标字形名称的值。下面的例
子让@code{modeline}成为@code{modline}字形的别名。

@example
(put 'modeline 'face-alias 'mode-line)
@end example

@defmac define-obsolete-face-alias obsolete-face current-face when
这个宏定义了@code{obsolete-face}作为@var{current-face}的别名，并将其标记
为过时，表示将来可能会被删除。@var{when}应该是一个字符串，表示
@code{obsolete-face}什么时候被淘汰的（通常是一个版本号字符串）。
@end defmac

@node 自动字形
@subsection Automatic Face Assignment
@cindex automatic face assignment
@cindex faces, automatic choice

  这个钩子用于自动为缓冲区中的文本分配面。它是实现Jit-Lock模式的一部分，被
Font-Lock使用。

@defvar fontification-functions
这个变量保存了Emacs重绘需要在重新显示之前调用的函数列表，在重绘之前。即使
在没有启用Font Lock Mode的情况下，这些函数也会被调用。当启用字体锁定模式时
，这个变量通常只保留一个函数，@code{jit-lock-function}。

这些函数的调用顺序是按照所列的顺序进行的，只有一个参数，即缓冲区位置
@var{pos}。所有函数都会尝试从@var{pos}开始为当前缓冲区中的文本分配面。

函数应该通过设置@code{face}属性来记录它们分配的字形。它们还应该添加一个非
@code{nil}属性。@code{fontified}属性为他们已分配给所有文本的字形。该属性
告诉重新显示已经为该文本分配了字形。

如果@var{pos}后面的字符已经有一个非@code{nil}的字符，那么函数不做任何操作
可能是个好主意。@code{fontified}属性，但这不是必须的。如果一个函数覆盖了前
一个函数的赋值，那么最后一个函数完成后的属性才是真正重要的。

为了提高效率，我们建议编写这些函数，使它们通常在每次调用时为大约400到600个
字符分配字形。
@end defvar

@node 基本字形
@subsection Basic Faces
@cindex basic faces

如果你的Emacs Lisp程序需要给文本分配一些字形，通常情况下，使用某些现有的字
形或从它们那里继承字形，而不是定义全新的字形是一个好主意。这样一来，如果其
他用户已经定制了基本的字形来给Emacs提供某种外观，你的程序将无需额外的定制
就能适应。

下面列出了Emacs中定义的一些基本字形。除此以外，如果高亮显示还没有被Font
Lock模式处理，或者一些Font Lock字形没有被使用，您可能会想使用Font
Lock字形来进行语法高亮显示。@xref{Faces for Font Lock}。

@table @code
@item default
默认字形，其属性都是指定的。所有其他的字形都隐含地继承了它的属性：任何未指
定的属性都默认为这个字形的属性 (@pxref{Face Attributes})。

@item bold
@itemx italic
@itemx bold-italic
@itemx underline
@itemx fixed-pitch
@itemx fixed-pitch-serif
@itemx variable-pitch
这些属性由它们的名字来表示（例如，@code{bold}有一个粗体的@code{:weight}属
性），其他的属性都没有指定（所以由@code{default}给出）。

@item shadow
用于被遮挡的文本。例如，它用于minibuffer中文件名的忽略部分（
@pxref{Minibuffer File,,Minibuffers for File Names,emacs,The GNU Emacs
Manual}）。

@item link
@itemx link-visited
对于可点击的文本按钮，将用户发送到不同的缓冲区或位置。

@item highlight
用于应该暂时突出的文本延伸。例如，它通常被分配给@code{mouse-face}属性，用
于光标高亮（@pxref{Special Properties}）。

@item match
@itemx isearch
@itemx lazy-highlight
用于文本匹配（分别是）永久搜索匹配、交互式搜索匹配和懒惰高亮当前交互式匹配
之外的其他匹配。

@item error
@itemx warning
@itemx success
用于有关错误、警告或成功的文本。例如，这些文字用于@file{*Compilation*}缓冲
区中的信息。
@end table

@node 字体选择
@subsection Font Selection
@cindex font selection
@cindex selecting a font

  在Emacs在图形显示上绘制一个字符之前，它必须为该字符选择一个@dfn{font}
@footnote{在此上下文中，术语@dfn{font}与字体锁定（
@pxref{Font Lock Mode}）无关。
@xref{Fonts,,, emacs, The GNU Emacs Manual}。通常情况下，Emacs会根据分配
给该字符的字形自动选择字体--特别是字形属性@code{:family}、@code{:weight}
、@code{:slant}和@code{:width}。(@pxref{Face Attributes})。字体的选择也
取决于要显示的字符；有些字体只能显示有限的字符集。如果没有可用的字体完全符
合要求，Emacs就会寻找@dfn{closest matching font}。本节中的变量可以控制
Emacs如何进行这种选择。

@defopt face-font-family-alternatives
如果一个给定的字体族被指定了，但它不存在，这个变量就会指定要尝试的其他字库
。每个元素都应该有这种形式:

@example
(@var{family} @var{alternate-families}@dots{})
@end example

如果指定@var{family}，但不可用，Emacs会逐个尝试@var{alternate-families}
中给出的其他字体族，直到找到一个确实存在的字体族。
@end defopt

@defopt face-font-selection-order
如果没有与所有所需的字形属性（@code{:width}、@code{:height}、
@code{:weight}和@code{:slant}）完全匹配的字体，这个变量指定了在选择最接近
的匹配字体时应该考虑这些属性的顺序。该值应该是一个包含这四个属性符号的列表
，按重要性递减的顺序排列。默认值是
@code{(:width :height :weight :slant)}。

字体选择首先找到列表中第一个属性的最佳可用匹配；然后，在该方式最佳的字体中
，搜索第二个属性的最佳匹配，以此类推。

属性@code{:weight}和@code{:width}的符号值范围是以@code{normal}为中心。较
极端的匹配（离@code{normal}较远）比较不极端的匹配（离@code{normal}较近）
更受欢迎；这是为了确保非正常字形与正常字形尽可能形成对比。

这个变量发挥作用的一个例子是，当默认字体没有等效的斜体时。在默认的排序下，
@code{italic}面将使用与默认字体相似的非斜体字体。但是如果您将
@code{:slant}放在@code{:height}之前，@code{italic}字形将使用斜体字体，即
使它的高度不太合适。
@end defopt

@defopt face-font-registry-alternatives
如果指定了一个给定的注册表并且不存在，这个变量可以让你指定其他的字体注册表
来尝试。每个元素都应该有这种形式:

@example
(@var{registry} @var{alternate-registries}@dots{})
@end example

如果指定了@var{registry}但没有可用的注册表，Emacs会逐个尝试
@var{alternate-registries}中给出的其他注册表，直到找到一个确实存在的注册
表。
@end defopt

@cindex scalable fonts
  Emacs可以使用可扩展的字体，但默认情况下它不使用这些字体。

@defopt scalable-fonts-allowed
这个变量控制使用哪种可伸缩字体。默认值@code{nil}表示不使用可伸缩字体。
@code{t}表示使用任何适合文本的可伸缩字体。

否则，该值必须是一个正则表达式的列表。然后，如果可扩展字体的名称与列表中的
任何正则表达式相匹配，则启用可扩展字体以供使用。例如,

@example
(setq scalable-fonts-allowed '("iso10646-1$"))
@end example

@noindent
允许使用注册表@code{iso10646-1}的可扩展字体。
@end defopt

@defvar face-font-rescale-alist
这个变量指定某些字形的缩放比例。它的值应该是一个元素列表，其形式是

@example
(@var{fontname-regexp} . @var{scale-factor})
@end example

如果@var{fontname-regexp}与即将使用的字体名称相匹配，这就说明要根据
@var{scale-factor}这个因子选择更大的类似字体。如果某些字体比其标称的高度和
宽度大或小，您可以使用这个功能来规范字体大小。
@end defvar

@node 字体查询
@subsection Looking Up Fonts
@cindex font lookup
@cindex looking up fonts

@defun x-list-fonts name &optional reference-face frame maximum width
这个函数返回与@var{name}匹配的可用字体名称列表。@var{name}应该是一个包含字
体名称的字符串，其格式为Fontconfig、GTK+或XLFD格式（
@pxref{Fonts,,,emacs,The GNU Emacs Manual}）。在XLFD字符串中，可以使用通
配符：@samp{*}字符匹配任何子串，@samp{?}字符匹配任何单个字符。匹配字体名称
时，忽略大小写。

如果指定了可选的参数@var{reference-face}和@var{frame}，则返回的列表只包括
与@var{reference-face}大小相同的字体。(字形名称)当前在框架@var{frame}上。

可选参数@var{maximum}设置了返回字体的数量限制。如果它是非@code{nil}，那么
返回值会在第一个@var{maximum}匹配字体之后被截断。为@var{maximum}指定一个
小值可以使这个函数在许多字体匹配模式的情况下变得更快。

可选参数@var{width}指定了一个所需的字体宽度，如果它是非@code{nil}，则函数
只返回那些字符宽度为@var{width}倍的字体。如果参数为非@code{nil}，则函数只
返回字符宽度为(平均)@var{width}倍@var{reference-face}的字体。
@end defun

@defun x-family-fonts &optional family frame
此函数返回一个列表，描述@var{family}家族在@var{frame}上的可用字体。如果
@var{family}被省略或是@code{nil}，那么这个列表适用于所有的字体家族，因此
，它包含了所有可用的字体，否则，@var{family}必须是一个字符串。否则，
@var{family} 必须是一个字符串；它可能包含通配符@samp{?}和@samp{*}。

该列表描述了@var{frame}所处的显示；如果@var{frame}被省略或@code{nil}，则
适用于所选窗帧的显示（@pxref{Input Focus}）。

列表中的每个元素都是以下形式的向量:

@example
[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}
 @var{fixed-p} @var{full} @var{registry-and-encoding}]
@end example

前五个元素对应的是字形属性，如果你为一个字形指定了这些属性，它就会使用这个
字体。

最后三个元素给出了关于字体的附加信息。如果字体是固定间距的,@var{fixed-p}是
非@code{nil}。@var{full}是字体的全名，@var{registry-and-encoding}是一个
字符串，给出字体的注册和编码。
@end defun

@node 字体集
@subsection Fontsets
@cindex fontset

一个@dfn{fontset}是一个字体的列表，每个字体都被分配到一个字符代码的范围。
单个字体不能显示Emacs支持的全部字符范围，但字体集可以。正如字体一样，字体
集也有名称，当你为一个框架或一个面指定字体时，你可以使用字体集的名称来代替
字体名称。下面是关于在Lisp程序控制下定义字体集的信息:

@smallexample
@var{fontpattern}, @r{[}@var{charset}:@var{font}@r{]@dots{}}
@end smallexample

@noindent
忽略逗号前后的空白字符。

字符串的第一部分，@var{fontpattern}，应该是标准X字体名称的形式，但最后两个
字段应该是@samp{fontset-@var{alias}}。

新的字体集有两个名字，一个是长名，一个是短名。长名是@var{fontpattern}的全
部内容。短名是@samp{fontset-@var{alias}}。您可以通过以下两种名称来引用字
体集。如果已经存在一个同名的字体集，则会发出错误信号，除非@var{noerror}是
非@code{nil}，在这种情况下，这个函数什么都不做。

如果可选参数@var{style-variant-p}是非@code{nil}，那就说要把字体集的粗体、
斜体和粗体-黑体变体也创建出来。这些变体字体集没有短名，只有长名，通过改变
@var{fontpattern}来表示粗体和/或斜体状态。

规格字符串还说了要在字体集中使用哪些字体。详情请看下文。
@end defun

  构造@samp{@var{charset}:@var{font}}指定了一个特定字符集要使用的字体（在
这个字体集中）。这里，@var{charset}是一个字符集的名称，@var{font}是该字符
集要使用的字体。您可以在规范字符串中任意多次使用这个构造。

  对于其余的字符集，也就是那些你没有明确指定的字符集，Emacs会根据
@var{fontpattern}来选择字体：它取代了@samp{fontset-@var{alias}}，其值为
一个字符集。对于@acronym{ASCII}字符集，@samp{fontset-@var{alias}}用
@samp{ISO8859-1}代替。

  此外，当几个连续的字段是通配符时，Emacs会将它们折叠成一个通配符。这是为
了防止使用自动缩放的字体。通过缩放较大的字体制作的字体不能用于编辑，而缩放
较小的字体也没有用，因为最好使用较小字体的自身大小，Emacs就是这样做的。

  因此，如果@var{fontpattern}是这个,

@example
-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
@end example

@noindent
@acronym{ASCII}字符的字体规范是这样的:

@example
-*-fixed-medium-r-normal-*-24-*-ISO8859-1
@end example

@noindent
而中文GB2312字符的字体规范是这样的:

@example
-*-fixed-medium-r-normal-*-24-*-gb2312*-*
@end example

  您可能没有任何符合上述字体规范的中文字体。大多数X发行版只包含在
@var{family}字段中含有@samp{宋体}或@samp{方宋体}的中文字体。在这种情况下
，@samp{Fontset-@var{n}}可以按如下方式指定:

@smallexample
Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*
@end smallexample

@noindent
那么，除中文GB2312字外，其他字的字体规格都有在@var{family}字段中的
@samp{fixed}，以及字体规范中的中文GB2312字符在@var{family}字段中有一个通
配符 @samp{*}。

@defun set-fontset-font name character font-spec &optional frame add
此函数修改了现有的字体集@var{name}，使其与指定了@var{character}的
@var{font-spec}的字体匹配。

如果@var{name}是@code{nil}，则该函数修改所选框架的字体集；如果@var{frame}
不是@code{nil}，则修改@var{frame}的字体集。

如果@var{name}是@code{t}，则此函数将修改默认字体集，其简称为
@samp{fontset-default}。

除了指定一个单一的代码点之外，@var{character}也可以是一个cons
@code{(@var{from} . @var{to})}，其中@var{from}和@var{to}是字符代码点。在
这种情况下，使用@var{font-spec}来表示@var{from}和@var{to}(包括)范围内的所
有字符。

@var{character}可能是一个字符集(@pxref{Character Sets})。在这种情况下，
使用@var{font-spec} 来表示该字符集中的所有字符。

@var{character}可能是一个脚本名称（@pxref{Character Properties}）。在这
种情况下，使用@var{font-spec}来表示属于脚本的所有字符。

@var{character}可以是@code{nil}，也就是说，对于没有指定字体规格的字符，可
以使用@var{font-spec}。

@var{font-spec}可以是一个由函数@code{font-spec}创建的字体规格对象。(
@pxref{Low-Level Font})。

@var{font-spec}可以是一个cons; @code{(@var{family} . @var{registry})}，
其中@var{family}是一个字体的家族名（可能在头部包括一个厂商名），
@var{registry}是一个字体的注册名（可能在尾部包括一个编码名）。

@var{font-spec}可以是一个字体名称，一个字符串。

@var{font-spec}可以是@code{nil}，它明确地指定了指定的@var{character}没有
字体。这很有用，例如，可以避免在整个系统中为没有字型的字符搜索昂贵的字体，
比如那些来自Unicode专用区（PUA）的字符。

可选参数@var{add}，如果是非@code{nil}，则指定如何将@var{font-spec}添加到
之前设置的字体规格中。如果是@code{prepend}，则@var{font-spec}会被预先添加
。如果是@code{append}，则会将@var{font-spec}添加到后面。默认情况下，
@var{font-spec}会覆盖之前的设置。

例如，这就改变了默认的字体集，将属于字符集@code{japanese-jisx0208}的所有
字符使用@samp{Kochi Gothic}的字体。

@smallexample
(set-fontset-font t 'japanese-jisx0208
                  (font-spec :family "Kochi Gothic"))
@end smallexample
@end defun

@defun char-displayable-p char
如果Emacs应该能够显示@var{char}，这个函数返回@code{t}。更准确的说，如果所
选框架的字体集有一个字体可以显示@var{char}所属的字符集，则返回@code{t}。

字体集可以在每个字符的基础上指定字体；当字体集这样做时，这个函数的值可能不
准确。
@end defun

@node 低级字体
@subsection Low-Level Font Representation
@cindex font property

  通常情况下，不需要直接操作字体。如果您需要这样做，本节将解释如何操作。

  在Emacs Lisp中，字体是用三种不同的Lisp对象类型来表示的，分别是
@dfn{font objects}、@dfn{font specs}和@dfn{font entities}。

@defun fontp object &optional type
如果@var{object}是一个字体对象、字体规格或字体实体，则返回@code{t}。否则，
返回@code{nil}。

可选参数@var{type}，如果不是@code{nil}，则决定要检查的Lisp对象的确切类型
。在这种情况下，@var{type}应该是@code{font-object}、@code{font-spec}或
@code{font-entity}中的一个。
@end defun

@cindex font object
  字体对象是一个Lisp对象，表示Emacs所拥有@dfn{opened}的字体。在Lisp中不能
修改字体对象，但可以被检查。

@defun font-at position &optional window string
返回用于在@var{position}窗口中显示@var{window}位置上的字符的字体对象，如
果@var{window}是@code{nil}，则默认为选定的窗口。如果@var{string}是
@code{nil}，则@var{position}指定当前缓冲区中的一个位置；否则，
@var{string}应该是一个字符串，@var{position}指定该字符串中的一个位置。
@end defun

@cindex font spec
  字体规格是一个Lisp对象，它包含了一组可用于查找字体的规格。在一个字体规格
中，可能有一个以上的字体与之匹配。

@defun font-spec &rest arguments
使用@var{arguments}中的规格返回一个新的字体规格，它应该以
@code{property}-@code{value}对的形式出现。可能的字体规格如下:

@table @code
@item :name
字体名称（字符串），可以是XLFD、Fontconfig或GTK+格式。
@xref{Fonts,,,emacs, The GNU Emacs Manual}。

@item :family
@itemx :foundry
@itemx :weight
@itemx :slant
@itemx :width
这些与同名的字形属性具有相同的含义。@xref{Face Attributes}。
@code{:family}和@code{:foundry}是字符串，而其他三个是符号。作为示例值，
@code{:slant}可以是@code{italic}，@code{:weight}可以是@code{bold}，
@code{:width}可以是@code{normal}。

@item :size
字体大小——指定像素大小的非负整数，或指定点大小的浮点数。

@item :adstyle
字体的附加排版风格信息，如@samp{sans}。该值应该是一个字符串或符号。

@cindex font registry
@item :registry
字体的字符集注册表和编码，如@samp{iso8859-1}。该值应为字符串或符号。

@item :script
字体必须支持的文字（符号）。

@item :lang
字体应该支持的语言。该值应该是一个符号，其名称是两个字母的ISO-639语言名称
。在X上，如果字体的XLFD名称中的"附加样式"字段是非空的，则该值与之匹配。在
MS-Windows上，需要匹配规范的字体来支持语言所需的代码页。目前，只有一小部分
中日韩语言支持这个属性：@samp{ja}、@samp{ko}和@samp{zh}。

@item :otf
@cindex OpenType font
字体必须是支持这些OpenType特性的OpenType字体，前提是Emacs要用一个库来编译
，如在GNU/Linux上的@samp{libotf}，支持复杂的文本布局以满足脚本的需要。值
必须是一个列表，其形式为

@smallexample
@code{(@var{script-tag} @var{langsys-tag} @var{gsub} @var{gpos})}
@end smallexample

其中@var{script-tag}是OpenType脚本标签符号；@var{langsys-tag}是OpenType
语言系统标签符号，或者@code{nil}使用默认的语言系统；@code{gsub}是OpenType
GSUB特征标签符号的列表，如果不需要，则@code{nil}；@code{gpos}是OpenType
GPOS特征标签符号的列表，如果不需要，则@code{nil}。如果@code{gsub}或
@code{gpos}是一个列表，则该列表中的@code{nil}元素意味着字体必须不与任何其
余的标签符号匹配。可以省略@code{gpos}元素。
@end table
@end defun

@defun font-put font-spec property value
将字体规格@var{font-spec}中的字体属性@var{property}设置为@var{value}。
@end defun

@cindex font entity
  字体实体是对字体的引用，不需要打开。它的属性介于字体对象和字体规格之间：
与字体对象一样，与字体规格不同的是，它指的是单一的、特定的字体。与字体对象
不同，创建字体实体并不会将该字体的内容加载到计算机内存中。Emacs可以从一个
指代可扩展字体的字体实体中打开多个不同大小的字体对象。

@defun find-font font-spec &optional frame
本函数返回与@var{frame}框架上的字体规格@var{font-spec}最匹配的字体实体。
如果@var{frame}是@code{nil}，则默认为所选窗帧的字体。
@end defun

@defun list-fonts font-spec &optional frame num prefer
这个函数返回所有符合字体规格@var{font-spec}的字体实体列表。

可选参数@var{frame}，如果不是@code{nil}，则指定显示字体的窗帧。可选参数
@var{num}，如果是非@code{nil}，则应该是一个整数，指定返回列表的最大长度。
可选参数@var{prefer}，如果是非@code{nil}，应该是另一个字体规格，用于控制
返回列表的顺序；返回的字体实体按照与该字体规格的亲密度递减的顺序排序。
@end defun

  如果您调用@code{set-face-attribute}，并传递一个字体规格、字体实体或字体
名称字符串作为@code{:font}属性的值，Emacs就会打开可供显示的最佳匹配字体。
然后，它将相应的字体对象存储为该面的@code{:font}属性的实际值。

  下面的函数可以用来获取字体的信息，对于这些函数，@var{font}参数可以是字体
对象、字体实体或字体规格。

@defun font-get font property
此函数返回@var{font}的字体属性@var{property}的值。

如果@var{font}是一个字体规范，而字体规范没有指定@var{property}，那么返回
值是@code{nil}。如果@var{font}是一个字体对象或字体实体，那么@var{:script}
属性的值可以是一个字体支持的脚本列表。
@end defun

@defun font-face-attributes font &optional frame
此函数返回与@var{font}对应的字体属性列表。参数@var{frame}为可选参数，指定
显示字体的窗帧，如果是@code{nil}，则使用选定的窗帧。如果参数为@code{nil}，
则使用选定的窗帧。返回值的形式是

@smallexample
(:family @var{family} :height @var{height} :weight @var{weight}
   :slant @var{slant} :width @var{width})
@end smallexample

其中@var{family},@var{height},@var{weight},@var{slant},和@var{width}的
值是字形属性值。如果这些键属性对没有被@var{font}指定，那么它们中的一些可能
会从列表中被省略。
@end defun

@defun font-xlfd-name font &optional fold-wildcards
此函数返回XLFD（X逻辑字体描述符），是一个字符串，匹配@var{font}。关于XLFD
的信息，请参考@xref{Fonts,,,emacs, The GNU Emacs Manual}。如果名称对于
XLFD来说太长（最多可以包含255个字符），函数返回@code{nil}。

如果可选参数@var{fold-wildcards}是非@code{nil}，则XLFD中的连续通配符将被
折叠成一个。
@end defun

以下两个函数返回字体的重要信息。

@defun font-info name &optional frame
本函数返回由@var{name}（字符串）指定的字体信息，因为它是在@var{frame}上使
用的。如果省略了@var{frame}或者@code{nil}，则默认为选定的窗帧。

函数返回的值是一个
@code{[@var{opened-name} @var{full-name} @var{size} @var{height}
@var{baseline-offset} @var{relative-compose} @var{default-ascent}
@var{max-width} @var{ascent} @var{descent} @var{space-width}
@var{average-width} @var{filename} @var{capability}]}
形式的向量。下面是这个向量的各个组成部分的描述:

@table @var
@item opened-name
用于打开字体的名称，一个字符串。

@item full-name
字体的全称，一个字符串。

@item size
字体的像素大小。

@item height
字体的高度，单位为像素。

@item baseline-offset
从@acronym{ASCII}基线出发的偏移量，以像素为单位，正数向上。

@item relative-compose
@itemx default-ascent
控制如何组成字符的数字。

@item max-width
字体的最大前进宽度。

@item ascent
@itemx descent
这个字体的上升和下降。这两个数字之和应该等于上面@var{height}的值。

@item space-width
字体的空格字符的宽度，以像素为单位。

@item average-width
字体字符的平均宽度。如果这个值为0，Emacs在计算文字布局时使用
@var{space-width}的值。

@item filename
字体的文件名，作为一个字符串。如果字体后端没有提供查找字体文件名的方法，则
可以是@code{nil}。

@item capability
一个列表，其第一个元素是代表字体类型的符号，是@code{x}、@code{opentype}、
@code{truetype}、@code{type1}、@code{pcf}或@code{bdf}中的一个。对于
OpenType字体，这个列表包括两个额外的元素，描述字体支持的@sc{gsub}和
@sc{gpos}特性。每一个元素都是一个列表，其形式为
@code{((@var{script} (@var{langsys} @var{feature} @dots{}) @dots{})
@dots{})}，其中@var{script}是一个代表OpenType脚本标签的符号，
@var{langsys}是一个代表OpenType langsys标签的符号（或@code{nil}，代表默
认的langsys），每个@var{feature}是一个代表OpenType特征标签的符号。
@end table
@end defun

@defun query-font font-object
这个函数返回@var{font-object}的信息。(这与@code{font-info}不同，
@code{font-info}的参数是一个字符串，字体名称。)

函数返回的值是一个
@code{[@var{name} @var{filename} @var{pixel-size} @var{max-width}
@var{ascent} @var{descent} @var{space-width} @var{average-width}
@var{capability}]}形式的向量。下面是这个向量的各个组成部分的描述:

@table @var
@item name
字体名称，一个字符串。

@item filename
字体的文件名，作为一个字符串。如果字体后台没有提供查找字体文件名的方法。如
果字体后端没有提供查找字体文件名的方法，则可以是@code{nil}。

@item pixel-size
用于打开字体的像素大小。

@item max-width
字体的最大前进宽度。

@item ascent
@itemx descent
这个字体的上升和下降。这两个数字之和就是字体的高度。

@item space-width
字体的空格字符的宽度，以像素为单位。

@item average-width
字体字符的平均宽度。如果这个值为0，Emacs在计算文字布局时使用
@var{space-width}的值。

@item capability
一个列表，其第一个元素是代表字体类型的符号，是@code{x}、@code{opentype}、
@code{truetype}、@code{type1}、@code{pcf}或@code{bdf}中的一个。对于
OpenType字体，这个列表包括两个额外的元素，描述字体支持的@sc{gsub}和
@sc{gpos}特性。每一个元素都是一个列表，其形式为
@code{((@var{script} (@var{langsys} @var{feature} @dots{}) @dots{})
@dots{})}，其中@var{script}是一个代表OpenType脚本标签的符号，
@var{langsys}是一个代表OpenType langsys标签的符号（或@code{nil}，代表默
认的langsys），每个@var{feature}是一个代表OpenType特征标签的符号。
@end table
@end defun

@cindex font information for layout
下面的四个函数返回了各种字体的大小信息，允许在Lisp程序中进行各种布局考虑。
这些函数考虑到了面孔重映射，如果相关的字形被重映射，则返回有关重映射字形的
信息。@xref{Face Remapping}.

@defun default-font-width
该函数返回当前缓冲区默认字形的字体的平均宽度，以像素为单位，因为该字形是为
所选窗帧定义的。
@end defun

@defun default-font-height
该函数返回当前缓冲区默认字形的字体的高度，以像素为单位，因为该字形是为所选
窗帧定义的。
@end defun

@defun window-font-width &optional window face
此函数返回@var{face}在@var{window}中使用的字体的平均宽度，单位为像素。指
定的@var{window}必须是一个实时窗口。如果@code{nil}被省略，则@var{window}
默认为选定的窗口，@var{face}默认为@var{window}中的默认字形。
@end defun

@defun window-font-height &optional window face
此函数以像素为单位返回@var{face}在@var{window}中使用的字体高度。指定的
@var{window}必须是一个实时窗口，如果@code{nil}被省略，则@var{window}默认
为选定的窗口。如果@code{nil}被省略，则@var{window}默认为选定的窗口，
@var{face}默认为@var{window}中的默认字形。
@end defun

@node 边缘
@section Fringes
@cindex fringes

  在图形显示上，Emacs会在每个窗口旁边绘制@dfn{fringes}：细细的竖条向下，可
以显示表示截断、延续、水平滚动等的位图。

@menu
* 边缘尺寸/位置::  指定窗口边缘的位置。
* 边缘指示器::     在窗口边缘显示指示图标。
* 边缘光标::       在右侧边缘显示光标。
* 边缘位图::       为边缘指示器指定位图。
* 自定义位图::     在边缘指定自己的位图。
* 叠加箭头::       显示箭头以指示位置。
@end menu

@node 边缘尺寸/位置
@subsection Fringe Size and Position

  以下缓冲区局部变量控制了显示该缓冲区的窗口中边缘的位置和宽度。

@defvar fringes-outside-margins
边缘通常出现在显示边框和窗口文字之间。如果数值是非@code{nil}，则出现在显示
边框之外。@xref{Display Margins}。
@end defvar

@defvar left-fringe-width
这个变量如果不是@code{nil}，则指定左边缘的宽度，单位为像素。值为@code{nil}
表示使用窗口框架的左边缘宽度。
@end defvar

@defvar right-fringe-width
这个变量如果不是@code{nil}，则指定右边缘的宽度，单位为像素。值为@code{nil}
表示使用窗口框架中的右边缘宽度。
@end defvar

  任何没有为这些变量指定值的缓冲区都会使用@code{left-fringe}和
@code{right-fringe}窗框参数（@pxref{Layout Parameters}）指定的值。

  上述变量实际上是通过函数@code{set-window-buffer}来实现的。(
@pxref{Buffers and Windows})，它调用@code{set-window-fringes}作为一个子
程序。如果您更改了其中一个变量，除非您在每个受影响的窗口中再次调用
@code{set-window-buffer}，否则在显示缓冲区的现有窗口中，边缘显示不会更新
。您也可以使用 @code{set-window-fringes} 来控制各个窗口的边缘显示。

@defun set-window-fringes window left &optional right outside-margins persistent
此函数用于设置@var{window}窗口的边缘宽度。如果@var{window}为@code{nil}，
则使用选定的窗口。

参数@var{left}指定了左边边缘的宽度，以像素为单位，同样@var{right}也指定了
右边边缘的宽度。任意一个如果为非@code{nil}，则代表默认宽度。如果
@var{outside-margins}是非@code{nil}，则指定边缘应该出现在显示边框之外。

如果@var{window}的大小不足以容纳所需宽度的边缘，那么@var{window}的边缘将
保持不变。

这里指定的值可以在以后通过在@var{window}上调用@code{set-window-buffer}来
覆盖。(@pxref{Buffers and Windows})，其@var{keep-margins}参数为
@code{nil}或省略。然而，如果第五个参数@var{persistent}是非@code{nil}，并
且其他参数都被成功处理，那么这里指定的值将无条件地在后续调用
@code{set-window-buffer}时继续存在。这可以用来永久关闭minibuffer窗口中的
边缘，请参考@code{set-window-scroll-bar}的描述，以了解一个例子(
@pxref{Scroll Bars})。
@end defun

@defun window-fringes &optional window
此函数返回关于@var{window}窗口边缘的信息，如果@var{window}被省略或是
@code{nil}，则使用选定的窗口。值的形式为@code{(@var{left-width} @var{right-width} @var{outside-margins} @var{persistent})}。
@end defun


@node 边缘指示器
@subsection Fringe Indicators
@cindex fringe indicators
@cindex indicators, fringe

  @dfn{Fringe indicators}是显示在窗口边缘的微小图标，用于指示截断或延续的
行、缓冲区边界等。

@defopt indicate-empty-lines
@cindex fringes, and empty line indication
@cindex empty lines, indicating
当这个值是非@code{nil}时，Emacs会在缓冲区末尾的每一行空行的边缘显示一个特
殊的字形。@xref{Fringes}。在每个缓冲区中，这个变量都是自动的缓冲区本地变量
。
@end defopt

@defopt indicate-buffer-boundaries
@cindex buffer boundaries, indicating
这个缓冲区局部变量控制缓冲区边界和窗口滚动在窗口边缘的显示方式。

Emacs可以在缓冲区边界--即缓冲区的第一行和最后一行--出现在屏幕上时用角度图
标表示。此外，Emacs还可以在边框中显示一个向上的箭头来表示屏幕上方有文字，
而向下的箭头则表示屏幕下方有文字。

基本值有三种：

@table @asis
@item @code{nil}
不要显示任何这些边缘的图标。
@item @code{left}
在左边缘显示角度图标和箭头。
@item @code{right}
在右边缘中显示角度图标和箭头。
@item any non-alist
在左边缘中显示角度图标，不要显示箭头。
@end table

否则，该值应该是一个alist，指定哪些边缘指标要显示，在哪里显示。alist的每个
元素应该是@code{(@var{indicator} . @var{position})}的形式。这里，
@var{indicator}是@code{top}、@code{bottom}、@code{up}、@code{down}和
@code{t}中的一个。(它涵盖了所有尚未指定的图标)，而@var{position}是
@code{left}、@code{right}和@code{nil}中的一个。

例如，@code{((top .left) (t .right))}将上角位图放在左边缘，下角位图和两个
箭头位图放在右边缘。如果要在左边缘显示角度位图，而不显示箭头位图，请使用
@code{((top . left) (bottom . left))}。
@end defopt

@defvar fringe-indicator-alist
这个缓冲区局部变量指定了从逻辑边缘指示器到窗口边缘显示的实际位图的映射。值
是一个元素@code{(@var{indicator} . @var{bitmaps})}的列表，其中
@var{indicator}指定了一个逻辑指标类型，@var{bitmaps}指定了该指标的边缘位
图。

  每一个@var{indicator}应该是以下符号之一：

@table @asis
@item @code{truncation}, @code{continuation}.
用于截断和延续线。

@item @code{up}, @code{down}, @code{top}, @code{bottom}, @code{top-bottom}
当@code{indicate-buffer-boundaries}是非@code{nil}时使用。@code{up}和
@code{down}表示缓冲区边界位于窗口边缘的上方或下方；@code{top}和
@code{bottom}表示缓冲区最上方和最下方的文字行；@code{top-bottom}
表示缓冲区中只有一行文字的地方。

@item @code{empty-line}
当@code{indicat-empty-lines}是非@code{nil}时，用于指示缓冲区结束后的空行
。

@item @code{overlay-arrow}
用于叠加箭头（@pxref{Overlay Arrow}）。
@c 这在哪里用过？
@c @item 未知位图指示器:
@c @code{unknown}.
@end table

  每个@var{bitmaps}值可以是一个符号列表@code{(@var{left} @var{right}
[@var{left1} @var{right1}])}。@var{left}和@var{right}符号指定了特定指标
在左边和/或右边边缘显示的位图。@var{left1}和@var{right1}是针对
@code{bottom}和@code{top-bottom}指标的，用来表示最后一行文字没有最后的换
行。另外，@var{bitmaps}也可以是一个单一的符号，它同时用于左、右边缘。

  @xref{Fringe Bitmaps}，提供标准位图符号的列表以及如何定义您自己的位图。
此外，@code{nil}代表空位图（即没有显示的指示符）。

  当@code{fringe-indicator-alist}具有缓冲区局部值，且没有为逻辑指标定义位
图，或者位图为@code{t}时，将使用@code{fringe-indicator-alist}默认值中的对
应值。
@end defvar

@node 边缘光标
@subsection Fringe Cursors
@cindex fringe cursors
@cindex cursor, fringe

  当一行与窗口的宽度完全相同时，Emacs将光标显示在右侧的边缘，而不是使用两
行。根据当前缓冲区的光标类型，使用不同的位图来表示光标在边缘的位置。

@defopt overflow-newline-into-fringe
如果是非@code{nil}，那么与窗口完全一样宽的行（不包括最后的换行符）将不会继
续。相反，当点在行尾时，光标会出现在右边的边缘。
@end defopt

@defvar fringe-cursor-alist
这个变量指定了从逻辑光标类型到实际边缘位图的映射。这个值是一个列表，里面每
个元素的形式为@code{(@var{cursor-type} . @var{bitmap})}，表示使用边缘位
图@var{bitmap}来显示类型为@var{cursor-type}的游标。

每个@var{cursor-type}应该是@code{box}、@code{hollow}、@code{bar}、
@code{hbar}或@code{hollow-small}中的一个。前四个参数的含义与
@code{cursor-type}窗框参数（@pxref{Cursor Parameters}）相同。当正常的
@code{hollow-rectangle}位图太高，无法在特定的显示行上显示时，就会使用
@code{hollow-small}类型来代替@code{hollow}。

每个@var{bitmap}都应该是一个符号，指定该逻辑光标类型的边缘位图。
@iftex
详见下一小节。
@end iftex
@ifnottex
@xref{Fringe Bitmaps}.
@end ifnottex

@c FIXME: 我找不到fringes-indicator-alist变量。也许应该是
@c fringe-indicator-alist还是fringe-cursor-alist？--xfq
当@code{fringe-cursor-alist}有一个缓冲区本地值，并且没有为游标类型定义位
图时，将使用@code{fringe-indicator-alist}默认值中的对应值。
@end defvar

@node 边缘位图
@subsection Fringe Bitmaps
@cindex fringe bitmaps
@cindex bitmaps, fringe

  @dfn{fringe bitmaps}是实际的位图，它表示截断或继续的线条、缓冲区边界、
覆盖箭头等的逻辑边缘指标。每个位图用一个符号表示。
@iftex
这些符号由变量@code{fringe-indicator-alist}和@code{fringe-cursor-alist}
来引用，在前面的小节中已经介绍过。
@end iftex
@ifnottex
这些符号由@code{fringe-indicator-alist}变量和@code{fringe-cursor-alist}
变量引用，前者将边缘指示器映射到位图（@pxref{Fringe Indicators}），后者将
边缘光标映射到位图（@pxref{Fringe Cursors}）。
@end ifnottex

  Lisp程序也可以直接在左边缘或右边缘显示位图，通过对行中出现的一个字符使用
@code{display}属性（@pxref{Other Display Specs}）。这种显示规范的形式是

@example
(@var{fringe} @var{bitmap} [@var{face}])
@end example

@noindent
@var{fringe}是符号@code{left-fringe}或@code{right-fringe}。@var{bitmap}
是一个标识要显示的位图的符号。可选的@var{face}是一个字形，它的前景色是用来
显示位图的；这个字形会自动与@code{fringe}字形合并。

  例如，如果要在左侧边缘中显示一个箭头，使用@code{warning}字形，你可以这样
写：

@lisp
(overlay-put
 (make-overlay (point) (point))
 'before-string (propertize
                 "x" 'display
                 `(left-fringe right-arrow warning)))
@end lisp

  这里是Emacs中定义的标准边缘位图的列表，以及它们目前在Emacs中的使用方式（
通过@code{fringe-indicator-alist}和@code{fringe-cursor-alist}）。

@table @asis
@item @code{left-arrow}, @code{right-arrow}
用于表示截断的行。

@item @code{left-curly-arrow}, @code{right-curly-arrow}
用来表示续行。

@item @code{right-triangle}, @code{left-triangle}
前者由覆盖箭头使用。后者是不用的。

@item @code{up-arrow}, @code{down-arrow}
@itemx @code{bottom-left-angle}, @code{bottom-right-angle}
@itemx @code{top-left-angle}, @code{top-right-angle}
@itemx @code{left-bracket}, @code{right-bracket}
@itemx @code{empty-line}
用来表示缓冲区的边界。

@item @code{filled-rectangle}, @code{hollow-rectangle}
@itemx @code{filled-square}, @code{hollow-square}
@itemx @code{vertical-bar}, @code{horizontal-bar}。
用于不同类型的边缘光标。

@item @code{exclamation-mark}, @code{question-mark}
不被Emacs核心功能使用。
@end table

@noindent
下一小节介绍如何定义自己的边缘位图。

@defun fringe-bitmaps-at-pos &optional pos window
此函数返回窗口@var{window}中包含位置@var{pos}的显示行的边缘位图。返回值的
形式为@code{(@var{left} @var{right} @var{ov})}，其中@var{left}是左边缘的
边缘位图的符号（如果没有位图，则为@code{nil}），@var{right}是右边缘的类似
符号，如果左边缘有覆盖箭头，则@var{ov}是非@code{nil}。

如果@var{pos}在@var{window}中不可见，则该值为@code{nil}。如果
@var{window}是@code{nil}，则代表选定的窗口。如果@var{pos}是@code{nil}，
则代表@var{window}中的点的值。
@end defun

@node 自定义位图
@subsection Customizing Fringe Bitmaps
@cindex fringe bitmaps, customizing

@defun define-fringe-bitmap bitmap bits &optional height width align
这个函数定义符号@var{bitmap}为一个新的边缘位图，或者用该名称替换一个现有的
位图。

参数@var{bits}指定要使用的图像。它应该是一个字符串或整数向量，其中每个元素
（整数）对应于位图的一行。整数的每一个位对应于位图的一个像素，其中低位对应
于位图的最右边的像素。(请注意，这个位的顺序与XBM图像中的顺序相反；
@pxref{XBM Images}。)

高度通常是@var{bits}的长度。但是，您可以使用非@code{nil}的@var{height}指
定不同的高度。宽度通常是8，但你可以用非@code{nil}的@var{width}指定不同的
宽度。宽度必须是1到16之间的整数。

参数@var{align}指定了位图相对于使用它的行的范围的定位，默认为位图居中。允
许的值是@code{top}、@code{center}或@code{bottom}。

@var{align}参数也可以是一个列表@code{(@var{align} @var{periodic})}，其中
@var{align}的解释如上所述。如果@var{periodic}是非@code{nil}，则指定
@code{bits}中的行应该重复足够的次数以达到指定的高度。
@end defun

@defun destroy-fringe-bitmap bitmap
此函数销毁由@var{bitmap}识别的边缘位图。如果@var{bitmap}识别了一个标准的
边缘位图，那么它实际上会恢复该位图的标准定义，而不是完全删除它。
@end defun

@defun set-fringe-bitmap-face bitmap &optional face
这将边缘位图@var{bitmap}的字形设置为@var{face}。如果@var{face}是
@code{nil}，则选择@code{fringe}字形。位图的字形控制着绘制它的颜色。

@var{face}与@code{fringe}字形合并，所以通常@var{face}应该只指定前景色。
@end defun

@node 叠加箭头
@subsection The Overlay Arrow
@c @cindex 叠加箭头 重复变量名

  @dfn{overlay arrow}对于引导用户注意缓冲区中的某一行非常有用。例如，在用
于调试器接口的模式中，叠加箭头指示即将执行的代码行。这个功能与
@dfn{overlays}(@pxref{Overlays})无关。

@defvar overlay-arrow-string
这个变量保存了要显示的字符串，以引起对某一行的注意，如果没有使用箭头功能，
则显示@code{nil}。在图形显示中，字符串的内容会被忽略；相反，在显示区域左侧
的边缘区域会显示一个字形。
@end defvar

@defvar overlay-arrow-position
这个变量拥有一个标记，指示在哪里显示叠加箭头。它应该指向一行的开头。在非图
形化显示中，箭头文本出现在该行的开头，覆盖任何本来会出现的文本。由于箭头通
常很短，而且该行通常以缩进的方式开始，通常不会覆盖任何重要的内容。

如果该缓冲区中@code{overlay-arrow-position}的值指向该缓冲区，则在任何给定
的缓冲区中都会显示叠加箭头字符串。因此，可以通过创建
@code{overlay-arrow-position}的缓冲区本地绑定来显示多个叠加箭头字符串。然
而，通常使用 @code{overlay-arrow-variable-list} 来实现这一结果更为简洁。
@c !!! overlay-arrow-position: 但覆盖的字符串可以保留在其他缓冲区的显示中
@c 直到需要更新为止。这一点现在应该得到修正。是吗？
@end defvar

  您可以通过使用@code{before-string}属性创建一个叠加层来完成类似的工作。
@xref{Overlay Properties}。

  您可以通过变量@code{overlay-arrow-variable-list}定义多个叠加箭头。

@defvar overlay-arrow-variable-list
这个变量的值是一个变量列表，每个变量都指定了叠加箭头的位置。变量
@code{overlay-arrow-position}具有正常意义，因为它在这个列表中。
@end defvar

这个列表中的每个变量都可以拥有@code{overlay-arrow-string}和
@code{overlay-arrow-bitmap}属性，这些属性指定了要在相应的叠加箭头位置显示
的叠加箭头字符串（对于文本终端）或边缘位图（对于图形终端）。如果没有设置任
何一个属性，则使用默认的@code{overlay-arrow-string}或
@code{overlay-arrow}边缘指示器。

@node 滚动条
@section Scroll Bars
@cindex scroll bars

通常情况下，窗框参数@code{vertical-scroll-bar}控制窗框中的窗口是否有垂直
滚动条，以及它们是在左边还是右边。窗框参数@code{scroll-bar-width}指定了它
们的宽度（@code{nil} 表示默认值）。

窗框参数@code{horizontal-scroll-bar}控制窗框中的窗口是否有水平滚动条。窗
框参数@code{scroll-bar-height}指定了它们的高度（@code{nil}表示默认值）。
@xref{Layout Parameters}。

@vindex horizontal-scroll-bars-available-p
  并非所有平台上都有水平滚动条。函数
@code{horizontal-scroll-bar-available-p}不接受任何参数，如果它们在你的系
统上可用，则返回非@code{nil}。

  以下三个函数以一个默认为选定的实时窗框作为参数。

@defun frame-current-scroll-bars &optional frame
这个函数报告框架@var{frame}的滚动条类型。值是一个cons单元格
@code{(@var{vertical-type} .@: @var{horizontal-type})}，其中
@var{vertical-type}是@code{left}、@code{right}或@code{nil}。(这意味着没
有垂直滚动条。)@var{horizontal-type}是@code{bottom}或@code{nil}。这意味
着没有水平滚动条）。
@end defun

@defun frame-scroll-bar-width &optional frame
此函数返回@var{frame}的垂直滚动条的宽度，单位为像素。
@end defun

@defun frame-scroll-bar-height &optional frame
此函数返回@var{frame}的水平滚动条的高度，单位为像素。
@end defun

您可以通过使用以下功能覆盖各个窗口的窗框特定设置：

@defun set-window-scroll-bars window &optional width vertical-type height horizontal-type persistent
此函数用于设置窗口@var{window}的宽度和/或高度以及滚动条的类型。如果
@var{window}为@code{nil}，则使用选定的窗口。

@var{width}指定垂直滚动条的宽度，单位为像素(@code{nil}表示使用为窗框指定
的宽度)。@var{vertical-type}指定是否使用垂直滚动条，如果是，则指定在哪里使
用。可能的值有@code{left}、@code{right}、@code{t}（表示使用框架的默认值）
和@code{nil}（表示没有垂直滚动条）。

@var{height}指定水平滚动条的高度，单位为像素（@code{nil}表示使用窗框指定
的高度）。@var{horizontal-type}指定是否使用水平滚动条。可能的值是
@code{bottom}，@code{t}表示使用框架的默认值，@code{nil}表示没有水平滚动条
。请注意，对于迷你窗口来说，@code{t}和@code{nil}的含义相同，即不显示水平滚
动条。你必须明确指定@code{bottom}才能在迷你窗口中显示水平滚动条。

如果@var{window}不够大，无法容纳所需尺寸的滚动条，那么相应的滚动条将保持不
变。

这里指定的值可以在以后通过调用@code{set-window-buffer}来覆盖。(
@pxref{Buffers and Windows})上的@var{window}，其@var{keep-margins}参数
为@code{nil}或省略。然而，如果可选的第五个参数@var{persistent}是非
@code{nil}，并且其他参数都被成功处理，那么这里指定的值将无条件地在后续调用
@code{set-window-buffer}时继续存在。
@end defun

使用@code{set-window-scroll-bar}和@code{set-window-fringes}的
var{persistent}参数。(@pxref{Fringe Size/Pos})您可以通过在您的早期初始文
件(@pxref{Init File})中添加以下代码段来可靠地永久关闭任何迷你缓冲区窗口中
的滚动条和/或边缘。

@smallexample
@group
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (set-window-scroll-bars
             (minibuffer-window frame) 0 nil 0 nil t)
            (set-window-fringes
             (minibuffer-window frame) 0 0 nil t)))
@end group
@end smallexample

以下四个函数以一个默认为所选窗口的实时窗口作为参数。

@defun window-scroll-bars &optional window
这个函数返回一个形式为@code{(@var{width} @var{columns}
@var{vertical-type} @var{height} @var{lines} @var{horizontal-type}
@var{persistent})}的列表。

值@var{width}是为垂直滚动条的宽度指定的值（可能是@code{nil}）；
@var{columns}是垂直滚动条实际占用的列数（可能是四舍五入）。

值@var{height}是为水平滚动条的高度指定的值（可能是@code{nil}）；
@var{lines}是水平滚动条实际占用的行数（可能是四舍五入）。

@var{persistent}的值是最后一次成功调用@code{set-window-scroll-bar}时为
@var{window}指定的值，如果没有成功调用，则为@code{nil}。
@end defun

@defun window-current-scroll-bars &optional window
此函数报告窗口@var{window}的滚动条类型。值是一个cons单元格
@code{(@var{vertical-type} .@: @var{horizontal-type})}。与
@code{window-scroll-bar}不同的是，当考虑到框架默认值和
@code{scroll-bar-mode}时，这个函数报告的是实际使用的滚动条类型。
@end defun

@defun window-scroll-bar-width &optional window
此函数返回@var{window}的垂直滚动条的宽度，单位为像素。
@end defun

@defun window-scroll-bar-height &optional window
此函数返回@var{window}的水平滚动条的高度，单位为像素。
@end defun

如果您没有通过@code{set-window-scroll-bar}来指定窗口的滚动条设置，那么缓
冲区中的局部变量@code{vertical-scroll-bar}、@code{horizontal-scroll-bar}
、@code{scroll-bar-width}和@code{scroll-bar-height}将控制窗口的滚动条。
函数@code{set-window-buffer}检查这些变量。如果您改变了一个已经在窗口中可
见的缓冲区中的变量，您可以通过调用@code{set-window-buffer}指定已经显示的
同一缓冲区来使窗口注意到新的值。

您可以通过设置以下变量来控制特定缓冲区的滚动条的外观，这些变量在设置后会自
动成为缓冲区的本地变量。

@defvar vertical-scroll-bar
这个变量指定了垂直滚动条的位置。可能的值有@code{left}、@code{right}、
@code{t}（表示使用窗框的默认值）和@code{nil}（表示没有滚动条）。
@end defvar

@defvar horizontal-scroll-bar
这个变量指定了水平滚动条的位置。可能的值是@code{bottom}，@code{t}，表示使
用窗框的默认值，@code{nil}表示没有滚动条。
@end defvar

@defvar scroll-bar-width
这个变量指定了缓冲区垂直滚动条的宽度，以像素为单位。值为@code{nil}表示使用
窗框指定的值。
@end defvar

@defvar scroll-bar-height
这个变量指定了缓冲区水平滚动条的高度，以像素为单位。值为@code{nil}表示使用
窗框指定的值。
@end defvar

最后，您可以通过自定义@code{scroll-bar-mode}和
@code{horizontal-scroll-bar-mode}这两个变量来切换所有窗框上滚动条的显示。

@defopt scroll-bar-mode
这个变量控制是否在所有窗框中放置垂直滚动条以及放置在哪里。可能的值是
@code{nil}表示没有滚动条，@code{left}表示将滚动条放在左边，@code{right}表
示将滚动条放在右边。
@end defopt

@defopt horizontal-scroll-bar-mode
这个变量控制是否在所有窗框上显示水平滚动条。
@end defopt


@node 窗口分割器
@section Window Dividers
@cindex window dividers
@cindex right dividers
@cindex bottom dividers

窗口分割器是在一个窗框的窗口之间画出的条状物。右边的分界线是在一个窗口和任
何相邻的右边窗口之间绘制的，它的宽度（厚度）由窗框参数
@code{right-divider-width}指定。它的宽度（厚度）由窗框参数
@code{right-divider-width}指定。底部分隔线是在一个窗口和相邻窗口的底部或
回音区之间绘制的。它的宽度由窗框参数@code{bottom-divider-width}指定。无论
是哪种情况，指定宽度为零都意味着不绘制这种分隔线。
@xref{Layout Parameters}.

从技术上讲，右边的分隔线属于它左边的窗口，这意味着它的宽度占该窗口的总宽度
。底部的分隔线属于它上面的窗口，这意味着它的宽度占该窗口的总高度。
@xref{Window Sizes}。当一个窗口同时拥有右边和底部分隔线时，以底部分隔线为
准。这意味着，底部分隔线的宽度要画在窗口的整个总宽度上，而右侧分隔线的终点
在底部分隔线的上方。

分隔线可以用鼠标拖动，因此可以用鼠标调整相邻窗口的大小。当没有滚动条或模式
线存在时，它们还可以在视觉上将相邻窗口分开。以下三个字形允许自定义分隔线的
外观:

@table @code
@item window-divider
When a divider is less than three pixels wide, it is drawn solidly with
the foreground of this face.  For larger dividers this face is used for
the inner part only, excluding the first and last pixel.

@item window-divider-first-pixel
This is the face used for drawing the first pixel of a divider that is
at least three pixels wide.  To obtain a solid appearance, set this to
the same value used for the @code{window-divider} face.

@item window-divider-last-pixel
This is the face used for drawing the last pixel of a divider that is at
least three pixels wide.  To obtain a solid appearance, set this to the
same value used for the @code{window-divider} face.
@end table

You can get the sizes of the dividers of a specific window with the
following two functions.

@defun window-right-divider-width &optional window
Return the width (thickness) in pixels of @var{window}'s right divider.
@var{window} must be a live window and defaults to the selected one.
The return value is always zero for a rightmost window.
@end defun

@defun window-bottom-divider-width &optional window
Return the width (thickness) in pixels of @var{window}'s bottom divider.
@var{window} must be a live window and defaults to the selected one.
The return value is zero for the minibuffer window or a bottommost
window on a minibuffer-less frame.
@end defun


@node 显示属性
@section The @code{display} Property
@cindex display specification
@kindex display @r{(text property)}

  The @code{display} text property (or overlay property) is used to
insert images into text, and to control other aspects of how text
displays.  The value of the @code{display} property should be a
display specification, or a list or vector containing several display
specifications.  Display specifications in the same @code{display}
property value generally apply in parallel to the text they cover.

  If several sources (overlays and/or a text property) specify values
for the @code{display} property, only one of the values takes effect,
following the rules of @code{get-char-property}.  @xref{Examining
Properties}.

@cindex display property, unsafe evaluation
@cindex security, and display specifications
  Some of the display specifications allow inclusion of Lisp forms,
which are evaluated at display time.  This could be unsafe in certain
situations, e.g., when the display specification was generated by some
external program/agent.  Wrapping a display specification in a list
that begins with the special symbol @code{disable-eval}, as in
@w{@code{('disable-eval @var{spec})}}, will disable evaluation of any
Lisp in @var{spec}, while still supporting all the other display
property features.

  The rest of this section describes several kinds of
display specifications and what they mean.

@menu
* Replacing Specs::      Display specs that replace the text.
* Specified Space::      Displaying one space with a specified width.
* Pixel Specification::  Specifying space width or height in pixels.
* Other Display Specs::     Displaying an image; adjusting the height,
                              spacing, and other properties of text.
* Display Margins::     Displaying text or images to the side of the main text.
@end menu

@node Replacing Specs
@subsection Display Specs That Replace The Text
@cindex replacing display specs

  Some kinds of display specifications specify something to display
instead of the text that has the property.  These are called
@dfn{replacing} display specifications.  Emacs does not allow the user
to interactively move point into the middle of buffer text that is
replaced in this way.

  If a list of display specifications includes more than one replacing
display specification, the first overrides the rest.  Replacing
display specifications make most other display specifications
irrelevant, since those don't apply to the replacement.

  For replacing display specifications, @dfn{the text that has the
property} means all the consecutive characters that have the same
Lisp object as their @code{display} property; these characters are
replaced as a single unit.  If two characters have different Lisp
objects as their @code{display} properties (i.e., objects which are
not @code{eq}), they are handled separately.

  Here is an example which illustrates this point.  A string serves as
a replacing display specification, which replaces the text that has
the property with the specified string (@pxref{Other Display Specs}).
Consider the following function:

@smallexample
(defun foo ()
  (dotimes (i 5)
    (let ((string (concat "A"))
          (start (+ i i (point-min))))
      (put-text-property start (1+ start) 'display string)
      (put-text-property start (+ 2 start) 'display string))))
@end smallexample

@noindent
This function gives each of the first ten characters in the buffer a
@code{display} property which is a string @code{"A"}, but they don't
all get the same string object.  The first two characters get the same
string object, so they are replaced with one @samp{A}; the fact that
the display property was assigned in two separate calls to
@code{put-text-property} is irrelevant.  Similarly, the next two
characters get a second string (@code{concat} creates a new string
object), so they are replaced with one @samp{A}; and so on.  Thus, the
ten characters appear as five A's.

@node Specified Space
@subsection Specified Spaces
@cindex spaces, specified height or width
@cindex variable-width spaces

  To display a space of specified width and/or height, use a display
specification of the form @code{(space . @var{props})}, where
@var{props} is a property list (a list of alternating properties and
values).  You can put this property on one or more consecutive
characters; a space of the specified height and width is displayed in
place of @emph{all} of those characters.  These are the properties you
can use in @var{props} to specify the weight of the space:

@table @code
@item :width @var{width}
If @var{width} is a number, it specifies
that the space width should be @var{width} times the normal character
width.  @var{width} can also be a @dfn{pixel width} specification
(@pxref{Pixel Specification}).

@item :relative-width @var{factor}
Specifies that the width of the stretch should be computed from the
first character in the group of consecutive characters that have the
same @code{display} property.  The space width is the pixel width of
that character, multiplied by @var{factor}.  (On text-mode terminals,
the ``pixel width'' of a character is usually 1, but it could be more
for TABs and double-width CJK characters.)

@item :align-to @var{hpos}
Specifies that the space should be wide enough to reach @var{hpos}.
If @var{hpos} is a number, it is measured in units of the normal
character width.  @var{hpos} can also be a @dfn{pixel width}
specification (@pxref{Pixel Specification}).
@end table

  You should use one and only one of the above properties.  You can
also specify the height of the space, with these properties:

@table @code
@item :height @var{height}
Specifies the height of the space.
If @var{height} is a number, it specifies
that the space height should be @var{height} times the normal character
height.  The @var{height} may also be a @dfn{pixel height} specification
(@pxref{Pixel Specification}).

@item :relative-height @var{factor}
Specifies the height of the space, multiplying the ordinary height
of the text having this display specification by @var{factor}.

@item :ascent @var{ascent}
If the value of @var{ascent} is a non-negative number no greater than
100, it specifies that @var{ascent} percent of the height of the space
should be considered as the ascent of the space---that is, the part
above the baseline.  The ascent may also be specified in pixel units
with a @dfn{pixel ascent} specification (@pxref{Pixel Specification}).

@end table

  Don't use both @code{:height} and @code{:relative-height} together.

  The @code{:width} and @code{:align-to} properties are supported on
non-graphic terminals, but the other space properties in this section
are not.

  Note that space properties are treated as paragraph separators for
the purposes of reordering bidirectional text for display.
@xref{Bidirectional Display}, for the details.

@node Pixel Specification
@subsection Pixel Specification for Spaces
@cindex spaces, pixel specification

  The value of the @code{:width}, @code{:align-to}, @code{:height},
and @code{:ascent} properties can be a special kind of expression that
is evaluated during redisplay.  The result of the evaluation is used
as an absolute number of pixels.

  The following expressions are supported:

@smallexample
@group
  @var{expr} ::= @var{num} | (@var{num}) | @var{unit} | @var{elem} | @var{pos} | @var{image} | @var{xwidget} | @var{form}
  @var{num}  ::= @var{integer} | @var{float} | @var{symbol}
  @var{unit} ::= in | mm | cm | width | height
@end group
@group
  @var{elem} ::= left-fringe | right-fringe | left-margin | right-margin
        |  scroll-bar | text
  @var{pos}  ::= left | center | right
  @var{form} ::= (@var{num} . @var{expr}) | (@var{op} @var{expr} ...)
  @var{op}   ::= + | -
@end group
@end smallexample

  The form @var{num} specifies a fraction of the default frame font
height or width.  The form @code{(@var{num})} specifies an absolute
number of pixels.  If @var{num} is a symbol, @var{symbol}, its
buffer-local variable binding is used; that binding can be either a
number or a cons cell of the forms shown above (including yet another
cons cell whose @code{car} is a symbol that has a buffer-local
binding).

  The @code{in}, @code{mm}, and @code{cm} units specify the number of
pixels per inch, millimeter, and centimeter, respectively.  The
@code{width} and @code{height} units correspond to the default width
and height of the current face.  An image specification of the form
@w{@code{(image . @var{props})}} (@pxref{Image Descriptors})
corresponds to the width or height of the specified image.  Similarly,
an xwidget specification of the form @w{@code{(xwidget . @var{props})}}
stands for the width or height of the specified xwidget.
@xref{Xwidgets}.

  The elements @code{left-fringe}, @code{right-fringe},
@code{left-margin}, @code{right-margin}, @code{scroll-bar}, and
@code{text} specify the width of the corresponding area of the window.
When the window displays line numbers (@pxref{Size of Displayed
Text}), the width of the @code{text} area is decreased by the screen
space taken by the line-number display.

  The @code{left}, @code{center}, and @code{right} positions can be
used with @code{:align-to} to specify a position relative to the left
edge, center, or right edge of the text area.  When the window
displays line numbers, the @code{left} and the @code{center} positions
are offset to account for the screen space taken by the line-number
display.

  Any of the above window elements (except @code{text}) can also be
used with @code{:align-to} to specify that the position is relative to
the left edge of the given area.  Once the base offset for a relative
position has been set (by the first occurrence of one of these
symbols), further occurrences of these symbols are interpreted as the
width of the specified area.  For example, to align to the center of
the left-margin, use

@example
:align-to (+ left-margin (0.5 . left-margin))
@end example

  If no specific base offset is set for alignment, it is always relative
to the left edge of the text area.  For example, @samp{:align-to 0} in a
header-line aligns with the first text column in the text area.  When
the window displays line numbers, the text is considered to start where
the space used for line-number display ends.

  A value of the form @code{(@var{num} . @var{expr})} stands for the
product of the values of @var{num} and @var{expr}.  For example,
@code{(2 . in)} specifies a width of 2 inches, while @code{(0.5 .
@var{image})} specifies half the width (or height) of the specified
@var{image} (which should be given by its image spec).

  The form @code{(+ @var{expr} ...)} adds up the value of the
expressions.  The form @code{(- @var{expr} ...)} negates or subtracts
the value of the expressions.

@node Other Display Specs
@subsection Other Display Specifications

  Here are the other sorts of display specifications that you can use
in the @code{display} text property.

@table @code
@item @var{string}
Display @var{string} instead of the text that has this property.

Recursive display specifications are not supported---@var{string}'s
@code{display} properties, if any, are not used.

@item (image . @var{image-props})
This kind of display specification is an image descriptor (@pxref{Image Descriptors}).
When used as a display specification, it means to display the image
instead of the text that has the display specification.

@item (slice @var{x} @var{y} @var{width} @var{height})
This specification together with @code{image} specifies a @dfn{slice}
(a partial area) of the image to display.  The elements @var{y} and
@var{x} specify the top left corner of the slice, within the image;
@var{width} and @var{height} specify the width and height of the
slice.  Integers are numbers of pixels.  A floating-point number
in the range 0.0--1.0 stands for that fraction of the width or height
of the entire image.

@item ((margin nil) @var{string})
A display specification of this form means to display @var{string}
instead of the text that has the display specification, at the same
position as that text.  It is equivalent to using just @var{string},
but it is done as a special case of marginal display (@pxref{Display
Margins}).

@item (left-fringe @var{bitmap} @r{[}@var{face}@r{]})
@itemx (right-fringe @var{bitmap} @r{[}@var{face}@r{]})
This display specification on any character of a line of text causes
the specified @var{bitmap} be displayed in the left or right fringes
for that line, instead of the characters that have the display
specification.  The optional @var{face} specifies the colors to be
used for the bitmap.  @xref{Fringe Bitmaps}, for the details.

@item (space-width @var{factor})
This display specification affects all the space characters within the
text that has the specification.  It displays all of these spaces
@var{factor} times as wide as normal.  The element @var{factor} should
be an integer or float.  Characters other than spaces are not affected
at all; in particular, this has no effect on tab characters.

@item (height @var{height})
This display specification makes the text taller or shorter.
Here are the possibilities for @var{height}:

@table @asis
@item @code{(+ @var{n})}
@c FIXME: Add an index for "step"?  --xfq
This means to use a font that is @var{n} steps larger.  A @dfn{step} is
defined by the set of available fonts---specifically, those that match
what was otherwise specified for this text, in all attributes except
height.  Each size for which a suitable font is available counts as
another step.  @var{n} should be an integer.

@item @code{(- @var{n})}
This means to use a font that is @var{n} steps smaller.

@item a number, @var{factor}
A number, @var{factor}, means to use a font that is @var{factor} times
as tall as the default font.

@item a symbol, @var{function}
A symbol is a function to compute the height.  It is called with the
current height as argument, and should return the new height to use.

@item anything else, @var{form}
If the @var{height} value doesn't fit the previous possibilities, it is
a form.  Emacs evaluates it to get the new height, with the symbol
@code{height} bound to the current specified font height.
@end table

@item (raise @var{factor})
This kind of display specification raises or lowers the text
it applies to, relative to the baseline of the line.  It is mainly
meant to support display of subscripts and superscripts.

The @var{factor} must be a number, which is interpreted as a multiple
of the height of the affected text.  If it is positive, that means to
display the characters raised.  If it is negative, that means to
display them lower down.

Note that if the text also has a @code{height} display specification,
which was specified before (i.e.@: to the left of) @code{raise}, the
latter will affect the amount of raising or lowering in pixels,
because that is based on the height of the text being raised.
Therefore, if you want to display a sub- or superscript that is
smaller than the normal text height, consider specifying @code{raise}
before @code{height}.
@end table

@c We put all the '@code{(when ...)}' on one line to encourage
@c makeinfo's end-of-sentence heuristics to DTRT.  Previously, the dot
@c was at eol; the info file ended up w/ two spaces rendered after it.
  You can make any display specification conditional.  To do that,
package it in another list of the form
@code{(when @var{condition} . @var{spec})}.
Then the specification @var{spec} applies only when
@var{condition} evaluates to a non-@code{nil} value.  During the
evaluation, @code{object} is bound to the string or buffer having the
conditional @code{display} property.  @code{position} and
@code{buffer-position} are bound to the position within @code{object}
and the buffer position where the @code{display} property was found,
respectively.  Both positions can be different when @code{object} is a
string.

Note that @var{condition} will only be evaluated when redisplay
examines the text where this display spec is located, so this feature
is best suited for conditions that are relatively stable, i.e.@:
yield, for each particular buffer position, the same results on every
evaluation.  If the results change for the same text location, e.g.,
if the result depends on the position of point, then the conditional
specification might not do what you want, because redisplay examines
only those parts of buffer text where it has reasons to assume that
something changed since the last display cycle.

@node Display Margins
@subsection Displaying in the Margins
@cindex display margins
@cindex margins, display

  A buffer can have blank areas called @dfn{display margins} on the
left and on the right.  Ordinary text never appears in these areas,
but you can put things into the display margins using the
@code{display} property.  There is currently no way to make text or
images in the margin mouse-sensitive.

  The way to display something in the margins is to specify it in a
margin display specification in the @code{display} property of some
text.  This is a replacing display specification, meaning that the
text you put it on does not get displayed; the margin display appears,
but that text does not.

  A margin display specification looks like @code{((margin
right-margin) @var{spec})} or @code{((margin left-margin) @var{spec})}.
Here, @var{spec} is another display specification that says what to
display in the margin.  Typically it is a string of text to display,
or an image descriptor.

  To display something in the margin @emph{in association with}
certain buffer text, without altering or preventing the display of
that text, put a @code{before-string} property on the text and put the
margin display specification on the contents of the before-string.

  Note that if the string to be displayed in the margin doesn't
specify a face, its face is determined using the same rules and
priorities as it is for strings displayed in the text area
(@pxref{Displaying Faces}).  If this results in undesirable
``leaking'' of faces into the margin, make sure the string has an
explicit face specified for it.

  Before the display margins can display anything, you must give
them a nonzero width.  The usual way to do that is to set these
variables:

@defvar left-margin-width
This variable specifies the width of the left margin, in character
cell (a.k.a.@: ``column'') units.  It is buffer-local in all buffers.
A value of @code{nil} means no left marginal area.
@end defvar

@defvar right-margin-width
This variable specifies the width of the right margin, in character
cell units.  It is buffer-local in all buffers.  A value of @code{nil}
means no right marginal area.
@end defvar

  Setting these variables does not immediately affect the window.  These
variables are checked when a new buffer is displayed in the window.
Thus, you can make changes take effect by calling
@code{set-window-buffer}.  Do not use these variables to try to
determine the current width of the left or right margin.  Instead, use
the function @code{window-margins}.

  You can also set the margin widths immediately.

@defun set-window-margins window left &optional right
This function specifies the margin widths for window @var{window}, in
character cell units.  The argument @var{left} controls the left
margin, and @var{right} controls the right margin (default @code{0}).

If @var{window} is not large enough to accommodate margins of the
desired width, this leaves the margins of @var{window} unchanged.

The values specified here may be later overridden by invoking
@code{set-window-buffer} (@pxref{Buffers and Windows}) on @var{window}
with its @var{keep-margins} argument @code{nil} or omitted.
@end defun

@defun window-margins &optional window
This function returns the width of the left and right margins of
@var{window} as a cons cell of the form @w{@code{(@var{left}
. @var{right})}}.  If one of the two marginal areas does not exist,
its width is returned as @code{nil}; if neither of the two margins exist,
the function returns @code{(nil)}.  If @var{window} is @code{nil}, the
selected window is used.
@end defun

@node 图像
@section Images
@cindex images in buffers

  To display an image in an Emacs buffer, you must first create an image
descriptor, then use it as a display specifier in the @code{display}
property of text that is displayed (@pxref{Display Property}).

  Emacs is usually able to display images when it is run on a
graphical terminal.  Images cannot be displayed in a text terminal, on
certain graphical terminals that lack the support for this, or if
Emacs is compiled without image support.  You can use the function
@code{display-images-p} to determine if images can in principle be
displayed (@pxref{Display Feature Testing}).

@menu
* Image Formats::       Supported image formats.
* Image Descriptors::   How to specify an image for use in @code{:display}.
* XBM Images::          Special features for XBM format.
* XPM Images::          Special features for XPM format.
* ImageMagick Images::  Special features available through ImageMagick.
* SVG Images::          Creating and manipulating SVG images.
* Other Image Types::   Various other formats are supported.
* Defining Images::     Convenient ways to define an image for later use.
* Showing Images::      Convenient ways to display an image once it is defined.
* Multi-Frame Images::  Some images contain more than one frame.
* Image Cache::         Internal mechanisms of image display.
@end menu

@node Image Formats
@subsection Image Formats
@cindex image formats
@cindex image types

  Emacs can display a number of different image formats.  Some of
these image formats are supported only if particular support libraries
are installed.  On some platforms, Emacs can load support libraries on
demand; if so, the variable @code{dynamic-library-alist} can be used
to modify the set of known names for these dynamic libraries.
@xref{Dynamic Libraries}.

  Supported image formats (and the required support libraries) include
PBM and XBM (which do not depend on support libraries and are always
available), XPM (@code{libXpm}), GIF (@code{libgif} or
@code{libungif}), JPEG (@code{libjpeg}), TIFF
(@code{libtiff}), PNG (@code{libpng}), and SVG (@code{librsvg}).

  Each of these image formats is associated with an @dfn{image type
symbol}.  The symbols for the above formats are, respectively,
@code{pbm}, @code{xbm}, @code{xpm}, @code{gif},
@code{jpeg}, @code{tiff}, @code{png}, and @code{svg}.

  Furthermore, if you build Emacs with ImageMagick
(@code{libMagickWand}) support, Emacs can display any image format
that ImageMagick can.  @xref{ImageMagick Images}.  All images
displayed via ImageMagick have type symbol @code{imagemagick}.

@defvar image-types
This variable contains a list of type symbols for image formats which
are potentially supported in the current configuration.

``Potentially'' means that Emacs knows about the image types, not
necessarily that they can be used (for example, they could depend on
unavailable dynamic libraries).  To know which image types are really
available, use @code{image-type-available-p}.
@end defvar

@defun image-type-available-p type
This function returns non-@code{nil} if images of type @var{type} can
be loaded and displayed.  @var{type} must be an image type symbol.

For image types whose support libraries are statically linked, this
function always returns @code{t}.  For image types whose support
libraries are dynamically loaded, it returns @code{t} if the library
could be loaded and @code{nil} otherwise.
@end defun

@node Image Descriptors
@subsection Image Descriptors
@cindex image descriptor

  An @dfn{image descriptor} is a list which specifies the underlying
data for an image, and how to display it.  It is typically used as the
value of a @code{display} overlay or text property (@pxref{Other
Display Specs}); but @xref{Showing Images}, for convenient helper
functions to insert images into buffers.

  Each image descriptor has the form @code{(image . @var{props})},
where @var{props} is a property list of alternating keyword symbols
and values, including at least the pair @code{:type @var{type}} that
specifies the image type.

  The following is a list of properties that are meaningful for all
image types (there are also properties which are meaningful only for
certain image types, as documented in the following subsections):

@table @code
@item :type @var{type}
The image type.
@ifnottex
@xref{Image Formats}.
@end ifnottex
Every image descriptor must include this property.

@item :file @var{file}
This says to load the image from file @var{file}.  If @var{file} is
not an absolute file name, it is expanded relative to the
@file{images} subdirectory of @code{data-directory}, and failing that,
relative to the directories listed by @code{x-bitmap-file-path}
(@pxref{Face Attributes}).

@item :data @var{data}
This specifies the raw image data.  Each image descriptor must have
either @code{:data} or @code{:file}, but not both.

For most image types, the value of a @code{:data} property should be a
string containing the image data.  Some image types do not support
@code{:data}; for some others, @code{:data} alone is not enough, so
you need to use other image properties along with @code{:data}.  See
the following subsections for details.

@item :margin @var{margin}
This specifies how many pixels to add as an extra margin around the
image.  The value, @var{margin}, must be a non-negative number, or a
pair @code{(@var{x} . @var{y})} of such numbers.  If it is a pair,
@var{x} specifies how many pixels to add horizontally, and @var{y}
specifies how many pixels to add vertically.  If @code{:margin} is not
specified, the default is zero.

@item :ascent @var{ascent}
This specifies the amount of the image's height to use for its
ascent---that is, the part above the baseline.  The value,
@var{ascent}, must be a number in the range 0 to 100, or the symbol
@code{center}.

If @var{ascent} is a number, that percentage of the image's height is
used for its ascent.

If @var{ascent} is @code{center}, the image is vertically centered
around a centerline which would be the vertical centerline of text drawn
at the position of the image, in the manner specified by the text
properties and overlays that apply to the image.

If this property is omitted, it defaults to 50.

@item :relief @var{relief}
This adds a shadow rectangle around the image.  The value,
@var{relief}, specifies the width of the shadow lines, in pixels.  If
@var{relief} is negative, shadows are drawn so that the image appears
as a pressed button; otherwise, it appears as an unpressed button.

@item :width @var{width}, :height @var{height}
The @code{:width} and @code{:height} keywords are used for scaling the
image.  If only one of them is specified, the other one will be
calculated so as to preserve the aspect ratio.  If both are specified,
aspect ratio may not be preserved.

@item :max-width @var{max-width}, :max-height @var{max-height}
The @code{:max-width} and @code{:max-height} keywords are used for
scaling if the size of the image exceeds these values.  If
@code{:width} is set, it will have precedence over @code{max-width},
and if @code{:height} is set, it will have precedence over
@code{max-height}, but you can otherwise mix these keywords as you
wish.

If both @code{:max-width} and @code{:height} are specified, but
@code{:width} is not, preserving the aspect ratio might require that
width exceeds @code{:max-width}.  If this happens, scaling will use a
smaller value for the height so as to preserve the aspect ratio while
not exceeding @code{:max-width}.  Similarly when both
@code{:max-height} and @code{:width} are specified, but @code{:height}
is not.  For example, if you have a 200x100 image and specify that
@code{:width} should be 400 and @code{:max-height} should be 150,
you'll end up with an image that is 300x150: Preserving the aspect
ratio and not exceeding the ``max'' setting.  This combination of
parameters is a useful way of saying ``display this image as large as
possible, but no larger than the available display area''.

@item :scale @var{scale}
This should be a number, where values higher than 1 means to increase
the size, and lower means to decrease the size, by multiplying both
the width and height.  For instance, a value of 0.25 will make the
image a quarter size of what it originally was.  If the scaling makes
the image larger than specified by @code{:max-width} or
@code{:max-height}, the resulting size will not exceed those two
values.  If both @code{:scale} and @code{:height}/@code{:width} are
specified, the height/width will be adjusted by the specified scaling
factor.

@item :rotation @var{angle}
Specifies a rotation angle in degrees.  Only multiples of 90 degrees
are supported, unless the image type is @code{imagemagick}.  Positive
values rotate clockwise, negative values counter-clockwise.  Rotation
is performed after scaling and cropping.

@item :index @var{frame}
@xref{Multi-Frame Images}.

@item :conversion @var{algorithm}
This specifies a conversion algorithm that should be applied to the
image before it is displayed; the value, @var{algorithm}, specifies
which algorithm.

@table @code
@item laplace
@itemx emboss
Specifies the Laplace edge detection algorithm, which blurs out small
differences in color while highlighting larger differences.  People
sometimes consider this useful for displaying the image for a
disabled button.

@item (edge-detection :matrix @var{matrix} :color-adjust @var{adjust})
@cindex edge detection, images
Specifies a general edge-detection algorithm.  @var{matrix} must be
either a nine-element list or a nine-element vector of numbers.  A pixel
at position @math{x/y} in the transformed image is computed from
original pixels around that position.  @var{matrix} specifies, for each
pixel in the neighborhood of @math{x/y}, a factor with which that pixel
will influence the transformed pixel; element @math{0} specifies the
factor for the pixel at @math{x-1/y-1}, element @math{1} the factor for
the pixel at @math{x/y-1} etc., as shown below:
@iftex
@tex
$$\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \cr
   x-1/y  &   x/y &    x+1/y \cr
   x-1/y+1&   x/y+1 &  x+1/y+1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (x-1/y-1  x/y-1  x+1/y-1
   x-1/y    x/y    x+1/y
   x-1/y+1  x/y+1  x+1/y+1)
@end display
@end ifnottex

The resulting pixel is computed from the color intensity of the color
resulting from summing up the RGB values of surrounding pixels,
multiplied by the specified factors, and dividing that sum by the sum
of the factors' absolute values.

Laplace edge-detection currently uses a matrix of
@iftex
@tex
$$\pmatrix{1 & 0 & 0 \cr
   0&  0 &  0 \cr
   0 & 0 & -1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (1  0  0
   0  0  0
   0  0 -1)
@end display
@end ifnottex

Emboss edge-detection uses a matrix of
@iftex
@tex
$$\pmatrix{ 2 & -1 &  0 \cr
   -1 &  0 &  1 \cr
    0  & 1 & -2 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  ( 2 -1  0
   -1  0  1
    0  1 -2)
@end display
@end ifnottex

@item disabled
Specifies transforming the image so that it looks disabled.
@end table

@item :mask @var{mask}
If @var{mask} is @code{heuristic} or @code{(heuristic @var{bg})}, build
a clipping mask for the image, so that the background of a frame is
visible behind the image.  If @var{bg} is not specified, or if @var{bg}
is @code{t}, determine the background color of the image by looking at
the four corners of the image, assuming the most frequently occurring
color from the corners is the background color of the image.  Otherwise,
@var{bg} must be a list @code{(@var{red} @var{green} @var{blue})}
specifying the color to assume for the background of the image.

If @var{mask} is @code{nil}, remove a mask from the image, if it has
one.  Images in some formats include a mask which can be removed by
specifying @code{:mask nil}.

@item :pointer @var{shape}
This specifies the pointer shape when the mouse pointer is over this
image.  @xref{Pointer Shape}, for available pointer shapes.

@item :map @var{map}
@cindex image maps
This associates an image map of @dfn{hot spots} with this image.

An image map is an alist where each element has the format
@code{(@var{area} @var{id} @var{plist})}.  An @var{area} is specified
as either a rectangle, a circle, or a polygon.

A rectangle is a cons
@code{(rect . ((@var{x0} . @var{y0}) . (@var{x1} . @var{y1})))}
which specifies the pixel coordinates of the upper left and bottom right
corners of the rectangle area.

A circle is a cons
@code{(circle . ((@var{x0} . @var{y0}) . @var{r}))}
which specifies the center and the radius of the circle; @var{r} may
be a float or integer.

A polygon is a cons
@code{(poly . [@var{x0} @var{y0} @var{x1} @var{y1} ...])}
where each pair in the vector describes one corner in the polygon.

When the mouse pointer lies on a hot-spot area of an image, the
@var{plist} of that hot-spot is consulted; if it contains a @code{help-echo}
property, that defines a tool-tip for the hot-spot, and if it contains
a @code{pointer} property, that defines the shape of the mouse cursor when
it is on the hot-spot.
@xref{Pointer Shape}, for available pointer shapes.

When you click the mouse when the mouse pointer is over a hot-spot, an
event is composed by combining the @var{id} of the hot-spot with the
mouse event; for instance, @code{[area4 mouse-1]} if the hot-spot's
@var{id} is @code{area4}.
@end table

@defun image-mask-p spec &optional frame
This function returns @code{t} if image @var{spec} has a mask bitmap.
@var{frame} is the frame on which the image will be displayed.
@var{frame} @code{nil} or omitted means to use the selected frame
(@pxref{Input Focus}).
@end defun

@defun image-transforms-p &optional frame
This function returns non-@code{nil} if @var{frame} supports image
scaling and rotation.  @var{frame} @code{nil} or omitted means to use
the selected frame (@pxref{Input Focus}).  The returned list includes
symbols that indicate which image transform operations are supported:

@table @code
@item scale
Image scaling is supported by @var{frame} via the @code{:scale},
@code{:width}, @code{:height}, @code{:max-width}, and
@code{:max-height} properties.
@item rotate90
Image rotation is supported by @var{frame} if the rotation angle is an
integral multiple of 90 degrees.
@end table

If image transforms are not supported, @code{:rotation}, @code{:crop},
@code{:width}, @code{:height}, @code{:scale}, @code{:max-width} and
@code{:max-height} will only be usable through ImageMagick, if
available (@pxref{ImageMagick Images}).
@end defun
@node XBM Images
@subsection XBM Images
@cindex XBM

  To use XBM format, specify @code{xbm} as the image type.  This image
format doesn't require an external library, so images of this type are
always supported.

  Additional image properties supported for the @code{xbm} image type are:

@table @code
@item :foreground @var{foreground}
The value, @var{foreground}, should be a string specifying the image
foreground color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 1.  The default is the frame's
foreground color.

@item :background @var{background}
The value, @var{background}, should be a string specifying the image
background color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 0.  The default is the frame's
background color.
@end table

  If you specify an XBM image using data within Emacs instead of an
external file, use the following three properties:

@table @code
@item :data @var{data}
The value, @var{data}, specifies the contents of the image.
There are three formats you can use for @var{data}:

@itemize @bullet
@item
A vector of strings or bool-vectors, each specifying one line of the
image.  Do specify @code{:height} and @code{:width}.

@item
A string containing the same byte sequence as an XBM file would contain.
You must not specify @code{:height} and @code{:width} in this case,
because omitting them is what indicates the data has the format of an
XBM file.  The file contents specify the height and width of the image.

@item
A string or a bool-vector containing the bits of the image (plus
perhaps some extra bits at the end that will not be used).  It should
contain at least @w{@code{@var{stride} * @var{height}}} bits, where
@var{stride} is the smallest multiple of 8 greater than or equal to
the width of the image.  In this case, you should specify
@code{:height}, @code{:width} and @code{:stride}, both to indicate
that the string contains just the bits rather than a whole XBM file,
and to specify the size of the image.
@end itemize

@item :width @var{width}
The value, @var{width}, specifies the width of the image, in pixels.

@item :height @var{height}
The value, @var{height}, specifies the height of the image, in pixels.

@item :stride @var{stride}
The number of bool vector entries stored for each row; the smallest
multiple of 8 greater than or equal to @var{width}.
@end table

@node XPM Images
@subsection XPM Images
@cindex XPM

  To use XPM format, specify @code{xpm} as the image type.  The
additional image property @code{:color-symbols} is also meaningful with
the @code{xpm} image type:

@table @code
@item :color-symbols @var{symbols}
The value, @var{symbols}, should be an alist whose elements have the
form @code{(@var{name} . @var{color})}.  In each element, @var{name} is
the name of a color as it appears in the image file, and @var{color}
specifies the actual color to use for displaying that name.
@end table

@node ImageMagick Images
@subsection ImageMagick Images
@cindex ImageMagick images
@cindex images, support for more formats

  If your Emacs build has ImageMagick support, you can use the
ImageMagick library to load many image formats (@pxref{File
Conveniences,,, emacs, The GNU Emacs Manual}).  The image type symbol
for images loaded via ImageMagick is @code{imagemagick}, regardless of
the actual underlying image format.

To check for ImageMagick support, use the following:

@lisp
(image-type-available-p 'imagemagick)
@end lisp

@defun imagemagick-types
This function returns a list of image file extensions supported by the
current ImageMagick installation.  Each list element is a symbol
representing an internal ImageMagick name for an image type, such as
@code{BMP} for @file{.bmp} images.
@end defun

@defopt imagemagick-enabled-types
The value of this variable is a list of ImageMagick image types which
Emacs may attempt to render using ImageMagick.  Each list element
should be one of the symbols in the list returned by
@code{imagemagick-types}, or an equivalent string.  Alternatively, a
value of @code{t} enables ImageMagick for all possible image types.
Regardless of the value of this variable,
@code{imagemagick-types-inhibit} (see below) takes precedence.
@end defopt

@defopt imagemagick-types-inhibit
The value of this variable lists the ImageMagick image types which
should never be rendered using ImageMagick, regardless of the value of
@code{imagemagick-enabled-types}.  A value of @code{t} disables
ImageMagick entirely.
@end defopt

@defvar image-format-suffixes
This variable is an alist mapping image types to file name extensions.
Emacs uses this in conjunction with the @code{:format} image property
(see below) to give a hint to the ImageMagick library as to the type
of an image.  Each element has the form @code{(@var{type}
@var{extension})}, where @var{type} is a symbol specifying an image
content-type, and @var{extension} is a string that specifies the
associated file name extension.
@end defvar

  Images loaded with ImageMagick support the following additional
image descriptor properties:

@table @code
@item :background @var{background}
@var{background}, if non-@code{nil}, should be a string specifying a
color, which is used as the image's background color if the image
supports transparency.  If the value is @code{nil}, it defaults to the
frame's background color.

@item :format @var{type}
The value, @var{type}, should be a symbol specifying the type of the
image data, as found in @code{image-format-suffixes}.  This is used
when the image does not have an associated file name, to provide a
hint to ImageMagick to help it detect the image type.

@item :crop @var{geometry}
The value of @var{geometry} should be a list of the form
@code{(@var{width} @var{height} @var{x} @var{y})}.  @var{width} and
@var{height} specify the width and height of the cropped image.  If
@var{x} is a positive number it specifies the offset of the cropped
area from the left of the original image, and if negative the offset
from the right.  If @var{y} is a positive number it specifies the
offset from the top of the original image, and if negative from the
bottom.  If @var{x} or @var{y} are @code{nil} or unspecified the crop
area will be centered on the original image.

If the crop area is outside or overlaps the edge of the image it will
be reduced to exclude any areas outside of the image.  This means it
is not possible to use @code{:crop} to increase the size of the image
by entering large @var{width} or @var{height} values.

Cropping is performed after scaling but before rotation.
@end table

@node SVG Images
@subsection SVG Images
@cindex SVG images

SVG (Scalable Vector Graphics) is an XML format for specifying images.
If your Emacs build has SVG support, you can create and manipulate
these images with the following functions from the @file{svg.el}
library.

@defun svg-create width height &rest args
Create a new, empty SVG image with the specified dimensions.
@var{args} is an argument plist with you can specify following:

@table @code
@item :stroke-width
The default width (in pixels) of any lines created.

@item :stroke
The default stroke color on any lines created.
@end table

@cindex SVG object
This function returns an @dfn{SVG object}, a Lisp data structure that
specifies an SVG image, and all the following functions work on that
structure.  The argument @var{svg} in the following functions
specifies such an SVG object.
@end defun

@defun svg-gradient svg id type stops
Create a gradient in @var{svg} with identifier @var{id}.  @var{type}
specifies the gradient type, and can be either @code{linear} or
@code{radial}.  @var{stops} is a list of percentage/color pairs.

The following will create a linear gradient that goes from red at the
start, to green 25% of the way, to blue at the end:

@lisp
(svg-gradient svg "gradient1" 'linear
              '((0 . "red") (25 . "green") (100 . "blue")))
@end lisp

The gradient created (and inserted into the SVG object) can later be
used by all functions that create shapes.
@end defun

All the following functions take an optional list of keyword
parameters that alter the various attributes from their default
values.  Valid attributes include:

@table @code
@item :stroke-width
The width (in pixels) of lines drawn, and outlines around solid
shapes.

@item :stroke-color
The color of lines drawn, and outlines around solid shapes.

@item :fill-color
The color used for solid shapes.

@item :id
The identified of the shape.

@item :gradient
If given, this should be the identifier of a previously defined
gradient object.

@item :clip-path
Identifier of a clip path.
@end table

@defun svg-rectangle svg x y width height &rest args
Add to @var{svg} a rectangle whose upper left corner is at
position @var{x}/@var{y} and whose size is @var{width}/@var{height}.

@lisp
(svg-rectangle svg 100 100 500 500 :gradient "gradient1")
@end lisp
@end defun

@defun svg-circle svg x y radius &rest args
Add to @var{svg} a circle whose center is at @var{x}/@var{y} and whose
radius is @var{radius}.
@end defun

@defun svg-ellipse svg x y x-radius y-radius &rest args
Add to @var{svg} an ellipse whose center is at @var{x}/@var{y}, and
whose horizontal radius is @var{x-radius} and the vertical radius is
@var{y-radius}.
@end defun

@defun svg-line svg x1 y1 x2 y2 &rest args
Add to @var{svg} a line that starts at @var{x1}/@var{y1} and extends
to @var{x2}/@var{y2}.
@end defun

@defun svg-polyline svg points &rest args
Add to @var{svg} a multiple-segment line (a.k.a.@: ``polyline'') that
goes through @var{points}, which is a list of X/Y position pairs.

@lisp
(svg-polyline svg '((200 . 100) (500 . 450) (80 . 100))
              :stroke-color "green")
@end lisp
@end defun

@defun svg-polygon svg points &rest args
Add a polygon to @var{svg} where @var{points} is a list of X/Y pairs
that describe the outer circumference of the polygon.

@lisp
(svg-polygon svg '((100 . 100) (200 . 150) (150 . 90))
             :stroke-color "blue" :fill-color "red")
@end lisp
@end defun

@defun svg-path svg commands &rest args
Add the outline of a shape to @var{svg} according to @var{commands},
see @ref{SVG Path Commands}.

Coordinates by default are absolute.  To use coordinates relative to
the last position, or -- initially -- to the origin, set the attribute
@var{:relative} to @code{t}.  This attribute can be specified for the
function or for individual commands.  If specified for the function,
then all commands use relative coordinates by default.  To make an
individual command use absolute coordinates, set @var{:relative} to
@code{nil}.

@lisp
(svg-path svg
	  '((moveto ((100 . 100)))
	    (lineto ((200 . 0) (0 . 200) (-200 . 0)))
	    (lineto ((100 . 100)) :relative nil))
	  :stroke-color "blue"
	  :fill-color "lightblue"
	  :relative t)
@end lisp
@end defun

@defun svg-text svg text &rest args
Add the specified @var{text} to @var{svg}.

@lisp
(svg-text
 svg "This is a text"
 :font-size "40"
 :font-weight "bold"
 :stroke "black"
 :fill "white"
 :font-family "impact"
 :letter-spacing "4pt"
 :x 300
 :y 400
 :stroke-width 1)
@end lisp
@end defun

@defun svg-embed svg image image-type datap &rest args
Add an embedded (raster) image to @var{svg}.  If @var{datap} is
@code{nil}, @var{image} should be a file name; otherwise it should be a
string containing the image data as raw bytes.  @var{image-type} should be a
@acronym{MIME} image type, for instance @code{"image/jpeg"}.

@lisp
(svg-embed svg "~/rms.jpg" "image/jpeg" nil
           :width "100px" :height "100px"
           :x "50px" :y "75px")
@end lisp
@end defun

@defun svg-clip-path svg &rest args
Add a clipping path to @var{svg}.  If applied to a shape via the
@var{:clip-path} property, parts of that shape which lie outside of
the clipping path are not drawn.

@lisp
(let ((clip-path (svg-clip-path svg :id "foo")))
  (svg-circle clip-path 200 200 175))
(svg-rectangle svg 50 50 300 300
               :fill-color "red"
               :clip-path "url(#foo)")
@end lisp
@end defun

@defun svg-node svg tag &rest args
Add the custom node @var{tag} to @var{svg}.

@lisp
(svg-node svg
          'rect
          :width 300 :height 200 :x 50 :y 100 :fill-color "green")
@end lisp
@end defun

@defun svg-remove svg id
Remove the element with identifier @code{id} from the @code{svg}.
@end defun

@defun svg-image svg
Finally, the @code{svg-image} takes an SVG object as its argument and
returns an image object suitable for use in functions like
@code{insert-image}.
@end defun

Here's a complete example that creates and inserts an image with a
circle:

@lisp
(let ((svg (svg-create 400 400 :stroke-width 10)))
  (svg-gradient svg "gradient1" 'linear '((0 . "red") (100 . "blue")))
  (svg-circle svg 200 200 100 :gradient "gradient1"
                  :stroke-color "green")
  (insert-image (svg-image svg)))
@end lisp


@subsubheading SVG Path Commands

@cindex svg path commands
@anchor{SVG Path Commands}
@dfn{SVG paths} allow creation of complex images by combining lines,
curves, arcs, and other basic shapes.  The functions described below
allow invoking SVG path commands from a Lisp program.

@deffn Command moveto points
Move the pen to the first point in @var{points}.  Additional points
are connected with lines.  @var{points} is a list of X/Y coordinate
pairs.  Subsequent @command{moveto} commands represent the start of a
new @dfn{subpath}.

@lisp
(svg-path svg '((moveto ((200 . 100) (100 . 200) (0 . 100))))
          :fill "white" :stroke "black")
@end lisp
@end deffn

@deffn Command closepath
End the current subpath by connecting it back to its initial point.  A
line is drawn along the connection.

@lisp
(svg-path svg '((moveto ((200 . 100) (100 . 200) (0 . 100)))
                (closepath)
                (moveto ((75 . 125) (100 . 150) (125 . 125)))
                (closepath))
          :fill "red" :stroke "black")
@end lisp
@end deffn

@deffn Command lineto points
Draw a line from the current point to the first element in
@var{points}, a list of X/Y position pairs.  If more than one point is
specified, draw a polyline.
@lisp
(svg-path svg '((moveto ((200 . 100)))
                (lineto ((100 . 200) (0 . 100))))
          :fill "yellow" :stroke "red")
@end lisp
@end deffn

@deffn Command horizontal-lineto x-coordinates
Draw a horizontal line from the current point to the first element in
@var{x-coordinates}.  Specifying multiple coordinates is possible,
although usually this doesn’t make sense.

@lisp
(svg-path svg '((moveto ((100 . 200)))
                (horizontal-lineto (300)))
          :stroke "green")
@end lisp
@end deffn

@deffn Command vertical-lineto y-coordinates
Draw vertical lines.

@lisp
(svg-path svg '((moveto ((200 . 100)))
                (vertical-lineto (300)))
          :stroke "green")
@end lisp
@end deffn

@deffn Command curveto coordinate-sets
Using the first element in @var{coordinate-sets}, draw a cubic Bézier
curve from the current point.  If there are multiple coordinate sets,
draw a polybezier.  Each coordinate set is a list of the form
@code{(@var{x1} @var{y1} @var{x2} @var{y2} @var{x} @var{y})}, where
@w{(@var{x}, @var{y})} is the curve’s end point.  @w{(@var{x1},
@var{y1})} and @w{(@var{x2}, @var{y2})} are control points at the
beginning and at the end, respectively.

@lisp
(svg-path svg '((moveto ((100 . 100)))
                (curveto ((200 100 100 200 200 200)
                          (300 200 0 100 100 100))))
          :fill "transparent" :stroke "red")
@end lisp
@end deffn

@deffn Command smooth-curveto coordinate-sets
Using the first element in @var{coordinate-sets}, draw a cubic Bézier
curve from the current point.  If there are multiple coordinate sets,
draw a polybezier.  Each coordinate set is a list of the form
@code{(@var{x2} @var{y2} @var{x} @var{y})}, where @w{(@var{x},
@var{y})} is the curve’s end point and @w{(@var{x2}, @var{y2})} is the
corresponding control point.  The first control point is the
reflection of the second control point of the previous command
relative to the current point, if that command was @command{curveto}
or @command{smooth-curveto}.  Otherwise the first control point
coincides with the current point.

@lisp
(svg-path svg '((moveto ((100 . 100)))
                (curveto ((200 100 100 200 200 200)))
                (smooth-curveto ((0 100 100 100))))
          :fill "transparent" :stroke "blue")
@end lisp
@end deffn

@deffn Command quadratic-bezier-curveto coordinate-sets
Using the first element in @var{coordinate-sets}, draw a quadratic
Bézier curve from the current point.  If there are multiple coordinate
sets, draw a polybezier.  Each coordinate set is a list of the form
@code{(@var{x1} @var{y1} @var{x} @var{y})}, where @w{(@var{x},
@var{y})} is the curve’s end point and @w{(@var{x1}, @var{y1})} is the
control point.

@lisp
(svg-path svg '((moveto ((200 . 100)))
                (quadratic-bezier-curveto ((300 100 300 200)))
                (quadratic-bezier-curveto ((300 300 200 300)))
                (quadratic-bezier-curveto ((100 300 100 200)))
                (quadratic-bezier-curveto ((100 100 200 100))))
          :fill "transparent" :stroke "pink")
@end lisp
@end deffn

@deffn Command smooth-quadratic-bezier-curveto coordinate-sets
Using the first element in @var{coordinate-sets}, draw a quadratic
Bézier curve from the current point.  If there are multiple coordinate
sets, draw a polybezier.  Each coordinate set is a list of the form
@code{(@var{x} @var{y})}, where @w{(@var{x}, @var{y})} is the curve’s
end point.  The control point is the reflection of the control point
of the previous command relative to the current point, if that command
was @command{quadratic-bezier-curveto} or
@command{smooth-quadratic-bezier-curveto}.  Otherwise the control
point coincides with the current point.

@lisp
(svg-path svg '((moveto ((200 . 100)))
                (quadratic-bezier-curveto ((300 100 300 200)))
                (smooth-quadratic-bezier-curveto ((200 300)))
                (smooth-quadratic-bezier-curveto ((100 200)))
                (smooth-quadratic-bezier-curveto ((200 100))))
          :fill "transparent" :stroke "lightblue")
@end lisp
@end deffn

@deffn Command elliptical-arc coordinate-sets
Using the first element in @var{coordinate-sets}, draw an elliptical
arc from the current point.  If there are multiple coordinate sets,
draw a sequence of elliptical arcs.  Each coordinate set is a list of
the form @code{(@var{rx} @var{ry} @var{x} @var{y})}, where
@w{(@var{x}, @var{y})} is the end point of the ellipse, and
@w{(@var{rx}, @var{ry})} are its radii.  Attributes may be appended to
the list:

@table @code
@item :x-axis-rotation
The angle in degrees by which the x-axis of the ellipse is rotated
relative to the x-axis of the current coordinate system.

@item :large-arc
If set to @code{t}, draw an arc sweep greater than or equal to 180
degrees.  Otherwise, draw an arc sweep smaller than or equal to 180
degrees.

@item :sweep
If set to @code{t}, draw an arc in @dfn{positive angle direction}.
Otherwise, draw it in @dfn{negative angle direction}.
@end table

@lisp
(svg-path svg '((moveto ((200 . 250)))
                (elliptical-arc ((75 75 200 350))))
          :fill "transparent" :stroke "red")
(svg-path svg '((moveto ((200 . 250)))
                (elliptical-arc ((75 75 200 350 :large-arc t))))
          :fill "transparent" :stroke "green")
(svg-path svg '((moveto ((200 . 250)))
                (elliptical-arc ((75 75 200 350 :sweep t))))
          :fill "transparent" :stroke "blue")
(svg-path svg '((moveto ((200 . 250)))
                (elliptical-arc ((75 75 200 350 :large-arc t
                                     :sweep t))))
          :fill "transparent" :stroke "gray")
(svg-path svg '((moveto ((160 . 100)))
                (elliptical-arc ((40 100 80 0)))
                (elliptical-arc ((40 100 -40 -70
                                     :x-axis-rotation -120)))
                (elliptical-arc ((40 100 -40 70
                                     :x-axis-rotation -240))))
          :stroke "pink" :fill "lightblue"
          :relative t)
@end lisp
@end deffn


@node Other Image Types
@subsection Other Image Types
@cindex PBM

  For PBM images, specify image type @code{pbm}.  Color, gray-scale and
monochromatic images are supported.   For mono PBM images, two additional
image properties are supported.

@table @code
@item :foreground @var{foreground}
The value, @var{foreground}, should be a string specifying the image
foreground color, or @code{nil} for the default color.  This color is
used for each pixel in the PBM that is 1.  The default is the frame's
foreground color.

@item :background @var{background}
The value, @var{background}, should be a string specifying the image
background color, or @code{nil} for the default color.  This color is
used for each pixel in the PBM that is 0.  The default is the frame's
background color.
@end table

@noindent
The remaining image types that Emacs can support are:

@table @asis
@item GIF
Image type @code{gif}.
Supports the @code{:index} property.  @xref{Multi-Frame Images}.

@item JPEG
Image type @code{jpeg}.

@item PNG
Image type @code{png}.

@item TIFF
Image type @code{tiff}.
Supports the @code{:index} property.  @xref{Multi-Frame Images}.
@end table

@node Defining Images
@subsection Defining Images
@cindex define image

  The functions @code{create-image}, @code{defimage} and
@code{find-image} provide convenient ways to create image descriptors.

@defun create-image file-or-data &optional type data-p &rest props
This function creates and returns an image descriptor which uses the
data in @var{file-or-data}.  @var{file-or-data} can be a file name or
a string containing the image data; @var{data-p} should be @code{nil}
for the former case, non-@code{nil} for the latter case.

The optional argument @var{type} is a symbol specifying the image type.
If @var{type} is omitted or @code{nil}, @code{create-image} tries to
determine the image type from the file's first few bytes, or else
from the file's name.

The remaining arguments, @var{props}, specify additional image
properties---for example,

@c ':heuristic-mask' is not documented?
@example
(create-image "foo.xpm" 'xpm nil :heuristic-mask t)
@end example

The function returns @code{nil} if images of this type are not
supported.  Otherwise it returns an image descriptor.
@end defun

@defmac defimage symbol specs &optional doc
This macro defines @var{symbol} as an image name.  The arguments
@var{specs} is a list which specifies how to display the image.
The third argument, @var{doc}, is an optional documentation string.

Each argument in @var{specs} has the form of a property list, and each
one should specify at least the @code{:type} property and either the
@code{:file} or the @code{:data} property.  The value of @code{:type}
should be a symbol specifying the image type, the value of
@code{:file} is the file to load the image from, and the value of
@code{:data} is a string containing the actual image data.  Here is an
example:

@example
(defimage test-image
  ((:type xpm :file "~/test1.xpm")
   (:type xbm :file "~/test1.xbm")))
@end example

@code{defimage} tests each argument, one by one, to see if it is
usable---that is, if the type is supported and the file exists.  The
first usable argument is used to make an image descriptor which is
stored in @var{symbol}.

If none of the alternatives will work, then @var{symbol} is defined
as @code{nil}.
@end defmac

@defun image-property image property
Return the value of @var{property} in @var{image}.  Properties can be
set by using @code{setf}.  Setting a property to @code{nil} will
remove the property from the image.
@end defun

@defun find-image specs
This function provides a convenient way to find an image satisfying one
of a list of image specifications @var{specs}.

Each specification in @var{specs} is a property list with contents
depending on image type.  All specifications must at least contain the
properties @code{:type @var{type}} and either @w{@code{:file @var{file}}}
or @w{@code{:data @var{data}}}, where @var{type} is a symbol specifying
the image type, e.g., @code{xbm}, @var{file} is the file to load the
image from, and @var{data} is a string containing the actual image data.
The first specification in the list whose @var{type} is supported, and
@var{file} exists, is used to construct the image specification to be
returned.  If no specification is satisfied, @code{nil} is returned.

The image is looked for in @code{image-load-path}.
@end defun

@defopt image-load-path
This variable's value is a list of locations in which to search for
image files.  If an element is a string or a variable symbol whose
value is a string, the string is taken to be the name of a directory
to search.  If an element is a variable symbol whose value is a list,
that is taken to be a list of directories to search.

The default is to search in the @file{images} subdirectory of the
directory specified by @code{data-directory}, then the directory
specified by @code{data-directory}, and finally in the directories in
@code{load-path}.  Subdirectories are not automatically included in
the search, so if you put an image file in a subdirectory, you have to
supply the subdirectory explicitly.  For example, to find the
image @file{images/foo/bar.xpm} within @code{data-directory}, you
should specify the image as follows:

@example
(defimage foo-image '((:type xpm :file "foo/bar.xpm")))
@end example
@end defopt

@defun image-load-path-for-library library image &optional path no-error
This function returns a suitable search path for images used by the
Lisp package @var{library}.

The function searches for @var{image} first using @code{image-load-path},
excluding @file{@code{data-directory}/images}, and then in
@code{load-path}, followed by a path suitable for @var{library}, which
includes @file{../../etc/images} and @file{../etc/images} relative to
the library file itself, and finally in
@file{@code{data-directory}/images}.

Then this function returns a list of directories which contains first
the directory in which @var{image} was found, followed by the value of
@code{load-path}.  If @var{path} is given, it is used instead of
@code{load-path}.

If @var{no-error} is non-@code{nil} and a suitable path can't be
found, don't signal an error.  Instead, return a list of directories as
before, except that @code{nil} appears in place of the image directory.

Here is an example of using @code{image-load-path-for-library}:

@example
(defvar image-load-path) ; shush compiler
(let* ((load-path (image-load-path-for-library
                    "mh-e" "mh-logo.xpm"))
       (image-load-path (cons (car load-path)
                              image-load-path)))
  (mh-tool-bar-folder-buttons-init))
@end example
@end defun

@vindex image-scaling-factor
Images are automatically scaled when created based on the
@code{image-scaling-factor} variable.  The value is either a floating
point number (where numbers higher than 1 means to increase the size
and lower means to shrink the size), or the symbol @code{auto}, which
will compute a scaling factor based on the font pixel size.

@node Showing Images
@subsection Showing Images
@cindex show image

  You can use an image descriptor by setting up the @code{display}
property yourself, but it is easier to use the functions in this
section.

@defun insert-image image &optional string area slice
This function inserts @var{image} in the current buffer at point.  The
value @var{image} should be an image descriptor; it could be a value
returned by @code{create-image}, or the value of a symbol defined with
@code{defimage}.  The argument @var{string} specifies the text to put
in the buffer to hold the image.  If it is omitted or @code{nil},
@code{insert-image} uses @code{" "} by default.

The argument @var{area} specifies whether to put the image in a margin.
If it is @code{left-margin}, the image appears in the left margin;
@code{right-margin} specifies the right margin.  If @var{area} is
@code{nil} or omitted, the image is displayed at point within the
buffer's text.

The argument @var{slice} specifies a slice of the image to insert.  If
@var{slice} is @code{nil} or omitted the whole image is inserted.
Otherwise, @var{slice} is a list @code{(@var{x} @var{y} @var{width}
@var{height})} which specifies the @var{x} and @var{y} positions and
@var{width} and @var{height} of the image area to insert.  Integer
values are in units of pixels.  A floating-point number in the range
0.0--1.0 stands for that fraction of the width or height of the entire
image.

Internally, this function inserts @var{string} in the buffer, and gives
it a @code{display} property which specifies @var{image}.  @xref{Display
Property}.
@end defun

@cindex slice, image
@cindex image slice
@defun insert-sliced-image image &optional string area rows cols
This function inserts @var{image} in the current buffer at point, like
@code{insert-image}, but splits the image into @var{rows}x@var{cols}
equally sized slices.

Emacs displays each slice as a
separate image, and allows more intuitive scrolling up/down, instead of
jumping up/down the entire image when paging through a buffer that
displays (large) images.
@end defun

@defun put-image image pos &optional string area
This function puts image @var{image} in front of @var{pos} in the
current buffer.  The argument @var{pos} should be an integer or a
marker.  It specifies the buffer position where the image should appear.
The argument @var{string} specifies the text that should hold the image
as an alternative to the default.

The argument @var{image} must be an image descriptor, perhaps returned
by @code{create-image} or stored by @code{defimage}.

The argument @var{area} specifies whether to put the image in a margin.
If it is @code{left-margin}, the image appears in the left margin;
@code{right-margin} specifies the right margin.  If @var{area} is
@code{nil} or omitted, the image is displayed at point within the
buffer's text.

Internally, this function creates an overlay, and gives it a
@code{before-string} property containing text that has a @code{display}
property whose value is the image.  (Whew!)
@end defun

@defun remove-images start end &optional buffer
This function removes images in @var{buffer} between positions
@var{start} and @var{end}.  If @var{buffer} is omitted or @code{nil},
images are removed from the current buffer.

This removes only images that were put into @var{buffer} the way
@code{put-image} does it, not images that were inserted with
@code{insert-image} or in other ways.
@end defun

@defun image-size spec &optional pixels frame
@cindex size of image
This function returns the size of an image as a pair
@w{@code{(@var{width} . @var{height})}}.  @var{spec} is an image
specification.  @var{pixels} non-@code{nil} means return sizes measured
in pixels, otherwise return sizes measured in the default character size
of @var{frame} (@pxref{Frame Font}).  @var{frame} is the frame on which
the image will be displayed.  @var{frame} @code{nil} or omitted means
use the selected frame (@pxref{Input Focus}).
@end defun

@defvar max-image-size
This variable is used to define the maximum size of image that Emacs
will load.  Emacs will refuse to load (and display) any image that is
larger than this limit.

If the value is an integer, it directly specifies the maximum
image height and width, measured in pixels.  If it is floating
point, it specifies the maximum image height and width
as a ratio to the frame height and width.  If the value is
non-numeric, there is no explicit limit on the size of images.

The purpose of this variable is to prevent unreasonably large images
from accidentally being loaded into Emacs.  It only takes effect the
first time an image is loaded.  Once an image is placed in the image
cache, it can always be displayed, even if the value of
@code{max-image-size} is subsequently changed (@pxref{Image Cache}).
@end defvar

Images inserted with the insertion functions above also get a local
keymap installed in the text properties (or overlays) that span the
displayed image.  This keymap defines the following commands:

@table @kbd
@item +
Increase the image size (@code{image-increase-size}).  A prefix value
of @samp{4} means to increase the size by 40%.  The default is 20%.

@item -
Decrease the image size (@code{image-increase-size}).  A prefix value
of @samp{4} means to decrease the size by 40%.  The default is 20%.

@item r
Rotate the image by 90 degrees clockwise (@code{image-rotate}).
A prefix means to rotate by 90 degrees counter-clockwise instead.

@item o
Save the image to a file (@code{image-save}).
@end table

@node Multi-Frame Images
@subsection Multi-Frame Images
@cindex multi-frame images

@cindex animation
@cindex image animation
@cindex image frames
Some image files can contain more than one image.  We say that there
are multiple ``frames'' in the image.  At present, Emacs supports
multiple frames for GIF, TIFF, and certain ImageMagick formats such as
DJVM@.

The frames can be used either to represent multiple pages (this is
usually the case with multi-frame TIFF files, for example), or to
create animation (usually the case with multi-frame GIF files).

A multi-frame image has a property @code{:index}, whose value is an
integer (counting from 0) that specifies which frame is being displayed.

@defun image-multi-frame-p image
This function returns non-@code{nil} if @var{image} contains more than
one frame.  The actual return value is a cons @code{(@var{nimages}
. @var{delay})}, where @var{nimages} is the number of frames and
@var{delay} is the delay in seconds between them, or @code{nil}
if the image does not specify a delay.  Images that are intended to be
animated usually specify a frame delay, whereas ones that are intended
to be treated as multiple pages do not.
@end defun

@defun image-current-frame image
This function returns the index of the current frame number for
@var{image}, counting from 0.
@end defun

@defun image-show-frame image n &optional nocheck
This function switches @var{image} to frame number @var{n}.  It
replaces a frame number outside the valid range with that of the end
of the range, unless @var{nocheck} is non-@code{nil}.  If @var{image}
does not contain a frame with the specified number, the image displays
as a hollow box.
@end defun

@defun image-animate image &optional index limit
This function animates @var{image}.  The optional integer @var{index}
specifies the frame from which to start (default 0).  The optional
argument @var{limit} controls the length of the animation.  If omitted
or @code{nil}, the image animates once only; if @code{t} it loops
forever; if a number animation stops after that many seconds.
@end defun

@vindex image-minimum-frame-delay
@vindex image-default-frame-delay
@noindent Animation operates by means of a timer.  Note that Emacs imposes a
minimum frame delay of 0.01 (@code{image-minimum-frame-delay}) seconds.
If the image itself does not specify a delay, Emacs uses
@code{image-default-frame-delay}.

@defun image-animate-timer image
This function returns the timer responsible for animating @var{image},
if there is one.
@end defun


@node Image Cache
@subsection Image Cache
@cindex image cache

  Emacs caches images so that it can display them again more
efficiently.  When Emacs displays an image, it searches the image
cache for an existing image specification @code{equal} to the desired
specification.  If a match is found, the image is displayed from the
cache.  Otherwise, Emacs loads the image normally.

@defun image-flush spec &optional frame
This function removes the image with specification @var{spec} from the
image cache of frame @var{frame}.  Image specifications are compared
using @code{equal}.  If @var{frame} is @code{nil}, it defaults to the
selected frame.  If @var{frame} is @code{t}, the image is flushed on
all existing frames.

In Emacs's current implementation, each graphical terminal possesses an
image cache, which is shared by all the frames on that terminal
(@pxref{Multiple Terminals}).  Thus, refreshing an image in one frame
also refreshes it in all other frames on the same terminal.
@end defun

  One use for @code{image-flush} is to tell Emacs about a change in an
image file.  If an image specification contains a @code{:file}
property, the image is cached based on the file's contents when the
image is first displayed.  Even if the file subsequently changes,
Emacs continues displaying the old version of the image.  Calling
@code{image-flush} flushes the image from the cache, forcing Emacs to
re-read the file the next time it needs to display that image.

  Another use for @code{image-flush} is for memory conservation.  If
your Lisp program creates a large number of temporary images over a
period much shorter than @code{image-cache-eviction-delay} (see
below), you can opt to flush unused images yourself, instead of
waiting for Emacs to do it automatically.

@defun clear-image-cache &optional filter
This function clears an image cache, removing all the images stored in
it.  If @var{filter} is omitted or @code{nil}, it clears the cache for
the selected frame.  If @var{filter} is a frame, it clears the cache
for that frame.  If @var{filter} is @code{t}, all image caches are
cleared.  Otherwise, @var{filter} is taken to be a file name, and all
images associated with that file name are removed from all image
caches.
@end defun

If an image in the image cache has not been displayed for a specified
period of time, Emacs removes it from the cache and frees the
associated memory.

@defvar image-cache-eviction-delay
This variable specifies the number of seconds an image can remain in
the cache without being displayed.  When an image is not displayed for
this length of time, Emacs removes it from the image cache.

Under some circumstances, if the number of images in the cache grows
too large, the actual eviction delay may be shorter than this.

If the value is @code{nil}, Emacs does not remove images from the cache
except when you explicitly clear it.  This mode can be useful for
debugging.
@end defvar

@node Xwidgets
@section Embedded Native Widgets
@cindex xwidget
@cindex embedded widgets
@cindex webkit browser widget

  Emacs is able to display native widgets, such as GTK+ WebKit widgets,
in Emacs buffers when it was built with the necessary support
libraries and is running on a graphical terminal.  To test whether
Emacs supports display of embedded widgets, check that the
@code{xwidget-internal} feature is available (@pxref{Named Features}).

  To display an embedded widget in a buffer, you must first create an
xwidget object, and then use that object as the display specifier
in a @code{display} text or overlay property (@pxref{Display
Property}).

@defun make-xwidget type title width height arguments &optional buffer
This creates and returns an xwidget object.  If
@var{buffer} is omitted or @code{nil}, it defaults to the current
buffer.  If @var{buffer} names a buffer that doesn't exist, it will be
created.  The @var{type} identifies the type of the xwidget component,
it can be one of the following:

@table @code
@item webkit
The WebKit component.
@end table

The @var{width} and @var{height} arguments specify the widget size in
pixels, and @var{title}, a string, specifies its title.
@end defun

@defun xwidgetp object
This function returns @code{t} if @var{object} is an xwidget,
@code{nil} otherwise.
@end defun

@defun xwidget-plist xwidget
This function returns the property list of @var{xwidget}.
@end defun

@defun set-xwidget-plist xwidget plist
This function replaces the property list of @var{xwidget} with a new
property list given by @var{plist}.
@end defun

@defun xwidget-buffer xwidget
This function returns the buffer of @var{xwidget}.
@end defun

@defun get-buffer-xwidgets buffer
This function returns a list of xwidget objects associated with the
@var{buffer}, which can be specified as a buffer object or a name of
an existing buffer, a string.  The value is @code{nil} if @var{buffer}
contains no xwidgets.
@end defun

@defun xwidget-webkit-goto-uri xwidget uri
This function browses the specified @var{uri} in the given
@var{xwidget}.  The @var{uri} is a string that specifies the name of a
file or a URL.  @c FIXME: What else can a URI specify in this context?
@end defun

@defun xwidget-webkit-execute-script xwidget script
This function causes the browser widget specified by @var{xwidget} to
execute the specified JavaScript @code{script}.
@end defun

@defun xwidget-webkit-execute-script-rv xwidget script &optional default
This function executes the specified @var{script} like
@code{xwidget-webkit-execute-script} does, but it also returns the
script's return value as a string.  If @var{script} doesn't return a
value, this function returns @var{default}, or @code{nil} if
@var{default} was omitted.
@end defun

@defun xwidget-webkit-get-title xwidget
This function returns the title of @var{xwidget} as a string.
@end defun

@defun xwidget-resize xwidget width height
This function resizes the specified @var{xwidget} to the size
@var{width}x@var{height} pixels.
@end defun

@defun xwidget-size-request xwidget
This function returns the desired size of @var{xwidget} as a list of
the form @code{(@var{width} @var{height})}.  The dimensions are in
pixels.
@end defun

@defun xwidget-info xwidget
This function returns the attributes of @var{xwidget} as a vector of
the form @code{[@var{type} @var{title} @var{width} @var{height}]}.
The attributes are usually determined by @code{make-xwidget} when the
xwidget is created.
@end defun

@defun set-xwidget-query-on-exit-flag xwidget flag
This function allows you to arrange that Emacs will ask the user for
confirmation before exiting or before killing a buffer that has
@var{xwidget} associated with it.  If @var{flag} is non-@code{nil},
Emacs will query the user, otherwise it will not.
@end defun

@defun xwidget-query-on-exit-flag xwidget
This function returns the current setting of @var{xwidget}s
query-on-exit flag, either @code{t} or @code{nil}.
@end defun

@node 按钮
@section Buttons
@cindex buttons in buffers
@cindex clickable buttons in buffers

  The Button package defines functions for inserting and manipulating
@dfn{buttons} that can be activated with the mouse or via keyboard
commands.  These buttons are typically used for various kinds of
hyperlinks.

  A button is essentially a set of text or overlay properties,
attached to a stretch of text in a buffer.  These properties are
called @dfn{button properties}.  One of these properties, the
@dfn{action property}, specifies a function which is called when the
user invokes the button using the keyboard or the mouse.  The action
function may examine the button and use its other properties as
desired.

  In some ways, the Button package duplicates the functionality in the
Widget package.  @xref{Top, , Introduction, widget, The Emacs Widget
Library}.  The advantage of the Button package is that it is faster,
smaller, and simpler to program.  From the point of view of the user,
the interfaces produced by the two packages are very similar.

@menu
* Button Properties::      Button properties with special meanings.
* Button Types::           Defining common properties for classes of buttons.
* Making Buttons::         Adding buttons to Emacs buffers.
* Manipulating Buttons::   Getting and setting properties of buttons.
* Button Buffer Commands:: Buffer-wide commands and bindings for buttons.
@end menu

@node Button Properties
@subsection Button Properties
@cindex button properties

  Each button has an associated list of properties defining its
appearance and behavior, and other arbitrary properties may be used
for application specific purposes.  The following properties have
special meaning to the Button package:

@table @code
@item action
@kindex action @r{(button property)}
The function to call when the user invokes the button, which is passed
the single argument @var{button}.  By default this is @code{ignore},
which does nothing.

@item mouse-action
@kindex mouse-action @r{(button property)}
This is similar to @code{action}, and when present, will be used
instead of @code{action} for button invocations resulting from
mouse-clicks (instead of the user hitting @key{RET}).  If not
present, mouse-clicks use @code{action} instead.

@item face
@kindex face @r{(button property)}
This is an Emacs face controlling how buttons of this type are
displayed; by default this is the @code{button} face.

@item mouse-face
@kindex mouse-face @r{(button property)}
This is an additional face which controls appearance during
mouse-overs (merged with the usual button face); by default this is
the usual Emacs @code{highlight} face.

@item keymap
@kindex keymap @r{(button property)}
The button's keymap, defining bindings active within the button
region.  By default this is the usual button region keymap, stored
in the variable @code{button-map}, which defines @key{RET} and
@key{mouse-2} to invoke the button.

@item type
@kindex type @r{(button property)}
The button type.  @xref{Button Types}.

@item help-echo
@kindex help-echo @r{(button property)}
A string displayed by the Emacs tooltip help system; by default,
@code{"mouse-2, RET: Push this button"}.  Alternatively, a function
that returns, or a form that evaluates to, a string to be displayed or
@code{nil}.  For details see @ref{Text help-echo}.

The function is called with three arguments, @var{window},
@var{object}, and @var{pos}.  The second argument, @var{object}, is
either the overlay that had the property (for overlay buttons), or the
buffer containing the button (for text property buttons).  The other
arguments have the same meaning as for the special text property
@code{help-echo}.

@item follow-link
@kindex follow-link @r{(button property)}
The @code{follow-link} property, defining how a @key{mouse-1} click
behaves on this button, @xref{Clickable Text}.

@item button
@kindex button @r{(button property)}
All buttons have a non-@code{nil} @code{button} property, which may be useful
in finding regions of text that comprise buttons (which is what the
standard button functions do).
@end table

  There are other properties defined for the regions of text in a
button, but these are not generally interesting for typical uses.

@node Button Types
@subsection Button Types
@cindex button types

  Every button has a @dfn{button type}, which defines default values
for the button's properties.  Button types are arranged in a
hierarchy, with specialized types inheriting from more general types,
so that it's easy to define special-purpose types of buttons for
specific tasks.

@defun define-button-type name &rest properties
Define a button type called @var{name} (a symbol).
The remaining arguments
form a sequence of @var{property value} pairs, specifying default
property values for buttons with this type (a button's type may be set
by giving it a @code{type} property when creating the button, using
the @code{:type} keyword argument).

In addition, the keyword argument @code{:supertype} may be used to
specify a button-type from which @var{name} inherits its default
property values.  Note that this inheritance happens only when
@var{name} is defined; subsequent changes to a supertype are not
reflected in its subtypes.
@end defun

  Using @code{define-button-type} to define default properties for
buttons is not necessary---buttons without any specified type use the
built-in button-type @code{button}---but it is encouraged, since
doing so usually makes the resulting code clearer and more efficient.

@node Making Buttons
@subsection Making Buttons
@cindex making buttons

  Buttons are associated with a region of text, using an overlay or
text properties to hold button-specific information, all of which are
initialized from the button's type (which defaults to the built-in
button type @code{button}).  Like all Emacs text, the appearance of
the button is governed by the @code{face} property; by default (via
the @code{face} property inherited from the @code{button} button-type)
this is a simple underline, like a typical web-page link.

  For convenience, there are two sorts of button-creation functions,
those that add button properties to an existing region of a buffer,
called @code{make-...button}, and those that also insert the button
text, called @code{insert-...button}.

  The button-creation functions all take the @code{&rest} argument
@var{properties}, which should be a sequence of @var{property value}
pairs, specifying properties to add to the button; see @ref{Button
Properties}.  In addition, the keyword argument @code{:type} may be
used to specify a button-type from which to inherit other properties;
see @ref{Button Types}.  Any properties not explicitly specified
during creation will be inherited from the button's type (if the type
defines such a property).

  The following functions add a button using an overlay
(@pxref{Overlays}) to hold the button properties:

@defun make-button beg end &rest properties
This makes a button from @var{beg} to @var{end} in the
current buffer, and returns it.
@end defun

@defun insert-button label &rest properties
This insert a button with the label @var{label} at point,
and returns it.
@end defun

  The following functions are similar, but using text properties
(@pxref{Text Properties}) to hold the button properties.  Such buttons
do not add markers to the buffer, so editing in the buffer does not
slow down if there is an extremely large numbers of buttons.  However,
if there is an existing face text property on the text (e.g., a face
assigned by Font Lock mode), the button face may not be visible.  Both
of these functions return the starting position of the new button.

@defun make-text-button beg end &rest properties
This makes a button from @var{beg} to @var{end} in the current buffer,
using text properties.
@end defun

@defun insert-text-button label &rest properties
This inserts a button with the label @var{label} at point, using text
properties.
@end defun

@node Manipulating Buttons
@subsection Manipulating Buttons
@cindex manipulating buttons

These are functions for getting and setting properties of buttons.
Often these are used by a button's invocation function to determine
what to do.

Where a @var{button} parameter is specified, it means an object
referring to a specific button, either an overlay (for overlay
buttons), or a buffer-position or marker (for text property buttons).
Such an object is passed as the first argument to a button's
invocation function when it is invoked.

@defun button-start button
Return the position at which @var{button} starts.
@end defun

@defun button-end button
Return the position at which @var{button} ends.
@end defun

@defun button-get button prop
Get the property of button @var{button} named @var{prop}.
@end defun

@defun button-put button prop val
Set @var{button}'s @var{prop} property to @var{val}.
@end defun

@defun button-activate button &optional use-mouse-action
Call @var{button}'s @code{action} property (i.e., invoke the function
that is the value of that property, passing it the single argument
@var{button}).  If @var{use-mouse-action} is non-@code{nil}, try to
invoke the button's @code{mouse-action} property instead of
@code{action}; if the button has no @code{mouse-action} property, use
@code{action} as normal.  If the @code{button-data} property is
present in @var{button}, use that as the argument for the
@code{action} function instead of @var{button}.
@end defun

@defun button-label button
Return @var{button}'s text label.
@end defun

@defun button-type button
Return @var{button}'s button-type.
@end defun

@defun button-has-type-p button type
Return @code{t} if @var{button} has button-type @var{type}, or one of
@var{type}'s subtypes.
@end defun

@defun button-at pos
Return the button at position @var{pos} in the current buffer, or
@code{nil}.  If the button at @var{pos} is a text property button, the
return value is a marker pointing to @var{pos}.
@end defun

@defun button-type-put type prop val
Set the button-type @var{type}'s @var{prop} property to @var{val}.
@end defun

@defun button-type-get type prop
Get the property of button-type @var{type} named @var{prop}.
@end defun

@defun button-type-subtype-p type supertype
Return @code{t} if button-type @var{type} is a subtype of @var{supertype}.
@end defun

@node Button Buffer Commands
@subsection Button Buffer Commands
@cindex button buffer commands

These are commands and functions for locating and operating on
buttons in an Emacs buffer.

@code{push-button} is the command that a user uses to actually push
a button, and is bound by default in the button itself to @key{RET}
and to @key{mouse-2} using a local keymap in the button's overlay or
text properties.  Commands that are useful outside the buttons itself,
such as @code{forward-button} and @code{backward-button} are
additionally available in the keymap stored in
@code{button-buffer-map}; a mode which uses buttons may want to use
@code{button-buffer-map} as a parent keymap for its keymap.

If the button has a non-@code{nil} @code{follow-link} property, and
@code{mouse-1-click-follows-link} is set, a quick @key{mouse-1} click
will also activate the @code{push-button} command.
@xref{Clickable Text}.

@deffn Command push-button &optional pos use-mouse-action
Perform the action specified by a button at location @var{pos}.
@var{pos} may be either a buffer position or a mouse-event.  If
@var{use-mouse-action} is non-@code{nil}, or @var{pos} is a
mouse-event (@pxref{Mouse Events}), try to invoke the button's
@code{mouse-action} property instead of @code{action}; if the button
has no @code{mouse-action} property, use @code{action} as normal.
@var{pos} defaults to point, except when @code{push-button} is invoked
interactively as the result of a mouse-event, in which case, the mouse
event's position is used.  If there's no button at @var{pos}, do
nothing and return @code{nil}, otherwise return @code{t}.
@end deffn

@deffn Command forward-button n &optional wrap display-message no-error
Move to the @var{n}th next button, or @var{n}th previous button if
@var{n} is negative.  If @var{n} is zero, move to the start of any
button at point.  If @var{wrap} is non-@code{nil}, moving past either
end of the buffer continues from the other end.  If
@var{display-message} is non-@code{nil}, the button's help-echo string
is displayed.  Any button with a non-@code{nil} @code{skip} property
is skipped over.  Returns the button found, and signals an error if no
buttons can be found.  If @var{no-error} in non-@code{nil}, return nil
instead of signaling the error.
@end deffn

@deffn Command backward-button n &optional wrap display-message
Move to the @var{n}th previous button, or @var{n}th next button if
@var{n} is negative.  If @var{n} is zero, move to the start of any
button at point.  If @var{wrap} is non-@code{nil}, moving past either
end of the buffer continues from the other end.  If
@var{display-message} is non-@code{nil}, the button's help-echo string
is displayed.  Any button with a non-@code{nil} @code{skip} property
is skipped over.  Returns the button found, and signals an error if no
buttons can be found.  If @var{no-error} in non-@code{nil}, return nil
instead of signaling the error.
@end deffn

@defun next-button pos &optional count-current
@defunx previous-button pos &optional count-current
Return the next button after (for @code{next-button}) or before (for
@code{previous-button}) position @var{pos} in the current buffer.  If
@var{count-current} is non-@code{nil}, count any button at @var{pos}
in the search, instead of starting at the next button.
@end defun

@node 抽象显示
@section Abstract Display
@cindex ewoc
@cindex display, abstract
@cindex display, arbitrary objects
@cindex model/view/controller
@cindex view part, model/view/controller

  The Ewoc package constructs buffer text that represents a structure
of Lisp objects, and updates the text to follow changes in that
structure.  This is like the ``view'' component in the
``model--view--controller'' design paradigm.  Ewoc means ``Emacs's
Widget for Object Collections''.

  An @dfn{ewoc} is a structure that organizes information required to
construct buffer text that represents certain Lisp data.  The buffer
text of the ewoc has three parts, in order: first, fixed @dfn{header}
text; next, textual descriptions of a series of data elements (Lisp
objects that you specify); and last, fixed @dfn{footer} text.
Specifically, an ewoc contains information on:

@itemize @bullet
@item
The buffer which its text is generated in.

@item
The text's start position in the buffer.

@item
The header and footer strings.

@item
@cindex node, ewoc
@c or "@cindex node, abstract display"?
A doubly-linked chain of @dfn{nodes}, each of which contains:

@itemize
@item
A @dfn{data element}, a single Lisp object.

@item
Links to the preceding and following nodes in the chain.
@end itemize

@item
A @dfn{pretty-printer} function which is responsible for
inserting the textual representation of a data
element value into the current buffer.
@end itemize

  Typically, you define an ewoc with @code{ewoc-create}, and then pass
the resulting ewoc structure to other functions in the Ewoc package to
build nodes within it, and display it in the buffer.  Once it is
displayed in the buffer, other functions determine the correspondence
between buffer positions and nodes, move point from one node's textual
representation to another, and so forth.  @xref{Abstract Display
Functions}.

@cindex encapsulation, ewoc
@c or "@cindex encapsulation, abstract display"?
  A node @dfn{encapsulates} a data element much the way a variable
holds a value.  Normally, encapsulation occurs as a part of adding a
node to the ewoc.  You can retrieve the data element value and place a
new value in its place, like so:

@lisp
(ewoc-data @var{node})
@result{} value

(ewoc-set-data @var{node} @var{new-value})
@result{} @var{new-value}
@end lisp

@noindent
You can also use, as the data element value, a Lisp object (list or
vector) that is a container for the real value, or an index into
some other structure.  The example (@pxref{Abstract Display Example})
uses the latter approach.

  When the data changes, you will want to update the text in the
buffer.  You can update all nodes by calling @code{ewoc-refresh}, or
just specific nodes using @code{ewoc-invalidate}, or all nodes
satisfying a predicate using @code{ewoc-map}.  Alternatively, you can
delete invalid nodes using @code{ewoc-delete} or @code{ewoc-filter},
and add new nodes in their place.  Deleting a node from an ewoc deletes
its associated textual description from buffer, as well.

@menu
* Abstract Display Functions::  Functions in the Ewoc package.
* Abstract Display Example::    Example of using Ewoc.
@end menu

@node Abstract Display Functions
@subsection Abstract Display Functions

  In this subsection, @var{ewoc} and @var{node} stand for the
structures described above (@pxref{Abstract Display}), while
@var{data} stands for an arbitrary Lisp object used as a data element.

@defun ewoc-create pretty-printer &optional header footer nosep
This constructs and returns a new ewoc, with no nodes (and thus no data
elements).  @var{pretty-printer} should be a function that takes one
argument, a data element of the sort you plan to use in this ewoc, and
inserts its textual description at point using @code{insert} (and never
@code{insert-before-markers}, because that would interfere with the
Ewoc package's internal mechanisms).

Normally, a newline is automatically inserted after the header,
the footer and every node's textual description.  If @var{nosep}
is non-@code{nil}, no newline is inserted.  This may be useful for
displaying an entire ewoc on a single line, for example, or for
making nodes invisible by arranging for @var{pretty-printer}
to do nothing for those nodes.

An ewoc maintains its text in the buffer that is current when
you create it, so switch to the intended buffer before calling
@code{ewoc-create}.
@end defun

@defun ewoc-buffer ewoc
This returns the buffer where @var{ewoc} maintains its text.
@end defun

@defun ewoc-get-hf ewoc
This returns a cons cell @code{(@var{header} . @var{footer})}
made from @var{ewoc}'s header and footer.
@end defun

@defun ewoc-set-hf ewoc header footer
This sets the header and footer of @var{ewoc} to the strings
@var{header} and @var{footer}, respectively.
@end defun

@defun ewoc-enter-first ewoc data
@defunx ewoc-enter-last ewoc data
These add a new node encapsulating @var{data}, putting it, respectively,
at the beginning or end of @var{ewoc}'s chain of nodes.
@end defun

@defun ewoc-enter-before ewoc node data
@defunx ewoc-enter-after ewoc node data
These add a new node encapsulating @var{data}, adding it to
@var{ewoc} before or after @var{node}, respectively.
@end defun

@defun ewoc-prev ewoc node
@defunx ewoc-next ewoc node
These return, respectively, the previous node and the next node of @var{node}
in @var{ewoc}.
@end defun

@defun ewoc-nth ewoc n
This returns the node in @var{ewoc} found at zero-based index @var{n}.
A negative @var{n} means count from the end.  @code{ewoc-nth} returns
@code{nil} if @var{n} is out of range.
@end defun

@defun ewoc-data node
This extracts the data encapsulated by @var{node} and returns it.
@end defun

@defun ewoc-set-data node data
This sets the data encapsulated by @var{node} to @var{data}.
@end defun

@defun ewoc-locate ewoc &optional pos guess
This determines the node in @var{ewoc} which contains point (or
@var{pos} if specified), and returns that node.  If @var{ewoc} has no
nodes, it returns @code{nil}.  If @var{pos} is before the first node,
it returns the first node; if @var{pos} is after the last node, it returns
the last node.  The optional third arg @var{guess}
should be a node that is likely to be near @var{pos}; this doesn't
alter the result, but makes the function run faster.
@end defun

@defun ewoc-location node
This returns the start position of @var{node}.
@end defun

@defun ewoc-goto-prev ewoc arg
@defunx ewoc-goto-next ewoc arg
These move point to the previous or next, respectively, @var{arg}th node
in @var{ewoc}.  @code{ewoc-goto-prev} does not move if it is already at
the first node or if @var{ewoc} is empty, whereas @code{ewoc-goto-next}
moves past the last node, returning @code{nil}.  Excepting this special
case, these functions return the node moved to.
@end defun

@defun ewoc-goto-node ewoc node
This moves point to the start of @var{node} in @var{ewoc}.
@end defun

@defun ewoc-refresh ewoc
This function regenerates the text of @var{ewoc}.  It works by
deleting the text between the header and the footer, i.e., all the
data elements' representations, and then calling the pretty-printer
function for each node, one by one, in order.
@end defun

@defun ewoc-invalidate ewoc &rest nodes
This is similar to @code{ewoc-refresh}, except that only @var{nodes} in
@var{ewoc} are updated instead of the entire set.
@end defun

@defun ewoc-delete ewoc &rest nodes
This deletes each node in @var{nodes} from @var{ewoc}.
@end defun

@defun ewoc-filter ewoc predicate &rest args
This calls @var{predicate} for each data element in @var{ewoc} and
deletes those nodes for which @var{predicate} returns @code{nil}.
Any @var{args} are passed to @var{predicate}.
@end defun

@defun ewoc-collect ewoc predicate &rest args
This calls @var{predicate} for each data element in @var{ewoc}
and returns a list of those elements for which @var{predicate}
returns non-@code{nil}.  The elements in the list are ordered
as in the buffer.  Any @var{args} are passed to @var{predicate}.
@end defun

@defun ewoc-map map-function ewoc &rest args
This calls @var{map-function} for each data element in @var{ewoc} and
updates those nodes for which @var{map-function} returns non-@code{nil}.
Any @var{args} are passed to @var{map-function}.
@end defun

@node Abstract Display Example
@subsection Abstract Display Example

  Here is a simple example using functions of the ewoc package to
implement a @dfn{color components} display, an area in a buffer that
represents a vector of three integers (itself representing a 24-bit RGB
value) in various ways.

@example
(setq colorcomp-ewoc nil
      colorcomp-data nil
      colorcomp-mode-map nil
      colorcomp-labels ["Red" "Green" "Blue"])

(defun colorcomp-pp (data)
  (if data
      (let ((comp (aref colorcomp-data data)))
        (insert (aref colorcomp-labels data) "\t: #x"
                (format "%02X" comp) " "
                (make-string (ash comp -2) ?#) "\n"))
    (let ((cstr (format "#%02X%02X%02X"
                        (aref colorcomp-data 0)
                        (aref colorcomp-data 1)
                        (aref colorcomp-data 2)))
          (samp " (sample text) "))
      (insert "Color\t: "
              (propertize samp 'face
                          `(foreground-color . ,cstr))
              (propertize samp 'face
                          `(background-color . ,cstr))
              "\n"))))

(defun colorcomp (color)
  "Allow fiddling with COLOR in a new buffer.
The buffer is in Color Components mode."
  (interactive "sColor (name or #RGB or #RRGGBB): ")
  (when (string= "" color)
    (setq color "green"))
  (unless (color-values color)
    (error "No such color: %S" color))
  (switch-to-buffer
   (generate-new-buffer (format "originally: %s" color)))
  (kill-all-local-variables)
  (setq major-mode 'colorcomp-mode
        mode-name "Color Components")
  (use-local-map colorcomp-mode-map)
  (erase-buffer)
  (buffer-disable-undo)
  (let ((data (apply 'vector (mapcar (lambda (n) (ash n -8))
                                     (color-values color))))
        (ewoc (ewoc-create 'colorcomp-pp
                           "\nColor Components\n\n"
                           (substitute-command-keys
                            "\n\\@{colorcomp-mode-map@}"))))
    (set (make-local-variable 'colorcomp-data) data)
    (set (make-local-variable 'colorcomp-ewoc) ewoc)
    (ewoc-enter-last ewoc 0)
    (ewoc-enter-last ewoc 1)
    (ewoc-enter-last ewoc 2)
    (ewoc-enter-last ewoc nil)))
@end example

@cindex controller part, model/view/controller
  This example can be extended to be a color selection widget (in
other words, the ``controller'' part of the ``model--view--controller''
design paradigm) by defining commands to modify @code{colorcomp-data}
and to finish the selection process, and a keymap to tie it all
together conveniently.

@smallexample
(defun colorcomp-mod (index limit delta)
  (let ((cur (aref colorcomp-data index)))
    (unless (= limit cur)
      (aset colorcomp-data index (+ cur delta)))
    (ewoc-invalidate
     colorcomp-ewoc
     (ewoc-nth colorcomp-ewoc index)
     (ewoc-nth colorcomp-ewoc -1))))

(defun colorcomp-R-more () (interactive) (colorcomp-mod 0 255 1))
(defun colorcomp-G-more () (interactive) (colorcomp-mod 1 255 1))
(defun colorcomp-B-more () (interactive) (colorcomp-mod 2 255 1))
(defun colorcomp-R-less () (interactive) (colorcomp-mod 0 0 -1))
(defun colorcomp-G-less () (interactive) (colorcomp-mod 1 0 -1))
(defun colorcomp-B-less () (interactive) (colorcomp-mod 2 0 -1))

(defun colorcomp-copy-as-kill-and-exit ()
  "Copy the color components into the kill ring and kill the buffer.
The string is formatted #RRGGBB (hash followed by six hex digits)."
  (interactive)
  (kill-new (format "#%02X%02X%02X"
                    (aref colorcomp-data 0)
                    (aref colorcomp-data 1)
                    (aref colorcomp-data 2)))
  (kill-buffer nil))

(setq colorcomp-mode-map
      (let ((m (make-sparse-keymap)))
        (suppress-keymap m)
        (define-key m "i" 'colorcomp-R-less)
        (define-key m "o" 'colorcomp-R-more)
        (define-key m "k" 'colorcomp-G-less)
        (define-key m "l" 'colorcomp-G-more)
        (define-key m "," 'colorcomp-B-less)
        (define-key m "." 'colorcomp-B-more)
        (define-key m " " 'colorcomp-copy-as-kill-and-exit)
        m))
@end smallexample

Note that we never modify the data in each node, which is fixed when the
ewoc is created to be either @code{nil} or an index into the vector
@code{colorcomp-data}, the actual color components.

@node 闪烁
@section Blinking Parentheses
@cindex parenthesis matching
@cindex blinking parentheses
@cindex balancing parentheses

  This section describes the mechanism by which Emacs shows a matching
open parenthesis when the user inserts a close parenthesis.

@defvar blink-paren-function
The value of this variable should be a function (of no arguments) to
be called whenever a character with close parenthesis syntax is inserted.
The value of @code{blink-paren-function} may be @code{nil}, in which
case nothing is done.
@end defvar

@defopt blink-matching-paren
If this variable is @code{nil}, then @code{blink-matching-open} does
nothing.
@end defopt

@defopt blink-matching-paren-distance
This variable specifies the maximum distance to scan for a matching
parenthesis before giving up.
@end defopt

@defopt blink-matching-delay
This variable specifies the number of seconds to keep indicating the
matching parenthesis.  A fraction of a second often gives good
results, but the default is 1, which works on all systems.
@end defopt

@deffn Command blink-matching-open
This function is the default value of @code{blink-paren-function}.  It
assumes that point follows a character with close parenthesis syntax
and applies the appropriate effect momentarily to the matching opening
character.  If that character is not already on the screen, it
displays the character's context in the echo area.  To avoid long
delays, this function does not search farther than
@code{blink-matching-paren-distance} characters.

Here is an example of calling this function explicitly.

@smallexample
@group
(defun interactive-blink-matching-open ()
  "Indicate momentarily the start of parenthesized sexp before point."
  (interactive)
@end group
@group
  (let ((blink-matching-paren-distance
         (buffer-size))
        (blink-matching-paren t))
    (blink-matching-open)))
@end group
@end smallexample
@end deffn

@node 字符显示
@section Character Display

  This section describes how characters are actually displayed by
Emacs.  Typically, a character is displayed as a @dfn{glyph} (a
graphical symbol which occupies one character position on the screen),
whose appearance corresponds to the character itself.  For example,
the character @samp{a} (character code 97) is displayed as @samp{a}.
Some characters, however, are displayed specially.  For example, the
formfeed character (character code 12) is usually displayed as a
sequence of two glyphs, @samp{^L}, while the newline character
(character code 10) starts a new screen line.

  You can modify how each character is displayed by defining a
@dfn{display table}, which maps each character code into a sequence of
glyphs.  @xref{Display Tables}.

@menu
* Usual Display::       The usual conventions for displaying characters.
* Display Tables::      What a display table consists of.
* Active Display Table::  How Emacs selects a display table to use.
* Glyphs::              How to define a glyph, and what glyphs mean.
* Glyphless Chars::     How glyphless characters are drawn.
@end menu

@node Usual Display
@subsection Usual Display Conventions

  Here are the conventions for displaying each character code (in the
absence of a display table, which can override these
@iftex
conventions).
@end iftex
@ifnottex
conventions; @pxref{Display Tables}).
@end ifnottex

@cindex printable ASCII characters
@itemize @bullet
@item
The @dfn{printable @acronym{ASCII} characters}, character codes 32
through 126 (consisting of numerals, English letters, and symbols like
@samp{#}) are displayed literally.

@item
The tab character (character code 9) displays as whitespace stretching
up to the next tab stop column.  @xref{Text Display,,, emacs, The GNU
Emacs Manual}.  The variable @code{tab-width} controls the number of
spaces per tab stop (see below).

@item
The newline character (character code 10) has a special effect: it
ends the preceding line and starts a new line.

@cindex ASCII control characters
@item
The non-printable @dfn{@acronym{ASCII} control characters}---character
codes 0 through 31, as well as the @key{DEL} character (character code
127)---display in one of two ways according to the variable
@code{ctl-arrow}.  If this variable is non-@code{nil} (the default),
these characters are displayed as sequences of two glyphs, where the
first glyph is @samp{^} (a display table can specify a glyph to use
instead of @samp{^}); e.g., the @key{DEL} character is displayed as
@samp{^?}.

If @code{ctl-arrow} is @code{nil}, these characters are displayed as
octal escapes (see below).

This rule also applies to carriage return (character code 13), if that
character appears in the buffer.  But carriage returns usually do not
appear in buffer text; they are eliminated as part of end-of-line
conversion (@pxref{Coding System Basics}).

@cindex octal escapes
@item
@dfn{Raw bytes} are non-@acronym{ASCII} characters with codes 128
through 255 (@pxref{Text Representations}).  These characters display
as @dfn{octal escapes}: sequences of four glyphs, where the first
glyph is the @acronym{ASCII} code for @samp{\}, and the others are
digit characters representing the character code in octal.  (A display
table can specify a glyph to use instead of @samp{\}.)

@item
Each non-@acronym{ASCII} character with code above 255 is displayed
literally, if the terminal supports it.  If the terminal does not
support it, the character is said to be @dfn{glyphless}, and it is
usually displayed using a placeholder glyph.  For example, if a
graphical terminal has no font for a character, Emacs usually displays
a box containing the character code in hexadecimal.  @xref{Glyphless
Chars}.
@end itemize

  The above display conventions apply even when there is a display
table, for any character whose entry in the active display table is
@code{nil}.  Thus, when you set up a display table, you need only
specify the characters for which you want special behavior.

  The following variables affect how certain characters are displayed
on the screen.  Since they change the number of columns the characters
occupy, they also affect the indentation functions.  They also affect
how the mode line is displayed; if you want to force redisplay of the
mode line using the new values, call the function
@code{force-mode-line-update} (@pxref{Mode Line Format}).

@defopt ctl-arrow
@cindex control characters in display
This buffer-local variable controls how control characters are
displayed.  If it is non-@code{nil}, they are displayed as a caret
followed by the character: @samp{^A}.  If it is @code{nil}, they are
displayed as octal escapes: a backslash followed by three octal
digits, as in @samp{\001}.
@end defopt

@defopt tab-width
The value of this buffer-local variable is the spacing between tab
stops used for displaying tab characters in Emacs buffers.  The value
is in units of columns, and the default is 8.  Note that this feature
is completely independent of the user-settable tab stops used by the
command @code{tab-to-tab-stop}.  @xref{Indent Tabs}.
@end defopt

@node Display Tables
@subsection Display Tables

@cindex display table
  A display table is a special-purpose char-table
(@pxref{Char-Tables}), with @code{display-table} as its subtype, which
is used to override the usual character display conventions.  This
section describes how to make, inspect, and assign elements to a
display table object.

@defun make-display-table
This creates and returns a display table.  The table initially has
@code{nil} in all elements.
@end defun

  The ordinary elements of the display table are indexed by character
codes; the element at index @var{c} says how to display the character
code @var{c}.  The value should be @code{nil} (which means to display
the character @var{c} according to the usual display conventions;
@pxref{Usual Display}), or a vector of glyph codes (which means to
display the character @var{c} as those glyphs; @pxref{Glyphs}).

  @strong{Warning:} if you use the display table to change the display
of newline characters, the whole buffer will be displayed as one long
line.

  The display table also has six @dfn{extra slots} which serve special
purposes.  Here is a table of their meanings; @code{nil} in any slot
means to use the default for that slot, as stated below.

@table @asis
@item 0
The glyph for the end of a truncated screen line (the default for this
is @samp{$}).  @xref{Glyphs}.  On graphical terminals, Emacs by
default uses arrows in the fringes to indicate truncation, so the
display table has no effect, unless you disable the fringes
(@pxref{Fringes,, Window Fringes, emacs, the GNU Emacs Manual}).

@item 1
The glyph for the end of a continued line (the default is @samp{\}).
On graphical terminals, Emacs by default uses curved arrows in the
fringes to indicate continuation, so the display table has no effect,
unless you disable the fringes.

@item 2
The glyph for indicating a character displayed as an octal character
code (the default is @samp{\}).

@item 3
The glyph for indicating a control character (the default is @samp{^}).

@item 4
A vector of glyphs for indicating the presence of invisible lines (the
default is @samp{...}).  @xref{Selective Display}.

@item 5
The glyph used to draw the border between side-by-side windows (the
default is @samp{|}).  @xref{Splitting Windows}.  This currently has
effect only on text terminals; on graphical terminals, if vertical
scroll bars are supported and in use, a scroll bar separates the two
windows, and if there are no vertical scroll bars and no dividers
(@pxref{Window Dividers}), Emacs uses a thin line to indicate the
border.
@end table

  For example, here is how to construct a display table that mimics
the effect of setting @code{ctl-arrow} to a non-@code{nil} value
(@pxref{Glyphs}, for the function @code{make-glyph-code}):

@example
(setq disptab (make-display-table))
(dotimes (i 32)
  (or (= i ?\t)
      (= i ?\n)
      (aset disptab i
            (vector (make-glyph-code ?^ 'escape-glyph)
                    (make-glyph-code (+ i 64) 'escape-glyph)))))
(aset disptab 127
      (vector (make-glyph-code ?^ 'escape-glyph)
              (make-glyph-code ?? 'escape-glyph)))))
@end example

@defun display-table-slot display-table slot
This function returns the value of the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to
5 inclusive, or a slot name (symbol).  Valid symbols are
@code{truncation}, @code{wrap}, @code{escape}, @code{control},
@code{selective-display}, and @code{vertical-border}.
@end defun

@defun set-display-table-slot display-table slot value
This function stores @var{value} in the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to
5 inclusive, or a slot name (symbol).  Valid symbols are
@code{truncation}, @code{wrap}, @code{escape}, @code{control},
@code{selective-display}, and @code{vertical-border}.
@end defun

@defun describe-display-table display-table
This function displays a description of the display table
@var{display-table} in a help buffer.
@end defun

@deffn Command describe-current-display-table
This command displays a description of the current display table in a
help buffer.
@end deffn

@node Active Display Table
@subsection Active Display Table
@cindex active display table

  Each window can specify a display table, and so can each buffer.
The window's display table, if there is one, takes precedence over the
buffer's display table.  If neither exists, Emacs tries to use the
standard display table; if that is @code{nil}, Emacs uses the usual
character display conventions (@pxref{Usual Display}).

  Note that display tables affect how the mode line is displayed, so
if you want to force redisplay of the mode line using a new display
table, call @code{force-mode-line-update} (@pxref{Mode Line Format}).

@defun window-display-table &optional window
This function returns @var{window}'s display table, or @code{nil} if
there is none.  The default for @var{window} is the selected window.
@end defun

@defun set-window-display-table window table
This function sets the display table of @var{window} to @var{table}.
The argument @var{table} should be either a display table or
@code{nil}.
@end defun

@defvar buffer-display-table
This variable is automatically buffer-local in all buffers; its value
specifies the buffer's display table.  If it is @code{nil}, there is
no buffer display table.
@end defvar

@defvar standard-display-table
The value of this variable is the standard display table, which is
used when Emacs is displaying a buffer in a window with neither a
window display table nor a buffer display table defined, or when Emacs
is outputting text to the standard output or error streams.  Although its
default is typically @code{nil}, in an interactive session if the
terminal cannot display curved quotes, its default maps curved quotes
to ASCII approximations.  @xref{Text Quoting Style}.
@end defvar

The @file{disp-table} library defines several functions for changing
the standard display table.

@node Glyphs
@subsection Glyphs
@cindex glyph

@cindex glyph code
  A @dfn{glyph} is a graphical symbol which occupies a single
character position on the screen.  Each glyph is represented in Lisp
as a @dfn{glyph code}, which specifies a character and optionally a
face to display it in (@pxref{Faces}).  The main use of glyph codes is
as the entries of display tables (@pxref{Display Tables}).  The
following functions are used to manipulate glyph codes:

@defun make-glyph-code char &optional face
This function returns a glyph code representing char @var{char} with
face @var{face}.  If @var{face} is omitted or @code{nil}, the glyph
uses the default face; in that case, the glyph code is an integer.  If
@var{face} is non-@code{nil}, the glyph code is not necessarily an
integer object.
@end defun

@defun glyph-char glyph
This function returns the character of glyph code @var{glyph}.
@end defun

@defun glyph-face glyph
This function returns face of glyph code @var{glyph}, or @code{nil} if
@var{glyph} uses the default face.
@end defun

@ifnottex
  You can set up a @dfn{glyph table} to change how glyph codes are
actually displayed on text terminals.  This feature is semi-obsolete;
use @code{glyphless-char-display} instead (@pxref{Glyphless Chars}).

@defvar glyph-table
The value of this variable, if non-@code{nil}, is the current glyph
table.  It takes effect only on character terminals; on graphical
displays, all glyphs are displayed literally.  The glyph table should
be a vector whose @var{g}th element specifies how to display glyph
code @var{g}, where @var{g} is the glyph code for a glyph whose face
is unspecified.  Each element should be one of the following:

@table @asis
@item @code{nil}
Display this glyph literally.

@item a string
Display this glyph by sending the specified string to the terminal.

@item a glyph code
Display the specified glyph code instead.
@end table

Any integer glyph code greater than or equal to the length of the
glyph table is displayed literally.
@end defvar
@end ifnottex

@node Glyphless Chars
@subsection Glyphless Character Display
@cindex glyphless characters

  @dfn{Glyphless characters} are characters which are displayed in a
special way, e.g., as a box containing a hexadecimal code, instead of
being displayed literally.  These include characters which are
explicitly defined to be glyphless, as well as characters for which
there is no available font (on a graphical display), and characters
which cannot be encoded by the terminal's coding system (on a text
terminal).

@defvar glyphless-char-display
The value of this variable is a char-table which defines glyphless
characters and how they are displayed.  Each entry must be one of the
following display methods:

@table @asis
@item @code{nil}
Display the character in the usual way.

@item @code{zero-width}
Don't display the character.

@item @code{thin-space}
Display a thin space, 1-pixel wide on graphical displays, or
1-character wide on text terminals.

@item @code{empty-box}
Display an empty box.

@item @code{hex-code}
Display a box containing the Unicode codepoint of the character, in
hexadecimal notation.

@item an @acronym{ASCII} string
Display a box containing that string.  The string should contain at
most 6 @acronym{ASCII} characters.

@item a cons cell @code{(@var{graphical} . @var{text})}
Display with @var{graphical} on graphical displays, and with
@var{text} on text terminals.  Both @var{graphical} and @var{text}
must be one of the display methods described above.
@end table

@noindent
The @code{thin-space}, @code{empty-box}, @code{hex-code}, and
@acronym{ASCII} string display methods are drawn with the
@code{glyphless-char} face.  On text terminals, a box is emulated by
square brackets, @samp{[]}.

The char-table has one extra slot, which determines how to display any
character that cannot be displayed with any available font, or cannot
be encoded by the terminal's coding system.  Its value should be one
of the above display methods, except @code{zero-width} or a cons cell.

If a character has a non-@code{nil} entry in an active display table,
the display table takes effect; in this case, Emacs does not consult
@code{glyphless-char-display} at all.
@end defvar

@defopt glyphless-char-display-control
This user option provides a convenient way to set
@code{glyphless-char-display} for groups of similar characters.  Do
not set its value directly from Lisp code; the value takes effect only
via a custom @code{:set} function (@pxref{Variable Definitions}),
which updates @code{glyphless-char-display}.

Its value should be an alist of elements @code{(@var{group}
. @var{method})}, where @var{group} is a symbol specifying a group of
characters, and @var{method} is a symbol specifying how to display
them.

@var{group} should be one of the following:

@table @code
@item c0-control
@acronym{ASCII} control characters @code{U+0000} to @code{U+001F},
excluding the newline and tab characters (normally displayed as escape
sequences like @samp{^A}; @pxref{Text Display,, How Text Is Displayed,
emacs, The GNU Emacs Manual}).

@item c1-control
Non-@acronym{ASCII}, non-printing characters @code{U+0080} to
@code{U+009F} (normally displayed as octal escape sequences like
@samp{\230}).

@item format-control
Characters of Unicode General Category [Cf], such as U+200E
@sc{left-to-right mark}, but excluding characters that have graphic
images, such as U+00AD @sc{soft hyphen}.

@item no-font
Characters for which there is no suitable font, or which cannot be
encoded by the terminal's coding system.
@end table

@c FIXME: this can also be 'acronym', but that's not currently
@c completely implemented; it applies only to the format-control
@c group, and only works if the acronym is in 'char-acronym-table'.
The @var{method} symbol should be one of @code{zero-width},
@code{thin-space}, @code{empty-box}, or @code{hex-code}.  These have
the same meanings as in @code{glyphless-char-display}, above.
@end defopt

@node 哔哔声
@section Beeping
@cindex bell

  This section describes how to make Emacs ring the bell (or blink the
screen) to attract the user's attention.  Be conservative about how
often you do this; frequent bells can become irritating.  Also be
careful not to use just beeping when signaling an error is more
appropriate (@pxref{Errors}).

@defun ding &optional do-not-terminate
@cindex keyboard macro termination
This function beeps, or flashes the screen (see @code{visible-bell} below).
It also terminates any keyboard macro currently executing unless
@var{do-not-terminate} is non-@code{nil}.
@end defun

@defun beep &optional do-not-terminate
This is a synonym for @code{ding}.
@end defun

@defopt visible-bell
This variable determines whether Emacs should flash the screen to
represent a bell.  Non-@code{nil} means yes, @code{nil} means no.
This is effective on graphical displays, and on text terminals
provided the terminal's Termcap entry defines the visible bell
capability (@samp{vb}).
@end defopt

@defopt ring-bell-function
If this is non-@code{nil}, it specifies how Emacs should ring the
bell.  Its value should be a function of no arguments.  If this is
non-@code{nil}, it takes precedence over the @code{visible-bell}
variable.
@end defopt

@node 窗口系统
@section Window Systems

  Emacs works with several window systems, most notably the X Window
System.  Both Emacs and X use the term ``window'', but use it
differently.  An Emacs frame is a single window as far as X is
concerned; the individual Emacs windows are not known to X at all.

@defvar window-system
This terminal-local variable tells Lisp programs what window system
Emacs is using for displaying the frame.  The possible values are

@table @code
@item x
@cindex X Window System
Emacs is displaying the frame using X.
@item w32
Emacs is displaying the frame using native MS-Windows GUI.
@item ns
Emacs is displaying the frame using the Nextstep interface (used on
GNUstep and macOS).
@item pc
Emacs is displaying the frame using MS-DOS direct screen writes.
@item nil
Emacs is displaying the frame on a character-based terminal.
@end table
@end defvar

@defvar initial-window-system
This variable holds the value of @code{window-system} used for the
first frame created by Emacs during startup.  (When Emacs is invoked
as a daemon, it does not create any initial
frames, so @code{initial-window-system} is @code{nil}, except on
MS-Windows, where it is still @code{w32}.  @xref{Initial Options,
daemon,, emacs, The GNU Emacs Manual}.)
@end defvar

@defun window-system &optional frame
This function returns a symbol whose name tells what window system is
used for displaying @var{frame} (which defaults to the currently
selected frame).  The list of possible symbols it returns is the same
one documented for the variable @code{window-system} above.
@end defun

  Do @emph{not} use @code{window-system} and
@code{initial-window-system} as predicates or boolean flag variables,
if you want to write code that works differently on text terminals and
graphic displays.  That is because @code{window-system} is not a good
indicator of Emacs capabilities on a given display type.  Instead, use
@code{display-graphic-p} or any of the other @code{display-*-p}
predicates described in @ref{Display Feature Testing}.

@node 工具提示
@section Tooltips
@cindex tooltips
@dfn{Tooltips} are special frames (@pxref{Frames}) that are used to
display helpful hints (a.k.a.@: ``tips'') related to the current
position of the mouse pointer.  Emacs uses tooltips to display help
strings about active portions of text (@pxref{Special Properties}) and
about various UI elements, such as menu items (@pxref{Extended Menu
Items}) and tool-bar buttons (@pxref{Tool Bar}).

@defun tooltip-mode
Tooltip Mode is a minor mode that enables display of tooltips.
Turning off this mode causes the tooltips be displayed in the echo
area.  On text-mode (a.k.a.@: ``TTY'') frames, tooltips are always
displayed in the echo area.
@end defun

@vindex x-gtk-use-system-tooltips
When Emacs is built with GTK+ support, it by default displays tooltips
using GTK+ functions, and the appearance of the tooltips is then
controlled by GTK+ settings.  GTK+ tooltips can be disabled by
changing the value of the variable @code{x-gtk-use-system-tooltips} to
@code{nil}.  The rest of this subsection describes how to control
non-GTK+ tooltips, which are presented by Emacs itself.

@cindex tooltip frames
Tooltips are displayed in special frames called tooltip frames, which
have their own frame parameters (@pxref{Frame Parameters}).  Unlike
other frames, the default parameters for tooltip frames are stored in a
special variable.

@defopt tooltip-frame-parameters
This customizable option holds the default frame parameters used for
displaying tooltips.  Any font and color parameters are ignored, and the
corresponding attributes of the @code{tooltip} face are used instead.
If @code{left} or @code{top} parameters are included, they are used as
absolute frame-relative coordinates where the tooltip should be shown.
(Mouse-relative position of the tooltip can be customized using the
variables described in @ref{Tooltips,,, emacs, The GNU Emacs Manual}.)
Note that the @code{left} and @code{top} parameters, if present,
override the values of mouse-relative offsets.
@end defopt

@vindex tooltip@r{ face}
The @code{tooltip} face determines the appearance of text shown in
tooltips.  It should generally use a variable-pitch font of size that
is preferably smaller than the default frame font.

@findex tooltip-help-tips
@defvar tooltip-functions
This abnormal hook is a list of functions to call when Emacs needs to
display a tooltip.  Each function is called with a single argument
@var{event} which is a copy of the last mouse movement event.  If a
function on this list actually displays the tooltip, it should return
non-@code{nil}, and then the rest of the functions will not be
called.  The default value of this variable is a single function
@code{tooltip-help-tips}.
@end defvar

If you write your own function to be put on the
@code{tooltip-functions} list, you may need to know the buffer of the
mouse event that triggered the tooltip display.  The following
function provides that information.

@defun tooltip-event-buffer event
This function returns the buffer over which @var{event} occurred.
Call it with the argument of the function from
@code{tooltip-functions} to obtain the buffer whose text triggered the
tooltip.  Note that the event might occur not over a buffer (e.g.,
over the tool bar), in which case this function will return
@code{nil}.
@end defun

Other aspects of tooltip display are controlled by several
customizable settings; see @ref{Tooltips,,, emacs, The GNU Emacs
Manual}.

@node 双向显示
@section Bidirectional Display
@cindex bidirectional display
@cindex right-to-left text

  Emacs can display text written in scripts, such as Arabic, Farsi,
and Hebrew, whose natural ordering for horizontal text display runs
from right to left.  Furthermore, segments of Latin script and digits
embedded in right-to-left text are displayed left-to-right, while
segments of right-to-left script embedded in left-to-right text
(e.g., Arabic or Hebrew text in comments or strings in a program
source file) are appropriately displayed right-to-left.  We call such
mixtures of left-to-right and right-to-left text @dfn{bidirectional
text}.  This section describes the facilities and options for editing
and displaying bidirectional text.

@cindex logical order
@cindex reading order
@cindex visual order
@cindex unicode bidirectional algorithm
@cindex UBA
@cindex bidirectional reordering
@cindex reordering, of bidirectional text
  Text is stored in Emacs buffers and strings in @dfn{logical} (or
@dfn{reading}) order, i.e., the order in which a human would read
each character.  In right-to-left and bidirectional text, the order in
which characters are displayed on the screen (called @dfn{visual
order}) is not the same as logical order; the characters' screen
positions do not increase monotonically with string or buffer
position.  In performing this @dfn{bidirectional reordering}, Emacs
follows the Unicode Bidirectional Algorithm (a.k.a.@: @acronym{UBA}),
which is described in Annex #9 of the Unicode standard
(@url{http://www.unicode.org/reports/tr9/}).  Emacs provides a ``Full
Bidirectionality'' class implementation of the @acronym{UBA},
consistent with the requirements of the Unicode Standard v9.0.  Note,
however, that the way Emacs displays continuation lines when text
direction is opposite to the base paragraph direction deviates from
the UBA, which requires to perform line wrapping before reordering
text for display.

@defvar bidi-display-reordering
If the value of this buffer-local variable is non-@code{nil} (the
default), Emacs performs bidirectional reordering for display.  The
reordering affects buffer text, as well as display strings and overlay
strings from text and overlay properties in the buffer (@pxref{Overlay
Properties}, and @pxref{Display Property}).  If the value is
@code{nil}, Emacs does not perform bidirectional reordering in the
buffer.

The default value of @code{bidi-display-reordering} controls the
reordering of strings which are not directly supplied by a buffer,
including the text displayed in mode lines (@pxref{Mode Line Format})
and header lines (@pxref{Header Lines}).
@end defvar

@cindex unibyte buffers, and bidi reordering
  Emacs never reorders the text of a unibyte buffer, even if
@code{bidi-display-reordering} is non-@code{nil} in the buffer.  This
is because unibyte buffers contain raw bytes, not characters, and thus
lack the directionality properties required for reordering.
Therefore, to test whether text in a buffer will be reordered for
display, it is not enough to test the value of
@code{bidi-display-reordering} alone.  The correct test is this:

@example
 (if (and enable-multibyte-characters
          bidi-display-reordering)
     ;; Buffer is being reordered for display
   )
@end example

  However, unibyte display and overlay strings @emph{are} reordered if
their parent buffer is reordered.  This is because plain-@sc{ascii}
strings are stored by Emacs as unibyte strings.  If a unibyte display
or overlay string includes non-@sc{ascii} characters, these characters
are assumed to have left-to-right direction.

@cindex display properties, and bidi reordering of text
  Text covered by @code{display} text properties, by overlays with
@code{display} properties whose value is a string, and by any other
properties that replace buffer text, is treated as a single unit when
it is reordered for display.  That is, the entire chunk of text
covered by these properties is reordered together.  Moreover, the
bidirectional properties of the characters in such a chunk of text are
ignored, and Emacs reorders them as if they were replaced with a
single character @code{U+FFFC}, known as the @dfn{Object Replacement
Character}.  This means that placing a display property over a portion
of text may change the way that the surrounding text is reordered for
display.  To prevent this unexpected effect, always place such
properties on text whose directionality is identical with text that
surrounds it.

@cindex base direction of a paragraph
  Each paragraph of bidirectional text has a @dfn{base direction},
either right-to-left or left-to-right.  Left-to-right paragraphs are
displayed beginning at the left margin of the window, and are
truncated or continued when the text reaches the right margin.
Right-to-left paragraphs are displayed beginning at the right margin,
and are continued or truncated at the left margin.

@cindex paragraph-start, and bidirectional display
@cindex paragraph-separate, and bidirectional display
  Where exactly paragraphs start and end, for the purpose of the Emacs
@acronym{UBA} implementation, is determined by the following two
buffer-local variables (note that @code{paragraph-start} and
@code{paragraph-separate} have no influence on this).  By default both
of these variables are @code{nil}, and paragraphs are bounded by empty
lines, i.e., lines that consist entirely of zero or more whitespace
characters followed by a newline.

@defvar bidi-paragraph-start-re
If non-@code{nil}, this variable's value should be a regular
expression matching a line that starts or separates two paragraphs.
The regular expression is always matched after a newline, so it is
best to anchor it, i.e., begin it with a @code{"^"}.
@end defvar

@defvar bidi-paragraph-separate-re
If non-@code{nil}, this variable's value should be a regular
expression matching a line separates two paragraphs.  The regular
expression is always matched after a newline, so it is best to anchor
it, i.e., begin it with a @code{"^"}.
@end defvar

  If you modify any of these two variables, you should normally modify
both, to make sure they describe paragraphs consistently.  For
example, to have each new line start a new paragraph for
bidi-reordering purposes, set both variables to @code{"^"}.

  By default, Emacs determines the base direction of each paragraph by
looking at the text at its beginning.  The precise method of
determining the base direction is specified by the @acronym{UBA}; in a
nutshell, the first character in a paragraph that has an explicit
directionality determines the base direction of the paragraph.
However, sometimes a buffer may need to force a certain base direction
for its paragraphs.  For example, buffers containing program source
code should force all paragraphs to be displayed left-to-right.  You
can use following variable to do this:

@defopt bidi-paragraph-direction
If the value of this buffer-local variable is the symbol
@code{right-to-left} or @code{left-to-right}, all paragraphs in the
buffer are assumed to have that specified direction.  Any other value
is equivalent to @code{nil} (the default), which means to determine
the base direction of each paragraph from its contents.

@cindex @code{prog-mode}, and @code{bidi-paragraph-direction}
Modes for program source code should set this to @code{left-to-right}.
Prog mode does this by default, so modes derived from Prog mode do not
need to set this explicitly (@pxref{Basic Major Modes}).
@end defopt

@defun current-bidi-paragraph-direction &optional buffer
This function returns the paragraph direction at point in the named
@var{buffer}.  The returned value is a symbol, either
@code{left-to-right} or @code{right-to-left}.  If @var{buffer} is
omitted or @code{nil}, it defaults to the current buffer.  If the
buffer-local value of the variable @code{bidi-paragraph-direction} is
non-@code{nil}, the returned value will be identical to that value;
otherwise, the returned value reflects the paragraph direction
determined dynamically by Emacs.  For buffers whose value of
@code{bidi-display-reordering} is @code{nil} as well as unibyte
buffers, this function always returns @code{left-to-right}.
@end defun

@cindex visual-order cursor motion
  Sometimes there's a need to move point in strict visual order,
either to the left or to the right of its current screen position.
Emacs provides a primitive to do that.

@defun move-point-visually direction
This function moves point of the currently selected window to the
buffer position that appears immediately to the right or to the left
of point on the screen.  If @var{direction} is positive, point will
move one screen position to the right, otherwise it will move one
screen position to the left.  Note that, depending on the surrounding
bidirectional context, this could potentially move point many buffer
positions away.  If invoked at the end of a screen line, the function
moves point to the rightmost or leftmost screen position of the next
or previous screen line, as appropriate for the value of
@var{direction}.

The function returns the new buffer position as its value.
@end defun

@cindex layout on display, and bidirectional text
@cindex jumbled display of bidirectional text
@cindex concatenating bidirectional strings
  Bidirectional reordering can have surprising and unpleasant effects
when two strings with bidirectional content are juxtaposed in a
buffer, or otherwise programmatically concatenated into a string of
text.  A typical problematic case is when a buffer consists of
sequences of text fields separated by whitespace or punctuation
characters, like Buffer Menu mode or Rmail Summary Mode.  Because the
punctuation characters used as separators have @dfn{weak
directionality}, they take on the directionality of surrounding text.
As result, a numeric field that follows a field with bidirectional
content can be displayed @emph{to the left} of the preceding field,
messing up the expected layout.  There are several ways to avoid this
problem:

@itemize @minus
@item
Append the special character U+200E @sc{left-to-right mark}, or
@acronym{LRM}, to the end of each field that may have bidirectional
content, or prepend it to the beginning of the following field.  The
function @code{bidi-string-mark-left-to-right}, described below, comes
in handy for this purpose.  (In a right-to-left paragraph, use
U+200F @sc{right-to-left mark}, or @acronym{RLM}, instead.)  This
is one of the solutions recommended by the UBA.

@item
Include the tab character in the field separator.  The tab character
plays the role of @dfn{segment separator} in bidirectional reordering,
causing the text on either side to be reordered separately.

@cindex @code{space} display spec, and bidirectional text
@item
Separate fields with a @code{display} property or overlay with a
property value of the form @code{(space . PROPS)} (@pxref{Specified
Space}).  Emacs treats this display specification as a @dfn{paragraph
separator}, and reorders the text on either side separately.
@end itemize

@defun bidi-string-mark-left-to-right string
This function returns its argument @var{string}, possibly modified,
such that the result can be safely concatenated with another string,
or juxtaposed with another string in a buffer, without disrupting the
relative layout of this string and the next one on display.  If the
string returned by this function is displayed as part of a
left-to-right paragraph, it will always appear on display to the left
of the text that follows it.  The function works by examining the
characters of its argument, and if any of those characters could cause
reordering on display, the function appends the @acronym{LRM}
character to the string.  The appended @acronym{LRM} character is made
invisible by giving it an @code{invisible} text property of @code{t}
(@pxref{Invisible Text}).
@end defun

  The reordering algorithm uses the bidirectional properties of the
characters stored as their @code{bidi-class} property
(@pxref{Character Properties}).  Lisp programs can change these
properties by calling the @code{put-char-code-property} function.
However, doing this requires a thorough understanding of the
@acronym{UBA}, and is therefore not recommended.  Any changes to the
bidirectional properties of a character have global effect: they
affect all Emacs frames and windows.

  Similarly, the @code{mirroring} property is used to display the
appropriate mirrored character in the reordered text.  Lisp programs
can affect the mirrored display by changing this property.  Again, any
such changes affect all of Emacs display.

@cindex overriding bidirectional properties
@cindex directional overrides
@cindex LRO
@cindex RLO
  The bidirectional properties of characters can be overridden by
inserting into the text special directional control characters,
LEFT-TO-RIGHT OVERRIDE (@acronym{LRO}) and RIGHT-TO-LEFT OVERRIDE
(@acronym{RLO}).  Any characters between a @acronym{RLO} and the
following newline or POP DIRECTIONAL FORMATTING (@acronym{PDF})
control character, whichever comes first, will be displayed as if they
were strong right-to-left characters, i.e.@: they will be reversed on
display.  Similarly, any characters between @acronym{LRO} and
@acronym{PDF} or newline will display as if they were strong
left-to-right, and will @emph{not} be reversed even if they are strong
right-to-left characters.

@cindex phishing using directional overrides
@cindex malicious use of directional overrides
  These overrides are useful when you want to make some text
unaffected by the reordering algorithm, and instead directly control
the display order.  But they can also be used for malicious purposes,
known as @dfn{phishing}.  Specifically, a URL on a Web page or a link
in an email message can be manipulated to make its visual appearance
unrecognizable, or similar to some popular benign location, while the
real location, interpreted by a browser in the logical order, is very
different.

  Emacs provides a primitive that applications can use to detect
instances of text whose bidirectional properties were overridden so as
to make a left-to-right character display as if it were a
right-to-left character, or vise versa.

@defun bidi-find-overridden-directionality from to &optional object
This function looks at the text of the specified @var{object} between
positions @var{from} (inclusive) and @var{to} (exclusive), and returns
the first position where it finds a strong left-to-right character
whose directional properties were forced to display the character as
right-to-left, or for a strong right-to-left character that was forced
to display as left-to-right.  If it finds no such characters in the
specified region of text, it returns @code{nil}.

The optional argument @var{object} specifies which text to search, and
defaults to the current buffer.  If @var{object} is non-@code{nil}, it
can be some other buffer, or it can be a string or a window.  If it is
a string, the function searches that string.  If it is a window, the
function searches the buffer displayed in that window.  If a buffer
whose text you want to examine is displayed in some window, we
recommend to specify it by that window, rather than pass the buffer to
the function.  This is because telling the function about the window
allows it to correctly account for window-specific overlays, which
might change the result of the function if some text in the buffer is
covered by overlays.
@end defun

@cindex copying bidirectional text, preserve visual order
@cindex visual order, preserve when copying bidirectional text
  When text that includes mixed right-to-left and left-to-right
characters and bidirectional controls is copied into a different
location, it can change its visual appearance, and also can affect the
visual appearance of the surrounding text at destination.  This is
because reordering of bidirectional text specified by the
@acronym{UBA} has non-trivial context-dependent effects both on the
copied text and on the text at copy destination that will surround it.

  Sometimes, a Lisp program may need to preserve the exact visual
appearance of the copied text at destination, and of the text that
surrounds the copy.  Lisp programs can use the following function to
achieve that effect.

@defun buffer-substring-with-bidi-context start end &optional no-properties
This function works similar to @code{buffer-substring} (@pxref{Buffer
Contents}), but it prepends and appends to the copied text bidi
directional control characters necessary to preserve the visual
appearance of the text when it is inserted at another place.  Optional
argument @var{no-properties}, if non-@code{nil}, means remove the text
properties from the copy of the text.
@end defun
